{
    "docs": [
        {
            "location": "/index.html", 
            "text": "Welcome\n\n\nWelcome to the documentation website for Fungus, the open source visual storytelling tool for \nUnity\n.\n\n\nThe main website for Fungus and \ncommunity forum\n are available at \nFungusGames.com\n.\n\n\nOverview\n\n\nThere's a wide range of training material available here, suitable for both beginner and experienced game developers. \n\n\n\n\nWhat is Fungus?\n\n\nDownload and install instructions\n\n\nTutorial videos\n\n\nFungus Training Course\n\n\nFungusLua scripting system\n\n\nArticles by the Fungus community\n\n\nFrequently Asked Questions", 
            "title": "Overview"
        }, 
        {
            "location": "/index.html#welcome", 
            "text": "Welcome to the documentation website for Fungus, the open source visual storytelling tool for  Unity .  The main website for Fungus and  community forum  are available at  FungusGames.com .", 
            "title": "Welcome"
        }, 
        {
            "location": "/index.html#overview", 
            "text": "There's a wide range of training material available here, suitable for both beginner and experienced game developers.    What is Fungus?  Download and install instructions  Tutorial videos  Fungus Training Course  FungusLua scripting system  Articles by the Fungus community  Frequently Asked Questions", 
            "title": "Overview"
        }, 
        {
            "location": "/about/index.html", 
            "text": "(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = \"//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.5&appId=309953839151751\";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, 'script', 'facebook-jssdk'));\n\n\n\n\n\n\nWhat is Fungus?\n\n\n\nFungus is a tool which makes it easy to add colourful characters and craft gripping storylines in your game, even if you have never used \nUnity\n before. Our intuitive interface lets everyone create beautiful story games easily - \nfor free and with no coding\n!\n\n\n\n\nFollow @gofungus\n\n\n!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');\n\n\n\n\n\n\nWho's it for?\n\n\nFungus is popular with writers, illustrators, animators and game designers, especially visual novel \n interactive fiction authors. Many people using Fungus are creating games in Unity for the very first time. It is a popular choice for game jams and game design courses.\n\n\n\nFree \n Open Source\n\n\nWe believe that interactive storytelling should be accessible to everyone, so Fungus is \n100% free \n open source\n. It works great with both the free and pro versions of Unity 3D. Fungus is inspired by other great open source storytelling tools like \nTwine\n, \nRen'Py\n and \nScratch\n.\n\n\n\n\n\n\n\nCommunity\n\n\nThe Fungus community is very welcoming and helpful to newcomers. Many people using Fungus have never used Unity or even made a game before, so feel free to ask questions on our \ncommunity forum\n. Helping other people with their questions is a fantastic and very welcome way to contribute back to the community.\n\n\n\n\n\nFeatures\n\n\n\n\n\n\n\n\n\nFungus allows you to easily add storytelling features to your Unity games with no coding, via an intuitive visual scripting system.\n\n\n\n\nSuitable for making visual novels, RPGs, hidden object, puzzle and interactive fiction games.\n\n\nFlowchart-based character dialogue\n\n\nInternationalization of your character dialogue.\n\n\nEasy control of sprites, camera and audio to help tell your story\n\n\nWorks for both 2D and 3D Unity games\n\n\nIntegrates easily with other Unity code and simple to extend.\n\n\nPowerful Lua scripting support for more experienced users\n\n\n100% free and open source\n\n\n\n\nContribute\n\n\nWe welcome all sorts of contributions to Fungus. You can report bugs, suggest new features, contribute source code, write an article, help answer questions on the forums or even just tell your friends about the project!\n\n\n\n\nIssue Tracker: \nGitHub issue tracker\n\n\nSource Code: \nGitHub code repository\n\n\n\n\nCredits\n\n\nChris Gregan\n is the main author and maintainer of Fungus. He's co-founder of \nSnozbot\n, along with \nJohn O' Kane\n and \nRonan Pearce\n.\n\n\n\n\nDr. Matt Smith\n has kindly contributed the written documentation for the Fungus project. If you're new to Unity development then a great source of information, ideas and sample projects is his \nUnity 5.x Cookbook\n, by Matt and \nChico Queiroz\n.\n\n\nPaul Mc Grath\n is Animator / Designer / Film-maker at Whackala. He contributed the \ntutorial videos\n for this site as well as creating the \nFungus Training Course\n.\n\n\nSpecial thanks also to \nVicky Lee\n and \nCoding Grace\n who have helped us to organise loads of Fungus workshops,\n\n\nFungus wouldn't be possible without all the awesome people in our community who have contributed to the project and supported us in myriad ways. Thank you all!\n\n\nLicense\n\n\nThe Fungus software is licensed under the \nOpen Source MIT License\n.\n\n\nThe Fungus documentation is licensed under the \nCreative Commons Attribution-NonCommercial License\n.", 
            "title": "What is Fungus?"
        }, 
        {
            "location": "/about/index.html#what-is-fungus", 
            "text": "Fungus is a tool which makes it easy to add colourful characters and craft gripping storylines in your game, even if you have never used  Unity  before. Our intuitive interface lets everyone create beautiful story games easily -  for free and with no coding !  Follow @gofungus  !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');", 
            "title": "What is Fungus?"
        }, 
        {
            "location": "/about/index.html#whos-it-for", 
            "text": "Fungus is popular with writers, illustrators, animators and game designers, especially visual novel   interactive fiction authors. Many people using Fungus are creating games in Unity for the very first time. It is a popular choice for game jams and game design courses.", 
            "title": "Who's it for?"
        }, 
        {
            "location": "/about/index.html#free-open-source", 
            "text": "We believe that interactive storytelling should be accessible to everyone, so Fungus is  100% free   open source . It works great with both the free and pro versions of Unity 3D. Fungus is inspired by other great open source storytelling tools like  Twine ,  Ren'Py  and  Scratch .", 
            "title": "Free &amp; Open Source"
        }, 
        {
            "location": "/about/index.html#community", 
            "text": "The Fungus community is very welcoming and helpful to newcomers. Many people using Fungus have never used Unity or even made a game before, so feel free to ask questions on our  community forum . Helping other people with their questions is a fantastic and very welcome way to contribute back to the community.", 
            "title": "Community"
        }, 
        {
            "location": "/about/index.html#features", 
            "text": "Fungus allows you to easily add storytelling features to your Unity games with no coding, via an intuitive visual scripting system.   Suitable for making visual novels, RPGs, hidden object, puzzle and interactive fiction games.  Flowchart-based character dialogue  Internationalization of your character dialogue.  Easy control of sprites, camera and audio to help tell your story  Works for both 2D and 3D Unity games  Integrates easily with other Unity code and simple to extend.  Powerful Lua scripting support for more experienced users  100% free and open source", 
            "title": "Features"
        }, 
        {
            "location": "/about/index.html#contribute", 
            "text": "We welcome all sorts of contributions to Fungus. You can report bugs, suggest new features, contribute source code, write an article, help answer questions on the forums or even just tell your friends about the project!   Issue Tracker:  GitHub issue tracker  Source Code:  GitHub code repository", 
            "title": "Contribute"
        }, 
        {
            "location": "/about/index.html#credits", 
            "text": "Chris Gregan  is the main author and maintainer of Fungus. He's co-founder of  Snozbot , along with  John O' Kane  and  Ronan Pearce .   Dr. Matt Smith  has kindly contributed the written documentation for the Fungus project. If you're new to Unity development then a great source of information, ideas and sample projects is his  Unity 5.x Cookbook , by Matt and  Chico Queiroz .  Paul Mc Grath  is Animator / Designer / Film-maker at Whackala. He contributed the  tutorial videos  for this site as well as creating the  Fungus Training Course .  Special thanks also to  Vicky Lee  and  Coding Grace  who have helped us to organise loads of Fungus workshops,  Fungus wouldn't be possible without all the awesome people in our community who have contributed to the project and supported us in myriad ways. Thank you all!", 
            "title": "Credits"
        }, 
        {
            "location": "/about/index.html#license", 
            "text": "The Fungus software is licensed under the  Open Source MIT License . \nThe Fungus documentation is licensed under the  Creative Commons Attribution-NonCommercial License .", 
            "title": "License"
        }, 
        {
            "location": "/download/index.html", 
            "text": "This page desribes how to download and install Unity and Fungus.\n\n\nVideo Tutorial\n\n\n\n\n\nHow do I install Fungus?\n\n\n\n\nInstall the latest version of \nUnity\n.\n\n\nLaunch Unity and create a new Project by selecting File \n New Project.\n\n\nSelect 'Use Defaults for 2D' when creating the new project.\n\n\n\n\nTo install Fungus from the Asset Store (recommended):\n\n\n\n\nOpen the Asset Store window in Unity\n\n\nSearch for Fungus, or use \nthis link\n\n\nDownload and import Fungus to your project using the Asset Store window.\n\n\n\n\nTo install Fungus from the latest release on Github:\n\n\n\n\nDownload the latest Fungus .unitypackage from \nGithub\n\n\nImport Fungus into the new project by selecting Assets \n Import Package \n Custom Package.\n\n\n\n\nFirst steps:\n\n\n\n\nDisplay the Flowchart editor window by selecting Window \n Tools \n Fungus \n Flowchart Window.\n\n\nFor convenience, you should dock the Flowchart window somewhere in the editor window.\n\n\nIn the project window, open The Hunter example scene (FungusExamples \n TheHunter \n TheHunter.unity). \n\n\nPress play and click through the example game.\n\n\n\n\nTry playing the other example scenes and watch how the gameplay is controlled by the flowchart in the Fungus Script window.\n\n\nHow do I upgrade an existing Fungus project ?\n\n\nTo upgrade an existing project to the latest version of Fungus.\n\n\n\n\nTake a backup of your project. No really, do it!\n\n\nWe recommend updating to the latest version of \nUnity\n.\n\n\nDelete the Fungus and FungusExamples folders from your project.\n\n\nDownload and import the latest version of Fungus.\n\n\n\n\nWe try to maintain backwards compatibility between releases but sometimes breaking changes are necessary. If you're having trouble upgrading your project just ask for assistance on the forum.\n\n\nFungus System Requirements\n\n\n\n\nWe recommend installing the latest version of Unity 3D.\n\n\nFungus requires at least Unity 5.0 and is not compatible with Unity 4.x or earlier.\n\n\nFungus works with both the PC \n Mac versions of Unity\n\n\nFungus works with both the free Personal and Professional editions of Unity\n\n\nOfficial Unity list of system requirements \navailable here\n.", 
            "title": "Installation"
        }, 
        {
            "location": "/download/index.html#video-tutorial", 
            "text": "", 
            "title": "Video Tutorial"
        }, 
        {
            "location": "/download/index.html#how-do-i-install-fungus", 
            "text": "Install the latest version of  Unity .  Launch Unity and create a new Project by selecting File   New Project.  Select 'Use Defaults for 2D' when creating the new project.   To install Fungus from the Asset Store (recommended):   Open the Asset Store window in Unity  Search for Fungus, or use  this link  Download and import Fungus to your project using the Asset Store window.   To install Fungus from the latest release on Github:   Download the latest Fungus .unitypackage from  Github  Import Fungus into the new project by selecting Assets   Import Package   Custom Package.   First steps:   Display the Flowchart editor window by selecting Window   Tools   Fungus   Flowchart Window.  For convenience, you should dock the Flowchart window somewhere in the editor window.  In the project window, open The Hunter example scene (FungusExamples   TheHunter   TheHunter.unity).   Press play and click through the example game.   Try playing the other example scenes and watch how the gameplay is controlled by the flowchart in the Fungus Script window.", 
            "title": "How do I install Fungus?"
        }, 
        {
            "location": "/download/index.html#how-do-i-upgrade-an-existing-fungus-project", 
            "text": "To upgrade an existing project to the latest version of Fungus.   Take a backup of your project. No really, do it!  We recommend updating to the latest version of  Unity .  Delete the Fungus and FungusExamples folders from your project.  Download and import the latest version of Fungus.   We try to maintain backwards compatibility between releases but sometimes breaking changes are necessary. If you're having trouble upgrading your project just ask for assistance on the forum.", 
            "title": "How do I upgrade an existing Fungus project ?"
        }, 
        {
            "location": "/download/index.html#fungus-system-requirements", 
            "text": "We recommend installing the latest version of Unity 3D.  Fungus requires at least Unity 5.0 and is not compatible with Unity 4.x or earlier.  Fungus works with both the PC   Mac versions of Unity  Fungus works with both the free Personal and Professional editions of Unity  Official Unity list of system requirements  available here .", 
            "title": "Fungus System Requirements"
        }, 
        {
            "location": "/getting_started/index.html", 
            "text": "Getting Started\n\n\nFollow these steps to get up and running with Fungus quickly, then learn more about what Fungus can do and how to do it from the other documentation pages and videos.\n\n\n\n\n\nOpening and docking the Flowchart window\n\n\nYou'll need the Fungus Flowchart window when working with Fungus. Open and dock this window somewhere handy by following these steps:\n\n\n\n\n\n\nChoose menu: \nTools | Fungus | Flowchart Window\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDrag-and-drop the Flowchart window to the location you wish to dock it:\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Flowchart window is now docked and part of your Unity window layout:\n\n\n\n\n\n\n\n\n\n\n\n\nFinding the example folders and scene files\n\n\nTwo folders are created when you install Fungus, the Fungus features themslves (in folder 'Fungus') and a set of examples (in folder 'FungusExamples').\n\n\nExamples include Drag and Drop, Sherlock and Fungus Town:\n\n\n\n\n\n\n\nYou can use the left-hand side of the Unity Project window to explore each example folder:\n\n\n\n\n\n\n\nAlternatively, you can 'filter' the Project view to show all scenes (and no other files) by clicking the scene filter icon to the right of the search bar:\n\n\n\n\n\n\n\nYou can cancel the filter by clicking the 'x' in the search bar:\n\n\n\n\n\n\n\n\n\n\nLoading and playing the example scenes\n\n\nTo \nload\n an example scene, double click the desired example's scene object in the Project window, and the scene should load. For example, this screenshot shows the scene and Flowchart windows when the DragAndDrop example scene has been loaded:\n\n\n\n\n\n\n\nTo \nrun\n the currently loaded scene (i.e. to enter \nPlay-mode\n), click the Unity 'play' triangle button at the center top of the Unity application window, and then do whatever makes sense in that scene (e..g click/type text/drag-and-drop objects etc.!):\n\n\n\n\n\n\n\nNote: you click the 'play' button a second time to end \nPlay-mode\n.\n\n\n\n\n\nChanges made during playmode don't persist\n\n\nAs with all Unity projects, you can \nchange\n the properties of gameObjects while a scene is running, but these changes are 'ephemeral' - they only last while the scene is running. As soon as you end play mode the properties of all objects in the Hierarchy will revert to those saved in the Scene file.\n\n\nThis makes it easy to 'tweak' values of objects in \nPlay-mode\n, and then when the desired behaviour is achieved, those values can be set for the saved scene properties.\n\n\nValues set when Unity is in \nEdit-mode\n will be saved when you saved your scene (\nCTRL-S\n / \nCommand-S\n, or menu: \nFile | Save Scene\n).\n\n\n\n\n\nChange your preferences to highlight Play-mode\n\n\nSometimes we can forget we are in Unity \nPlay-mode\n, and then make changes to Hierarchy gameObject values that are then 'fogotton' when we do stop playing the scene. A good way to avoid this problem is to to set a 'tint' to the Unity editor to make it visually very clear to us when we are in \nPlay-mode\n. To add a tint to \nPlay-mode\n do the following:\n\n\n\n\n\n\nOpen the Unity preferences dialog by choosing menu: \nFile | Preferences ...\n\n\n\n\n\n\nSelect the \nColors\n preferences, and choose a light colored tint (we chose a light green in this case):\n\n\n\n\n\n\n\n\n\n\n\n\n\nClose the dialog (changes are saved automatically).\n\n\n\n\n\n\nWhen you next enter \nPlay-mode\n you'll see most of the Unity Editor windows turn green (apart from the Game and Flowchart windows):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreating, naming and saving a new scene from scratch\n\n\nTo create a new scene in Unity do the following:\n\n\n\n\n\n\nChoose menu: \nFile | New Scene\n\n\n\n\n\n\nNote: if you have any unsaved changes for the current scene you need to either save or abandon them before a new scene can be created.\n\n\n\n\n\n\nYou should now have a shiny new scene, with a Hierarchy containing just one gameObject, a Main Camera. The new scene will have been give the default name \"Untitled\", which you can see in the title of the Application window:\n\n\n\n\n\n\n\n\n\n\n\n\n\nGood practice is to save your scene (in the right place, with the right name), before creating your work in the scene. Let's save this scene in the root of our project \"Assets\" folder, naming it \"demo1\". First choose menu: \nFile | Save Scene As...\n\n\n\n\n\n\nChoose the location and name (we'll choose folders \"Assets\" and scene name \"demo1\"):\n\n\n\n\n\n\n\n\n\n\n\n\n\nOnce you have successfully saved the scene you should now see the new scene file \"demo1\" in your Assets folder in the Project window, and you should also see in the Application window title that you are currently editing the scene named \"demo1\":\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMenu: Tools | Fungus\n\n\nThe core Fungus operations are available from the Unity \nTools\n menu.\n\n\nChoose menu: \nTools | Fungus\n to see the options available:\n\n\n\n\n\n\n\nAs can be seen, there are 2 submenus, \nCreate\n and \nUtilities\n, plus the \nFlowchart Window\n action (which reveals the window if already open, or opens a new window if the Flowchart window was not previously opened).\n\n\n\n\n\nMenu: Tools | Fungus | Create\n\n\nThe Fungus Tools \nCreate\n submenu offers the following actions:\n\n\n\n\n\n\n\n\n\n\nMenu: Tools |  Fungus | Utilities\n\n\nThe Fungus Tools \nUtilties\n submenu offers the following actions:\n\n\n\n\n\n\n\n\n\n\nCreate a Flowchart\n\n\nTo create a Fungus Flowchart do the following:\n\n\n\n\n\n\nChoose menu: \nTools | Fungus | Create Flowchart\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA new \nFlowchart\n gameObject should appear in the Hierarchy window.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \nFlowchart\n gameObject in the Hierarchy window, and you'll see the \nFlowchart's\n properties in the Inspector Window:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you have not already displayed the Flowchart Window, you can do so by clicking the Flowchart Window button in the Inspector.\n\n\n\n\n\n\nAs you can see, when a new Flowchat is created a single command Block named \"New Block\" is automatically created, with the Event handler \"Game Started\" (so it will start executing Fungus commands as soon as the scene goes into \nPlay Mode\n).\n\n\n\n\n\n\n\n\n\nFlowchart Block property viewing and editing\n\n\nLet's change the name of the default command Block of a new Flowchart in the Flowchart window to \"hello\". Do the following:\n\n\n\n\n\n\nCreate a new Fungus Flowchart (if you haven't already done so).\n\n\n\n\n\n\nClick to select the Block in the Flowchart window (when multiple blocks are present, the selected one gets a green highlight border).\n\n\n\n\n\n\nIn the Inspector change the text for the Block Name property to \"hello\". You should see the Block name change in the Flowchart window:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a Say command\n\n\nTo add a \"Say\" command to a Block do the following:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene.\n\n\n\n\n\n\nEnsure the Block is selected, and you can see its properties in the Inspector, and ensure the name of the Block is \"hello\".\n\n\n\n\n\n\nClick the Plus button in the bottom half of the Inspector window, to add a new Command to the Block's properties:\n\n\n\n\n\n\n\n\n\n\n\n\n\nChoose menu: \nNarrative | Say\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nSince this Block only has one Command, that command is automatically selected (shown with a green highlight).\n\n\n\n\n\n\nIn the \"Story Text\" textbox in the bottom half of the Inspector window type in \"hello Fugus world\":\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun the scene, and see Fungus create a dialog window, and output the text contents of your Say command:", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting_started/index.html#getting-started", 
            "text": "Follow these steps to get up and running with Fungus quickly, then learn more about what Fungus can do and how to do it from the other documentation pages and videos.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting_started/index.html#opening-and-docking-the-flowchart-window", 
            "text": "You'll need the Fungus Flowchart window when working with Fungus. Open and dock this window somewhere handy by following these steps:    Choose menu:  Tools | Fungus | Flowchart Window        Drag-and-drop the Flowchart window to the location you wish to dock it:       The Flowchart window is now docked and part of your Unity window layout:", 
            "title": "Opening and docking the Flowchart window"
        }, 
        {
            "location": "/getting_started/index.html#finding-the-example-folders-and-scene-files", 
            "text": "Two folders are created when you install Fungus, the Fungus features themslves (in folder 'Fungus') and a set of examples (in folder 'FungusExamples').  Examples include Drag and Drop, Sherlock and Fungus Town:    You can use the left-hand side of the Unity Project window to explore each example folder:    Alternatively, you can 'filter' the Project view to show all scenes (and no other files) by clicking the scene filter icon to the right of the search bar:    You can cancel the filter by clicking the 'x' in the search bar:", 
            "title": "Finding the example folders and scene files"
        }, 
        {
            "location": "/getting_started/index.html#loading-and-playing-the-example-scenes", 
            "text": "To  load  an example scene, double click the desired example's scene object in the Project window, and the scene should load. For example, this screenshot shows the scene and Flowchart windows when the DragAndDrop example scene has been loaded:    To  run  the currently loaded scene (i.e. to enter  Play-mode ), click the Unity 'play' triangle button at the center top of the Unity application window, and then do whatever makes sense in that scene (e..g click/type text/drag-and-drop objects etc.!):    Note: you click the 'play' button a second time to end  Play-mode .", 
            "title": "Loading and playing the example scenes"
        }, 
        {
            "location": "/getting_started/index.html#changes-made-during-playmode-dont-persist", 
            "text": "As with all Unity projects, you can  change  the properties of gameObjects while a scene is running, but these changes are 'ephemeral' - they only last while the scene is running. As soon as you end play mode the properties of all objects in the Hierarchy will revert to those saved in the Scene file.  This makes it easy to 'tweak' values of objects in  Play-mode , and then when the desired behaviour is achieved, those values can be set for the saved scene properties.  Values set when Unity is in  Edit-mode  will be saved when you saved your scene ( CTRL-S  /  Command-S , or menu:  File | Save Scene ).", 
            "title": "Changes made during playmode don't persist"
        }, 
        {
            "location": "/getting_started/index.html#change-your-preferences-to-highlight-play-mode", 
            "text": "Sometimes we can forget we are in Unity  Play-mode , and then make changes to Hierarchy gameObject values that are then 'fogotton' when we do stop playing the scene. A good way to avoid this problem is to to set a 'tint' to the Unity editor to make it visually very clear to us when we are in  Play-mode . To add a tint to  Play-mode  do the following:    Open the Unity preferences dialog by choosing menu:  File | Preferences ...    Select the  Colors  preferences, and choose a light colored tint (we chose a light green in this case):       Close the dialog (changes are saved automatically).    When you next enter  Play-mode  you'll see most of the Unity Editor windows turn green (apart from the Game and Flowchart windows):", 
            "title": "Change your preferences to highlight Play-mode"
        }, 
        {
            "location": "/getting_started/index.html#creating-naming-and-saving-a-new-scene-from-scratch", 
            "text": "To create a new scene in Unity do the following:    Choose menu:  File | New Scene    Note: if you have any unsaved changes for the current scene you need to either save or abandon them before a new scene can be created.    You should now have a shiny new scene, with a Hierarchy containing just one gameObject, a Main Camera. The new scene will have been give the default name \"Untitled\", which you can see in the title of the Application window:       Good practice is to save your scene (in the right place, with the right name), before creating your work in the scene. Let's save this scene in the root of our project \"Assets\" folder, naming it \"demo1\". First choose menu:  File | Save Scene As...    Choose the location and name (we'll choose folders \"Assets\" and scene name \"demo1\"):       Once you have successfully saved the scene you should now see the new scene file \"demo1\" in your Assets folder in the Project window, and you should also see in the Application window title that you are currently editing the scene named \"demo1\":", 
            "title": "Creating, naming and saving a new scene from scratch"
        }, 
        {
            "location": "/getting_started/index.html#menu-tools-fungus", 
            "text": "The core Fungus operations are available from the Unity  Tools  menu.  Choose menu:  Tools | Fungus  to see the options available:    As can be seen, there are 2 submenus,  Create  and  Utilities , plus the  Flowchart Window  action (which reveals the window if already open, or opens a new window if the Flowchart window was not previously opened).", 
            "title": "Menu: Tools | Fungus"
        }, 
        {
            "location": "/getting_started/index.html#menu-tools-fungus-create", 
            "text": "The Fungus Tools  Create  submenu offers the following actions:", 
            "title": "Menu: Tools | Fungus | Create"
        }, 
        {
            "location": "/getting_started/index.html#menu-tools-fungus-utilities", 
            "text": "The Fungus Tools  Utilties  submenu offers the following actions:", 
            "title": "Menu: Tools |  Fungus | Utilities"
        }, 
        {
            "location": "/getting_started/index.html#create-a-flowchart", 
            "text": "To create a Fungus Flowchart do the following:    Choose menu:  Tools | Fungus | Create Flowchart        A new  Flowchart  gameObject should appear in the Hierarchy window.       Select the  Flowchart  gameObject in the Hierarchy window, and you'll see the  Flowchart's  properties in the Inspector Window:       If you have not already displayed the Flowchart Window, you can do so by clicking the Flowchart Window button in the Inspector.    As you can see, when a new Flowchat is created a single command Block named \"New Block\" is automatically created, with the Event handler \"Game Started\" (so it will start executing Fungus commands as soon as the scene goes into  Play Mode ).", 
            "title": "Create a Flowchart"
        }, 
        {
            "location": "/getting_started/index.html#flowchart-block-property-viewing-and-editing", 
            "text": "Let's change the name of the default command Block of a new Flowchart in the Flowchart window to \"hello\". Do the following:    Create a new Fungus Flowchart (if you haven't already done so).    Click to select the Block in the Flowchart window (when multiple blocks are present, the selected one gets a green highlight border).    In the Inspector change the text for the Block Name property to \"hello\". You should see the Block name change in the Flowchart window:", 
            "title": "Flowchart Block property viewing and editing"
        }, 
        {
            "location": "/getting_started/index.html#add-a-say-command", 
            "text": "To add a \"Say\" command to a Block do the following:    (setup) Create a new scene, add a Fungus Flowchart to the scene.    Ensure the Block is selected, and you can see its properties in the Inspector, and ensure the name of the Block is \"hello\".    Click the Plus button in the bottom half of the Inspector window, to add a new Command to the Block's properties:       Choose menu:  Narrative | Say :       Since this Block only has one Command, that command is automatically selected (shown with a green highlight).    In the \"Story Text\" textbox in the bottom half of the Inspector window type in \"hello Fugus world\":       Run the scene, and see Fungus create a dialog window, and output the text contents of your Say command:", 
            "title": "Add a Say command"
        }, 
        {
            "location": "/flowcharts/index.html", 
            "text": "Flowcharts\n\n\nA fundamental concept of Fungus is the \nFlowchart\n. Scenes can contain a single Flowchart or multiple Flowcharts.\n\n\n\n\n\nWhat is a Flowchart?\n\n\nA Fungus \nFlowchart\n contains the Blocks in which all your Fungus Commands are located. A Unity scene can contain multiple Flowcharts, and commands can be executing simultaneously in different Flowcharts. However, for many games it is sufficient for one Block in one Flowcart to be executing at any one time.\n\n\nHere is an example of a Fungus Flowchart:\n\n\n\n\n\n\n\n\n\n\nOpening and docking the Flowchart window\n\n\nYou'll need the Fungus Flowchart window when working with Fungus. Open and dock this window somewhere handy by following these steps:\n\n\n\n\n\n\nChoose menu: \nTools | Fungus | Flowchart Window\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDrag-and-drop the Flowchart window to the location you wish to dock it:\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Flowchart window is now docked and part of your Unity window layout:\n\n\n\n\n\n\n\n\n\n\n\n\nCreating a Flowchart\n\n\nTo create a Fungus Flowchart do the following:\n\n\n\n\n\n\nChoose menu: \nTools | Fungus | Create Flowchart\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA new \nFlowchart\n gameObject should appear in the Hierarchy window.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \nFlowchart\n gameObject in the Hierarchy window, and you'll see the \nFlowchart's\n properties in the Inspector Window:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you have not already displayed the Flowchart Window, you can do so by clicking the Flowchart Window button in the Inspector.\n\n\n\n\n\n\nAs you can see, when a new Flowchat is created a single command Block named \"New Block\" is automatically created, with the Event handler \"Game Started\" (so it will start executing Fungus commands as soon as the scene goes into \nPlay Mode\n).\n\n\n\n\n\n\n\n\n\nPanning the Flowchart window\n\n\nPanning means moving the contents of the Flowchart window as if they are on a piece of paper. Click and drag with the RIGHT mouse button to pan the contents of the Flowchart window.\n\n\n\n\n\n\n\n\n\n\n\nZooming the Flowchart window\n\n\nZooming refers to making the contents larger or smaller. To zoom the Flowchart window contents either click and drag the UI slider, or use the mouse wheel (or trackpad).", 
            "title": "Flowcharts"
        }, 
        {
            "location": "/flowcharts/index.html#flowcharts", 
            "text": "A fundamental concept of Fungus is the  Flowchart . Scenes can contain a single Flowchart or multiple Flowcharts.", 
            "title": "Flowcharts"
        }, 
        {
            "location": "/flowcharts/index.html#what-is-a-flowchart", 
            "text": "A Fungus  Flowchart  contains the Blocks in which all your Fungus Commands are located. A Unity scene can contain multiple Flowcharts, and commands can be executing simultaneously in different Flowcharts. However, for many games it is sufficient for one Block in one Flowcart to be executing at any one time.  Here is an example of a Fungus Flowchart:", 
            "title": "What is a Flowchart?"
        }, 
        {
            "location": "/flowcharts/index.html#opening-and-docking-the-flowchart-window", 
            "text": "You'll need the Fungus Flowchart window when working with Fungus. Open and dock this window somewhere handy by following these steps:    Choose menu:  Tools | Fungus | Flowchart Window        Drag-and-drop the Flowchart window to the location you wish to dock it:       The Flowchart window is now docked and part of your Unity window layout:", 
            "title": "Opening and docking the Flowchart window"
        }, 
        {
            "location": "/flowcharts/index.html#creating-a-flowchart", 
            "text": "To create a Fungus Flowchart do the following:    Choose menu:  Tools | Fungus | Create Flowchart        A new  Flowchart  gameObject should appear in the Hierarchy window.       Select the  Flowchart  gameObject in the Hierarchy window, and you'll see the  Flowchart's  properties in the Inspector Window:       If you have not already displayed the Flowchart Window, you can do so by clicking the Flowchart Window button in the Inspector.    As you can see, when a new Flowchat is created a single command Block named \"New Block\" is automatically created, with the Event handler \"Game Started\" (so it will start executing Fungus commands as soon as the scene goes into  Play Mode ).", 
            "title": "Creating a Flowchart"
        }, 
        {
            "location": "/flowcharts/index.html#panning-the-flowchart-window", 
            "text": "Panning means moving the contents of the Flowchart window as if they are on a piece of paper. Click and drag with the RIGHT mouse button to pan the contents of the Flowchart window.", 
            "title": "Panning the Flowchart window"
        }, 
        {
            "location": "/flowcharts/index.html#zooming-the-flowchart-window", 
            "text": "Zooming refers to making the contents larger or smaller. To zoom the Flowchart window contents either click and drag the UI slider, or use the mouse wheel (or trackpad).", 
            "title": "Zooming the Flowchart window"
        }, 
        {
            "location": "/blocks/index.html", 
            "text": "Blocks\n\n\nA fundamental concept of Fungus is the \nBlock\n. Blocks contain your Fungus Commands, and reside inside Flowcharts.\n\n\n\n\n\nBlocks (and how to inspect Block properties)\n\n\nBlocks are found inside Flowcharts. Blocks are where your Fungus Commands are stored. Each Block can contain 1 or more Fungus Commands:\n\n\nTo inspect the properties of a Block do the following:\n\n\n\n\n\n\n(setup) Create a Fungus Flowchart.\n\n\n\n\n\n\nClick to select the default Block in the new Flowchart. You should see the Block's properties displayed in the Inspector window:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetting Block name and description\n\n\nWhen working with more than one Block, its important to name each Block in a meaningful way. To rename a Block do the following:\n\n\n\n\n\n\n(setup) Create a Fungus Flowchart.\n\n\n\n\n\n\nClick to select the default Block in the new Flowchart. The selected block has a green outline.\n\n\n\n\n\n\nYou should see the Block's properties displayed in the Inspector window:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the Inspector change the text for the Block Name property to \"Say Hello\".\n\n\n\n\n\n\nYou should now see the Block has been renamed in the Flowchart window:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow add a detailed description about the Block in the Description property in the Inspector window:\n\n\n\n\n\n\n\n\n\n\n\n\nCreating a block\n\n\nTo create a new Block do the following:\n\n\n\n\n\n\n(setup) Create a Fungus Flowchart (or be viewing the Flowchart for your current project).\n\n\n\n\n\n\nClick the Add New Block button (the plus-sign \"+\") in the top-left of the Fungus Flowchart window:\n\n\n\n\n\n\n\n\n\n\n\n\n\nA new Block should have been added to your Flowchart (with the default name \"New Block\", or \"New Block1/2/3 etc.\" so each name is unique)\n\n\n\n\n\n\n\n\n\nNote - a good time to choose a meaningful name a Block is immediately after creating a new Block ...\n\n\n\n\n\nDelete a Block\n\n\nTo delete a Block from the current Flowchart, do the following:\n\n\n\n\n\n\n(setup) Create a Fungus Flowchart (or be viewing the Flowchart for your current project).\n\n\n\n\n\n\nRight-mouse-click over the Block you wish to delete, and choose menu: \nDelete\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Block should now have been removed from the Flowchart:\n\n\n\n\n\n\n\n\n\n\n\n\nDuplicate a Block\n\n\nTo duplicate (clone / make an exact copy of) a Block from the current Flowchart, do the following:\n\n\n\n\n\n\n(setup) Create a Fungus Flowchart (or be viewing the Flowchart for your current project).\n\n\n\n\n\n\nRight-mouse-click over the Block you wish to duplicate, and choose menu: \nDuplicate\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nA copy of the Block should now have been added to the Flowchart (with \"(copy)\" appended the name of the duplicate):\n\n\n\n\n\n\n\n\n\nNote - a good time to choose a meaningful name a Block is immediately after duplicating one ...\n\n\n\n\n\nMoving blocks\n\n\nTo move / rearrange Blocks in the Flowchart window do the following:\n\n\n\n\n\n\n(setup) Create a Fungus Flowchart (or be viewing the Flowchart for your current project).\n\n\n\n\n\n\nMove a Block by clicking-and-dragging with the left mouse button:\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you release the mouse button the Block will remain where it was dragged:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe 3 types of Block (Event Block, Branching Block, Standard Block)\n\n\nFungus Flowcharts visually differentiate three differents kinds of Block behavior:\n\n\n\n\n\n\nEvent Block - blue rounded rectangle (Block execution triggered by an event)\n\n\n\n\n\n\nBranching Block - orange polygon (passes control to 2 or more other Blocks, and not and Event Block)\n\n\n\n\n\n\nStandard Block - yellow rectangle (no event, passes control to 0 or 1 other blocks)\n\n\n\n\n\n\n1: Event Block - blue rounded rectangle\n\n\nOne way Fungus decides when to start executing the Commands inside a Block is if a Block has defined an Execute On Event. If a Block has any of the possible Execute On Events chosen (such as Game Started, Message Received, Sprite Drag Completed, Key Pressed etc.) then this Block will be displayed as a \nblue rounded rectangle\n:\n\n\n\n\nAs we can see, the default Block created with every new Flowchart automatically defines the Game Started Execute On Event, so this default Block always is displayed as an Event Block.\n\n\nNOTE: A Block with an Execute On Event will always appear as an Event Block in the Flowchart, regardless of whether its Commands contain menus or calls to 2 or more Blocks). In other words, in terms of Flowchart appearance, display of an Event Block overrides display of a Branching Block.\n\n\n2: Branching Block - orange polygon\n\n\nIf a Block is \nnot\n an Event Block, and its Commands include Calls and/or Menu commands to execute Commands in 2 or more other Blocks, then in the Flowchart window this Block will be displayed as a Branching Block, visually appearing as an \norange polygon\n.\n\n\n\n\n3: Standard Block - yellow rectangle\n\n\nIf a Block is \nneither\n an Event Block \nnor\n a Command Block, then it is a Standard Block, and will be displayed as an \nyellow rectangle\n.\n\n\n\n\n\n\n\nConnections between Blocks: Flow of Execution\n\n\nA whole scene's logic can rarely fit all into a single Block, therefore we need ways for one Block to pass execution control to other Blocks. There are several ways to do this, the most common being:\n\n\n\n\n\n\nthe Call Command\n\n\n\n\n\n\nthe Menu Command\n\n\n\n\n\n\n\n\n\nExecuting Commands in another Block with the Call Command\n\n\nThe Call Command tells Fungus to go and start executing the Commands in named Block. There are several ways to do this, we can tell Fungus to Stop execution completely in the current Block, and just pass control to named Block. We can also tell Fungus to go and completed all Commands in the named Block, and when they are finished, to then continue executing any remaining commands in the current Block. Finally, and perhaps the most complicated/sophisticated technique, we can tell Fungus to both started executing Commands in a named Block WHILE simultaneously continuing to execute remaining Commands in the current Block.\n\n\nTo pass control to another Block, and stop executing Commands in the current Block, do the following:\n\n\n\n\n\n\n(setup) If you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename this Block \"Start\".\n\n\n\n\n\n\nAdd to Block \"Start\" a Say Command with the Story Text \"I am in Start\".\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a new Block to your Flowchart named \"Block2\".\n\n\n\n\n\n\nAdd to Block \"Block2\" a Say Command with the Story Text \"I am in Block2\".\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd to Block \"Block2\" a Call Command, by choosing menu: \nFlow | Call\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith this Call Command Selected, in the Inspector choose Block2 from the list of Blocks for property \nTarget Block\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote: We will keep the default of \nTarget Flowchart\n (None), which means the current Flowchart.\n\n\n\n\n\n\nNote: We will keep the default of \nCall Mode\n Stop, which means that execution in the current Block (Start) will stop once execution of the called Block has begun.\n\n\n\n\n\n\nYou should now see an arrow in the Flowchart window, connecting Block \"Start\" with Block \"Block2\". This visually tells us (the game developer) that a Call or Menu Command is present inside Block \"Start\" that tells Fungus to execute commands in Block \"Block2\":\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExecuting Commands in another Block with Menu Commands\n\n\nLet's use a Say command above to ask a tricky mathematical question, and demonstrate the Menu command by offering the user a choice been \"correct' and \"incorrect\" answers.  Menu commands transfer control to another block - so we'll need to add 2 new blocks to correspond to the 2 answers.\nDo the following:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename the Block in the Flowchart to \"Question\".\n\n\n\n\n\n\nCreate a Say command, with \nStory Text\n to ask the question: \"Is 2 + 2?\".\n\n\n\n\n\n\nUncheck the \"Wait For Click\" checkbox (this is so we see the menu options immediately after the Say command has displayed the question):\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a new Block, named \"Correct\" which contains a \nSay\n command with the text \"Well done, you are very mathematical!\". Click the plus-sign button in the Flowchart window to add a new Block to the Flowchart, rename it \"Correct\" and then add that Say command:\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \"Question\" block, and add a Menu command by clicking the plus-sign add Command button in the Inspector and then choosing menu: \nNarrative | Menu\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith this new Menu command selected (green) in the top half of the Inspector window, set the \nText\n to \"Yes\" and the \nTarget Block\n to your new \"Correct\" block:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou should now see how the 'flow' of commands can change from Block \"hello\" to Block \"Correct\" in the Flowchart window:\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a second new Block named \"Wrong\", containing a Say command with text \"Bad luck, perhaps consider a non-mathematical career path...\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow we need to add another Menu command to our \"hello\" block, offering the user the \"No\" answer to our maths question, and passing control to Block \"Wrong\" if they disagree that 2 + 2 = 4. Select the \"hello\" block, and add a Menu command. With this new Menu command selected (green) in the top half of the Inspector window, set the \nText\n to \"No\" and the \nTarget Block\n to your new \"Wrong\" block.\n\n\n\n\n\n\nYou should now see in the Flowchart window how block \"hello\" can pass control to either block \"Correct\" or Block \"Wrong\" - depending on which menu answer the user selects.\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun the scene, and you should see the Say question appear at the bottom of the screen, and also the two Menu buttons \"Yes\" and \"No\" in the middle of the screen. Clicking \"Yes\" then runs the \"Correct\" Block's commands, and clicking \"No\" runs the \"Wrong\" block's commands:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHighlighting connection between blocks by selecting command\n\n\nIn the Inspector window, if you select a Call or Menu Command (executing Commands in another Block in \nthe same Flowchart\n), then you'll see the arrow between the 2 Blocks highlighted in GREEN:\n\n\n\n\n\n\n\nSetting a Block event handler\n\n\nEvents are one way to declare when you want execution of the Commands in a Block to begin. Typical events include:\n\n\n\n\nGame Started\n\n\nFlowchart enabled\n\n\nMessage Received\n\n\nKey Pressed (Up / Down / Repeat)\n\n\nSprite clicking / drag-dropping interactions\n\n\n\n\nThe most common Event used to define when a Block should start execution is, of course, the \nGame Started\n event. Each new Flowchart automatically starts with a single empty Block that is defined to begin execution when the game starts:\n\n\n\n\nTo change the Event defined for a Block, or to assign an event for a Block that had None, do the following:\n\n\n\n\n\n\nSelect the Block in the Flowchart window.\n\n\n\n\n\n\nIn the Inspector window, for property \nExecute On Event\n choose from the popup menu the desired Event:", 
            "title": "Blocks"
        }, 
        {
            "location": "/blocks/index.html#blocks", 
            "text": "A fundamental concept of Fungus is the  Block . Blocks contain your Fungus Commands, and reside inside Flowcharts.", 
            "title": "Blocks"
        }, 
        {
            "location": "/blocks/index.html#blocks-and-how-to-inspect-block-properties", 
            "text": "Blocks are found inside Flowcharts. Blocks are where your Fungus Commands are stored. Each Block can contain 1 or more Fungus Commands: \nTo inspect the properties of a Block do the following:    (setup) Create a Fungus Flowchart.    Click to select the default Block in the new Flowchart. You should see the Block's properties displayed in the Inspector window:", 
            "title": "Blocks (and how to inspect Block properties)"
        }, 
        {
            "location": "/blocks/index.html#setting-block-name-and-description", 
            "text": "When working with more than one Block, its important to name each Block in a meaningful way. To rename a Block do the following:    (setup) Create a Fungus Flowchart.    Click to select the default Block in the new Flowchart. The selected block has a green outline.    You should see the Block's properties displayed in the Inspector window:       In the Inspector change the text for the Block Name property to \"Say Hello\".    You should now see the Block has been renamed in the Flowchart window:       Now add a detailed description about the Block in the Description property in the Inspector window:", 
            "title": "Setting Block name and description"
        }, 
        {
            "location": "/blocks/index.html#creating-a-block", 
            "text": "To create a new Block do the following:    (setup) Create a Fungus Flowchart (or be viewing the Flowchart for your current project).    Click the Add New Block button (the plus-sign \"+\") in the top-left of the Fungus Flowchart window:       A new Block should have been added to your Flowchart (with the default name \"New Block\", or \"New Block1/2/3 etc.\" so each name is unique)     Note - a good time to choose a meaningful name a Block is immediately after creating a new Block ...", 
            "title": "Creating a block"
        }, 
        {
            "location": "/blocks/index.html#delete-a-block", 
            "text": "To delete a Block from the current Flowchart, do the following:    (setup) Create a Fungus Flowchart (or be viewing the Flowchart for your current project).    Right-mouse-click over the Block you wish to delete, and choose menu:  Delete :       The Block should now have been removed from the Flowchart:", 
            "title": "Delete a Block"
        }, 
        {
            "location": "/blocks/index.html#duplicate-a-block", 
            "text": "To duplicate (clone / make an exact copy of) a Block from the current Flowchart, do the following:    (setup) Create a Fungus Flowchart (or be viewing the Flowchart for your current project).    Right-mouse-click over the Block you wish to duplicate, and choose menu:  Duplicate :       A copy of the Block should now have been added to the Flowchart (with \"(copy)\" appended the name of the duplicate):     Note - a good time to choose a meaningful name a Block is immediately after duplicating one ...", 
            "title": "Duplicate a Block"
        }, 
        {
            "location": "/blocks/index.html#moving-blocks", 
            "text": "To move / rearrange Blocks in the Flowchart window do the following:    (setup) Create a Fungus Flowchart (or be viewing the Flowchart for your current project).    Move a Block by clicking-and-dragging with the left mouse button:       When you release the mouse button the Block will remain where it was dragged:", 
            "title": "Moving blocks"
        }, 
        {
            "location": "/blocks/index.html#the-3-types-of-block-event-block-branching-block-standard-block", 
            "text": "Fungus Flowcharts visually differentiate three differents kinds of Block behavior:    Event Block - blue rounded rectangle (Block execution triggered by an event)    Branching Block - orange polygon (passes control to 2 or more other Blocks, and not and Event Block)    Standard Block - yellow rectangle (no event, passes control to 0 or 1 other blocks)", 
            "title": "The 3 types of Block (Event Block, Branching Block, Standard Block)"
        }, 
        {
            "location": "/blocks/index.html#1-event-block-blue-rounded-rectangle", 
            "text": "One way Fungus decides when to start executing the Commands inside a Block is if a Block has defined an Execute On Event. If a Block has any of the possible Execute On Events chosen (such as Game Started, Message Received, Sprite Drag Completed, Key Pressed etc.) then this Block will be displayed as a  blue rounded rectangle :   As we can see, the default Block created with every new Flowchart automatically defines the Game Started Execute On Event, so this default Block always is displayed as an Event Block.  NOTE: A Block with an Execute On Event will always appear as an Event Block in the Flowchart, regardless of whether its Commands contain menus or calls to 2 or more Blocks). In other words, in terms of Flowchart appearance, display of an Event Block overrides display of a Branching Block.", 
            "title": "1: Event Block - blue rounded rectangle"
        }, 
        {
            "location": "/blocks/index.html#2-branching-block-orange-polygon", 
            "text": "If a Block is  not  an Event Block, and its Commands include Calls and/or Menu commands to execute Commands in 2 or more other Blocks, then in the Flowchart window this Block will be displayed as a Branching Block, visually appearing as an  orange polygon .", 
            "title": "2: Branching Block - orange polygon"
        }, 
        {
            "location": "/blocks/index.html#3-standard-block-yellow-rectangle", 
            "text": "If a Block is  neither  an Event Block  nor  a Command Block, then it is a Standard Block, and will be displayed as an  yellow rectangle .", 
            "title": "3: Standard Block - yellow rectangle"
        }, 
        {
            "location": "/blocks/index.html#connections-between-blocks-flow-of-execution", 
            "text": "A whole scene's logic can rarely fit all into a single Block, therefore we need ways for one Block to pass execution control to other Blocks. There are several ways to do this, the most common being:    the Call Command    the Menu Command", 
            "title": "Connections between Blocks: Flow of Execution"
        }, 
        {
            "location": "/blocks/index.html#executing-commands-in-another-block-with-the-call-command", 
            "text": "The Call Command tells Fungus to go and start executing the Commands in named Block. There are several ways to do this, we can tell Fungus to Stop execution completely in the current Block, and just pass control to named Block. We can also tell Fungus to go and completed all Commands in the named Block, and when they are finished, to then continue executing any remaining commands in the current Block. Finally, and perhaps the most complicated/sophisticated technique, we can tell Fungus to both started executing Commands in a named Block WHILE simultaneously continuing to execute remaining Commands in the current Block.  To pass control to another Block, and stop executing Commands in the current Block, do the following:    (setup) If you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename this Block \"Start\".    Add to Block \"Start\" a Say Command with the Story Text \"I am in Start\".       Add a new Block to your Flowchart named \"Block2\".    Add to Block \"Block2\" a Say Command with the Story Text \"I am in Block2\".       Add to Block \"Block2\" a Call Command, by choosing menu:  Flow | Call :       With this Call Command Selected, in the Inspector choose Block2 from the list of Blocks for property  Target Block :       Note: We will keep the default of  Target Flowchart  (None), which means the current Flowchart.    Note: We will keep the default of  Call Mode  Stop, which means that execution in the current Block (Start) will stop once execution of the called Block has begun.    You should now see an arrow in the Flowchart window, connecting Block \"Start\" with Block \"Block2\". This visually tells us (the game developer) that a Call or Menu Command is present inside Block \"Start\" that tells Fungus to execute commands in Block \"Block2\":", 
            "title": "Executing Commands in another Block with the Call Command"
        }, 
        {
            "location": "/blocks/index.html#executing-commands-in-another-block-with-menu-commands", 
            "text": "Let's use a Say command above to ask a tricky mathematical question, and demonstrate the Menu command by offering the user a choice been \"correct' and \"incorrect\" answers.  Menu commands transfer control to another block - so we'll need to add 2 new blocks to correspond to the 2 answers.\nDo the following:    (setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename the Block in the Flowchart to \"Question\".    Create a Say command, with  Story Text  to ask the question: \"Is 2 + 2?\".    Uncheck the \"Wait For Click\" checkbox (this is so we see the menu options immediately after the Say command has displayed the question):       Create a new Block, named \"Correct\" which contains a  Say  command with the text \"Well done, you are very mathematical!\". Click the plus-sign button in the Flowchart window to add a new Block to the Flowchart, rename it \"Correct\" and then add that Say command:       Select the \"Question\" block, and add a Menu command by clicking the plus-sign add Command button in the Inspector and then choosing menu:  Narrative | Menu .       With this new Menu command selected (green) in the top half of the Inspector window, set the  Text  to \"Yes\" and the  Target Block  to your new \"Correct\" block:       You should now see how the 'flow' of commands can change from Block \"hello\" to Block \"Correct\" in the Flowchart window:       Add a second new Block named \"Wrong\", containing a Say command with text \"Bad luck, perhaps consider a non-mathematical career path...\"       Now we need to add another Menu command to our \"hello\" block, offering the user the \"No\" answer to our maths question, and passing control to Block \"Wrong\" if they disagree that 2 + 2 = 4. Select the \"hello\" block, and add a Menu command. With this new Menu command selected (green) in the top half of the Inspector window, set the  Text  to \"No\" and the  Target Block  to your new \"Wrong\" block.    You should now see in the Flowchart window how block \"hello\" can pass control to either block \"Correct\" or Block \"Wrong\" - depending on which menu answer the user selects.       Run the scene, and you should see the Say question appear at the bottom of the screen, and also the two Menu buttons \"Yes\" and \"No\" in the middle of the screen. Clicking \"Yes\" then runs the \"Correct\" Block's commands, and clicking \"No\" runs the \"Wrong\" block's commands:", 
            "title": "Executing Commands in another Block with Menu Commands"
        }, 
        {
            "location": "/blocks/index.html#highlighting-connection-between-blocks-by-selecting-command", 
            "text": "In the Inspector window, if you select a Call or Menu Command (executing Commands in another Block in  the same Flowchart ), then you'll see the arrow between the 2 Blocks highlighted in GREEN:", 
            "title": "Highlighting connection between blocks by selecting command"
        }, 
        {
            "location": "/blocks/index.html#setting-a-block-event-handler", 
            "text": "Events are one way to declare when you want execution of the Commands in a Block to begin. Typical events include:   Game Started  Flowchart enabled  Message Received  Key Pressed (Up / Down / Repeat)  Sprite clicking / drag-dropping interactions   The most common Event used to define when a Block should start execution is, of course, the  Game Started  event. Each new Flowchart automatically starts with a single empty Block that is defined to begin execution when the game starts:   To change the Event defined for a Block, or to assign an event for a Block that had None, do the following:    Select the Block in the Flowchart window.    In the Inspector window, for property  Execute On Event  choose from the popup menu the desired Event:", 
            "title": "Setting a Block event handler"
        }, 
        {
            "location": "/telling_a_story/index.html", 
            "text": "Telling a story\n\n\nHaving got up and running, here are some next steps to get you familiar with the storytelling features in Fungus.\n\n\n\n\n\nAdding Characters, for use in Say commands\n\n\nWe can associated words spoken by the Say Command with a particular Character. Consider the following Tom and Jerry scene:\n\n\n[Tom] Where is that mouse?\n[Jerry] Where is that cat?\n[Tom] Aha...\n[Jerry] Arrrrggggggg!!!!!!!\n\n\n\n\nTo implement the above in Fungus we need to create and name two Characters. Do the following:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename the Flowchart Block \"cat and mouse\".\n\n\n\n\n\n\nChoose menu:\n\nTools | Fungus | Create | Character\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou should now see a new gameObject \"Character\" in the Hierarchy window, named Character.\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnsure gameObject \"Character\" is selected, and edit its properties in the Inspector. Rename the gameObject to \"Character1 - Tom\", then in its Character (Script) component set the Name Text to \"Tom\" and the Name Color to red:\n\n\n\n\n\n\n\n\n\n\n\n\n\nRepeat the previous two steps to create a second character \"Character2 - Jerry\", then in its Character (Script) component set the Name Text to \"Jerry\" and the Name Color to blue:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow we have our two character gameObjects, we can assign them to any Say commands as appropriate.\n\n\n\n\n\n\nCreate a Say Command for Tom, with text \"Where is that mouse?\", setting the Character of this Say command to \"Character1 - Tom\":\n\n\n\n\n\n\n\n\n\n\n\n\n\nRepeat the above step for the 3 remaining statements, for:\n\n\n\n\nJerry \"Where is that cat?\"\n\n\nTom \"Aha...\"\n\n\nJerry \"Arrrrggggggg!!!!!!!\"\n\nAssigning the appropriate Character for each Say Command from the menu of Character gameObjects in the Hiearchy.\n\n\n\n\n\n\n\n\nYou should now have a sequence of 4 Say commands in your Block:\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you run the scene you should see a sequence of statements, clearly showing who is saying what - both the character name is given, and also that name is coloured according to the properties we set for the character gameObjects (red for Tom, and blue for Jerry):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nListing portrait image(s) for use by Characters\n\n\nIf you add one or more portrait images to a character, then each Say command for that character can define which of those portrait images should be displayed, alongside the (colored) name of the Character.\n\n\nTo add portrait images to a character do the following:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename the Flowchart Block \"The case of the missing violin\".\n\n\n\n\n\n\nCreate a character, and in the Inspector give your character Name Text (we chose \"Sherlock\") and a name color.\n\n\n\n\n\n\nNow in the Inspector click the Add Portrait button (the plus-sign \"+\"), to get a 'slot' into which to add a portrait image:\n\n\n\n\n\n\n\n\n\n\n\n\n\nDrag the appropriate image into your new portrait image slot (in this screenshot we used the 'condident' image from the Sherlock example project). Also set the direction that the image is facing (left / front / right):\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a second character (e.g. John, using Name Color blue, and portrait image 'annoyed').\n\n\n\n\n\n\nNow select your Block in the Fungus Flowchart, so you can add some Commands to be executed...\n\n\n\n\n\n\nCreate a Say command, for your Sherlock Character, saying \"Watson, have you seen my violin?\" and choosing portrait 'confident' (since this is the only we added to the Character):\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a second Say command, this time for Character John, saying \"No, why don't you find it yourself using your amazing powers of deduction...\" and choosing the 'annoyed' portrait for John.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you run the scene you should see a sequence of statements, clearly showing who is saying both with (colored) name text AND also the portrait image you selected for each Say command:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs you can see in some of the Fungus Example projects, many games will have a wide range of different portrait images for each character, to allow a full range of visual expression of emotion to support the text of Say commands:\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a Stage\n\n\nPortrait images can be used in two ways in Fungus.\n\n\n\n\nThey can be shown as part of the \nSay\n commands in the Say Dialog.\n\n\nAlternatively Portraits can be displayed and moved around the screen inside Fungus \nStages\n, using the Portrait Command.\n\n\n\n\nCreate a simple stage that covers the whole game Window as follows:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename the Flowchart Block \"stage demo\".\n\n\n\n\n\n\nCreate a Fungus Stage gameObject in the scene by choosing menu:\n\nTools | Fungus | Create | Stage\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou should now see a new gameObject \"Stage\" added to the scene Hierarchy.\n\n\n\n\n\n\nIf you select it you will see its properties in the Inspector. We can leave the default settings, since these are for the stage to cover the whole Game window. There are some child gameObjects inside the Stage, but you don't need to worry about these unless you are doing some advanced customisation of stages for a particular game effect.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow you have added a Fungus Stage to your scene, you will be able to make large Portrait images appear / move in-out of the screen using the \nPortrait\n Command in Fungus Flowchart Blocks...\n\n\n\n\n\nDisplaying Portrait images on stages with the Portrait command\n\n\nOnce you have a Fungus Stage, and a character then you can instruct Fungus to display / move onscreen the Character Portrait images. To make character images appear as part of a scene do the following:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename the Flowchart Block \"sherlock enters dramatically\".\n\n\n\n\n\n\nCreate a Fungus Stage gameObject in the scene by choosing menu:\n\nTools | Fungus | Create | Stage\n.\n\n\n\n\n\n\nCreate a new character, name the gameObject \"Character1 - Sherlock\", set the Name Text to \"sherlock\" and the Name Color to green. Add to this character a portrait (we used the sherlock-confident image from the Fungus Example project \"Sherlock\"). And set the image facing to the appropriate side (in our case: left):\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a Portrait Command by clicking the Add Command button (the plus-sign \"+\"), then choosing menu:\n\n\n\nNarrative | Portrait\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou will now see your new Portrait command in the top half of the Inspector, and its Command properties in the bottom half of the Inspector. Note the red exclamation mark at the right of the highlighted (green) Command row - this indicated when a command has one or more required properties that have not been set. We see the error message \n\"No character selected\"\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nSet the portrait's character to \"Character1 - sherlock\", and set the following properties:\n\n\n\n\nPortrait: confident\n\n\nFacing: \n-- (left)\n\n\nMove: Yes (check the checkbox)\n\n\nFrom Position: Offscreen Right\n\n\nTo Position: Right\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you run the scene, the Sherlock portrait image should move into view having started from Offscreen - Right. The image stops when it gets to about a third the way onto the screen:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote, a common Command flow sequence is:\n\n\n\n\nto have a character enter on screen (Portrait command),\n\n\nthen have that character say something (Say command),\n\n\nthen have another character enter the screen (Portrait command),\n\n\nand then that second character says something (Say command).\n\n\n\n\nHere is just such a sequence for the \"Case of the missing violin\" two-sentence scenario explored in the recipe to learning how to create Fungus Characters (recipe: Listing portrait image(s) for use by Characters):\n\n\n\n\n\n\n\n\nHere we see the Play Mode user experience of the output of running such a workflow:\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also see that the character that is Say'ing something, has a WHITE-outline around its Stage portrait, to visually reinforce to the user which character is speaking at any point in time...\n\n\n\n\n\nPlay some music\n\n\nMusic sound clips loop, so they are restarted once they have finished playing. Often the first Command in a Block is a \nPlay Music\n Command. Add music to a Block as follows:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nAdd a Play Music Command to the current Block by clicking the Add Command (plus-sign \"+\" button) in the Inspector, and then choosing menu: \nAudio | Play Music\n.\n\n\n\n\n\n\nEnsure the Play Music command is selected (green highlight) in the top of the Inspector, and then drag the desired music clip file into the \"Music Clip\" property in the bottom half of the Inspector:\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange the volume as desired\n\n(the default is 1, values are between 0.0 and 1.0, representing percentages of volume from 0% - 100%).\n\n\n\n\n\n\nPlay your scene - the music clip should play, and keep looping.\n\n\n\n\n\n\nNOTE: If you wish to start playing the music clip from a known time-point (rather than from the beginning), then enter the desired time-point in the Inspector property \"At Time\" for your Play Music command.\n\n\n\n\n\nAdd menu commands to branch to other blocks\n\n\nLet's use a Say command above to ask a tricky mathematical question, and demonstrate the Menu command by offering the user a choice been \"correct' and \"incorrect\" answers.  Menu commands transfer control to another block - so we'll need to add 2 new blocks to correspond to the 2 answers.\nDo the following:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename the Block in the Flowchart to \"Question\".\n\n\n\n\n\n\nCreate a Say command, with \nStory Text\n to ask the question: \"Is 2 + 2?\".\n\n\n\n\n\n\nUncheck the \"Wait For Click\" checkbox (this is so we see the menu options immediately after the Say command has displayed the question):\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a new Block, named \"Correct\" which contains a \nSay\n command with the text \"Well done, you are very mathematical!\". Click the plus-sign button in the Flowchart window to add a new Block to the Flowchart, rename it \"Correct\" and then add that Say command:\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \"Question\" block, and add a Menu command by clicking the plus-sign add Command button in the Inspector and then choosing menu: \nNarrative | Menu\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith this new Menu command selected (green) in the top half of the Inspector window, set the \nText\n to \"Yes\" and the \nTarget Block\n to your new \"Correct\" block:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou should now see how the 'flow' of commands can change from Block \"hello\" to Block \"Correct\" in the Flowchart window:\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a second new Block named \"Wrong\", containing a Say command with text \"Bad luck, perhaps consider a non-mathematical career path...\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow we need to add another Menu command to our \"hello\" block, offering the user the \"No\" answer to our maths question, and passing control to Block \"Wrong\" if they disagree that 2 + 2 = 4. Select the \"hello\" block, and add a Menu command. With this new Menu command selected (green) in the top half of the Inspector window, set the \nText\n to \"No\" and the \nTarget Block\n to your new \"Wrong\" block.\n\n\n\n\n\n\nYou should now see in the Flowchart window how block \"hello\" can pass control to either block \"Correct\" or Block \"Wrong\" - depending on which menu answer the user selects.\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun the scene, and you should see the Say question appear at the bottom of the screen, and also the two Menu buttons \"Yes\" and \"No\" in the middle of the screen. Clicking \"Yes\" then runs the \"Correct\" Block's commands, and clicking \"No\" runs the \"Wrong\" block's commands:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange Camera background colour\n\n\nUnity cameras determine what the user sees when a scene is running. When nothing is present in all or part of the camera's rectangle a solid \"Background\" colour is displayed. Unity cameras have a default Background of a medium dark blue colour. You can change this as follows:\n\n\n\n\n\n\n(setup) Create a new 2D scene, unless you already have a scene with which to work.\n\n\n\n\n\n\nSelect the Main Camera in the Hierarchy.\n\n\n\n\n\n\nIn the Inspector for the Camera component, click and choose a different value for the Background property - often black works well.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow when any part of the camera rectangle (frustrum) shows no gameOjects then your custom Background colour will be what the user sees.\n\n\n\n\n\n\n\n\n\nAdd a background sprite\n\n\nTo add any sprite image file from your Unity Project folder into the current scene, simply drag a reference to the sprite image file from the Project window onto the Scene window, and rotate / resize desired. The sprite will appear as a new gameObject (with same name as Sprite Project image file) in the Hierarchy window:\n\n\n\n\n\n\n\nNOTE: You may not be able to see the sprite, because what we see depends on the current settings for the camera. What the camera shows, how it moves etc. can be controlled by Fungus Views and Commmands relating to Views.\n\n\n\n\n\nAdding and customising a view\n\n\nWhat the main camera of a scene displays to the user, and how it moves etc. can be controlled by Fungus Views and Fungus Commmands relating to Views. A Fungus View is a special gameObject in the Hierarchy, it appears as a green outlined inner rectangle, with two filled green rectangles on the left and the right. The ratio of the outlined inner rectangle is 4:3. The ratio of the outer rectangle (which includes the two filled green left and right rectangles) is 16:9. These two ratios cover almost every common phone, tablet and computer screen width-to-height ratio. So arranging the view so that a background Sprite image looks good for both inner- and outer- rectangles of a view, pretty much ensures your game will look good on any device. Setting the background color of the camera to something like black also means on the rare device that has an odd ratio showing content outside of the view outer rectangle, the game should still look perfectly acceptable.\n\n\nTo add a view to the current scene do the following:\n\n\n\n\n\n\n(setup) Create / Edit a scene that has a Sprite background image gameObject\n\n\n\n\n\n\nChoose menu: \nTools | Fungus | Create | View\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nRename this View as \"View1\".\n\n\n\n\n\n\nUse the two white squares to resize the view (it maintains its proportions). Use the center square outline, or vertical and horizontal arrows to move the View around the Scene window.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnsure the View is selected in the Hierarchy, then position the view so that it is approximately centered on your background sprite image\n\n\n\n\n\n\nResize (and if necessary reposition) the View to be as big as possible, but ensuring that its outer rectangle stays within the bounds of the background sprite. (Note we've tinted the Sprite red so the green View rectangles can be more easily seen in this screenshot):\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote: You can also rotate the view with the Unity Rotate tool\n\n\n\n\n\n\nNOTE: Utnil you add a \"Fade To View\" Fungus command, you still may not see the Sprite in the Game window when the scene plays, since the Main Camera has not been oriented to resize and align with the view.\n\n\n\n\n\nAdd a Fade To View command\n\n\nOnce you have a Scene that contains some background Sprites and Fungus Views, you are ready to use the Fungus camera related Commands to control what the user sees. The simplest camera control is to make the Game window fade from a solid colour to the Main Camera being sized, positioned (and if necessary rotated) to show a specified Fungus View. Do the following:\n\n\n\n\n\n\n(setup) Create / being editing a Scene containing a background Sprite image, and a Fungus View that has been positioned to show all / some of the Sprite.\n\n\n\n\n\n\nIn the Fungus Flowchart rename the Block \"Camera Control\".\n\n\n\n\n\n\nAdd a new \"Fade to View\" Command to the Block. First click the Plus button in the bottom half of the Inspector window, to add a new Command, then choose menu: \nCamera | Fade To View\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow Drag \"View1\" from the Hierarchy window into the \"Target View\" property of the Fade to View Command  in the Inspector:\n\n\n\n\n\n\n\n\n\n\n\n\n\n(We'll keep the defaults of 1 second and fade From Color of black).\n\n\n\n\n\n\nWhen you run the Scene the Game window should start off solid black, and then slowly the background Sprite image within the View rectangle should fade into view.\n\n\n\n\nNow Drag \"View1\" from the Hierarchy window into the", 
            "title": "Telling a Story"
        }, 
        {
            "location": "/telling_a_story/index.html#telling-a-story", 
            "text": "Having got up and running, here are some next steps to get you familiar with the storytelling features in Fungus.", 
            "title": "Telling a story"
        }, 
        {
            "location": "/telling_a_story/index.html#adding-characters-for-use-in-say-commands", 
            "text": "We can associated words spoken by the Say Command with a particular Character. Consider the following Tom and Jerry scene:  [Tom] Where is that mouse?\n[Jerry] Where is that cat?\n[Tom] Aha...\n[Jerry] Arrrrggggggg!!!!!!!  To implement the above in Fungus we need to create and name two Characters. Do the following:    (setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename the Flowchart Block \"cat and mouse\".    Choose menu: Tools | Fungus | Create | Character :       You should now see a new gameObject \"Character\" in the Hierarchy window, named Character.       Ensure gameObject \"Character\" is selected, and edit its properties in the Inspector. Rename the gameObject to \"Character1 - Tom\", then in its Character (Script) component set the Name Text to \"Tom\" and the Name Color to red:       Repeat the previous two steps to create a second character \"Character2 - Jerry\", then in its Character (Script) component set the Name Text to \"Jerry\" and the Name Color to blue:       Now we have our two character gameObjects, we can assign them to any Say commands as appropriate.    Create a Say Command for Tom, with text \"Where is that mouse?\", setting the Character of this Say command to \"Character1 - Tom\":       Repeat the above step for the 3 remaining statements, for:   Jerry \"Where is that cat?\"  Tom \"Aha...\"  Jerry \"Arrrrggggggg!!!!!!!\" Assigning the appropriate Character for each Say Command from the menu of Character gameObjects in the Hiearchy.     You should now have a sequence of 4 Say commands in your Block:       When you run the scene you should see a sequence of statements, clearly showing who is saying what - both the character name is given, and also that name is coloured according to the properties we set for the character gameObjects (red for Tom, and blue for Jerry):", 
            "title": "Adding Characters, for use in Say commands"
        }, 
        {
            "location": "/telling_a_story/index.html#listing-portrait-images-for-use-by-characters", 
            "text": "If you add one or more portrait images to a character, then each Say command for that character can define which of those portrait images should be displayed, alongside the (colored) name of the Character.  To add portrait images to a character do the following:    (setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename the Flowchart Block \"The case of the missing violin\".    Create a character, and in the Inspector give your character Name Text (we chose \"Sherlock\") and a name color.    Now in the Inspector click the Add Portrait button (the plus-sign \"+\"), to get a 'slot' into which to add a portrait image:       Drag the appropriate image into your new portrait image slot (in this screenshot we used the 'condident' image from the Sherlock example project). Also set the direction that the image is facing (left / front / right):       Create a second character (e.g. John, using Name Color blue, and portrait image 'annoyed').    Now select your Block in the Fungus Flowchart, so you can add some Commands to be executed...    Create a Say command, for your Sherlock Character, saying \"Watson, have you seen my violin?\" and choosing portrait 'confident' (since this is the only we added to the Character):       Add a second Say command, this time for Character John, saying \"No, why don't you find it yourself using your amazing powers of deduction...\" and choosing the 'annoyed' portrait for John.       When you run the scene you should see a sequence of statements, clearly showing who is saying both with (colored) name text AND also the portrait image you selected for each Say command:        As you can see in some of the Fungus Example projects, many games will have a wide range of different portrait images for each character, to allow a full range of visual expression of emotion to support the text of Say commands:", 
            "title": "Listing portrait image(s) for use by Characters"
        }, 
        {
            "location": "/telling_a_story/index.html#add-a-stage", 
            "text": "Portrait images can be used in two ways in Fungus.   They can be shown as part of the  Say  commands in the Say Dialog.  Alternatively Portraits can be displayed and moved around the screen inside Fungus  Stages , using the Portrait Command.   Create a simple stage that covers the whole game Window as follows:    (setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename the Flowchart Block \"stage demo\".    Create a Fungus Stage gameObject in the scene by choosing menu: Tools | Fungus | Create | Stage :       You should now see a new gameObject \"Stage\" added to the scene Hierarchy.    If you select it you will see its properties in the Inspector. We can leave the default settings, since these are for the stage to cover the whole Game window. There are some child gameObjects inside the Stage, but you don't need to worry about these unless you are doing some advanced customisation of stages for a particular game effect.       Now you have added a Fungus Stage to your scene, you will be able to make large Portrait images appear / move in-out of the screen using the  Portrait  Command in Fungus Flowchart Blocks...", 
            "title": "Add a Stage"
        }, 
        {
            "location": "/telling_a_story/index.html#displaying-portrait-images-on-stages-with-the-portrait-command", 
            "text": "Once you have a Fungus Stage, and a character then you can instruct Fungus to display / move onscreen the Character Portrait images. To make character images appear as part of a scene do the following:    (setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename the Flowchart Block \"sherlock enters dramatically\".    Create a Fungus Stage gameObject in the scene by choosing menu: Tools | Fungus | Create | Stage .    Create a new character, name the gameObject \"Character1 - Sherlock\", set the Name Text to \"sherlock\" and the Name Color to green. Add to this character a portrait (we used the sherlock-confident image from the Fungus Example project \"Sherlock\"). And set the image facing to the appropriate side (in our case: left):       Add a Portrait Command by clicking the Add Command button (the plus-sign \"+\"), then choosing menu:  Narrative | Portrait :       You will now see your new Portrait command in the top half of the Inspector, and its Command properties in the bottom half of the Inspector. Note the red exclamation mark at the right of the highlighted (green) Command row - this indicated when a command has one or more required properties that have not been set. We see the error message  \"No character selected\" :       Set the portrait's character to \"Character1 - sherlock\", and set the following properties:   Portrait: confident  Facing:  -- (left)  Move: Yes (check the checkbox)  From Position: Offscreen Right  To Position: Right        When you run the scene, the Sherlock portrait image should move into view having started from Offscreen - Right. The image stops when it gets to about a third the way onto the screen:       Note, a common Command flow sequence is:   to have a character enter on screen (Portrait command),  then have that character say something (Say command),  then have another character enter the screen (Portrait command),  and then that second character says something (Say command).   Here is just such a sequence for the \"Case of the missing violin\" two-sentence scenario explored in the recipe to learning how to create Fungus Characters (recipe: Listing portrait image(s) for use by Characters):     Here we see the Play Mode user experience of the output of running such a workflow:       We can also see that the character that is Say'ing something, has a WHITE-outline around its Stage portrait, to visually reinforce to the user which character is speaking at any point in time...", 
            "title": "Displaying Portrait images on stages with the Portrait command"
        }, 
        {
            "location": "/telling_a_story/index.html#play-some-music", 
            "text": "Music sound clips loop, so they are restarted once they have finished playing. Often the first Command in a Block is a  Play Music  Command. Add music to a Block as follows:    (setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Add a Play Music Command to the current Block by clicking the Add Command (plus-sign \"+\" button) in the Inspector, and then choosing menu:  Audio | Play Music .    Ensure the Play Music command is selected (green highlight) in the top of the Inspector, and then drag the desired music clip file into the \"Music Clip\" property in the bottom half of the Inspector:       Change the volume as desired (the default is 1, values are between 0.0 and 1.0, representing percentages of volume from 0% - 100%).    Play your scene - the music clip should play, and keep looping.    NOTE: If you wish to start playing the music clip from a known time-point (rather than from the beginning), then enter the desired time-point in the Inspector property \"At Time\" for your Play Music command.", 
            "title": "Play some music"
        }, 
        {
            "location": "/telling_a_story/index.html#add-menu-commands-to-branch-to-other-blocks", 
            "text": "Let's use a Say command above to ask a tricky mathematical question, and demonstrate the Menu command by offering the user a choice been \"correct' and \"incorrect\" answers.  Menu commands transfer control to another block - so we'll need to add 2 new blocks to correspond to the 2 answers.\nDo the following:    (setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename the Block in the Flowchart to \"Question\".    Create a Say command, with  Story Text  to ask the question: \"Is 2 + 2?\".    Uncheck the \"Wait For Click\" checkbox (this is so we see the menu options immediately after the Say command has displayed the question):       Create a new Block, named \"Correct\" which contains a  Say  command with the text \"Well done, you are very mathematical!\". Click the plus-sign button in the Flowchart window to add a new Block to the Flowchart, rename it \"Correct\" and then add that Say command:       Select the \"Question\" block, and add a Menu command by clicking the plus-sign add Command button in the Inspector and then choosing menu:  Narrative | Menu .       With this new Menu command selected (green) in the top half of the Inspector window, set the  Text  to \"Yes\" and the  Target Block  to your new \"Correct\" block:       You should now see how the 'flow' of commands can change from Block \"hello\" to Block \"Correct\" in the Flowchart window:       Add a second new Block named \"Wrong\", containing a Say command with text \"Bad luck, perhaps consider a non-mathematical career path...\"       Now we need to add another Menu command to our \"hello\" block, offering the user the \"No\" answer to our maths question, and passing control to Block \"Wrong\" if they disagree that 2 + 2 = 4. Select the \"hello\" block, and add a Menu command. With this new Menu command selected (green) in the top half of the Inspector window, set the  Text  to \"No\" and the  Target Block  to your new \"Wrong\" block.    You should now see in the Flowchart window how block \"hello\" can pass control to either block \"Correct\" or Block \"Wrong\" - depending on which menu answer the user selects.       Run the scene, and you should see the Say question appear at the bottom of the screen, and also the two Menu buttons \"Yes\" and \"No\" in the middle of the screen. Clicking \"Yes\" then runs the \"Correct\" Block's commands, and clicking \"No\" runs the \"Wrong\" block's commands:", 
            "title": "Add menu commands to branch to other blocks"
        }, 
        {
            "location": "/telling_a_story/index.html#change-camera-background-colour", 
            "text": "Unity cameras determine what the user sees when a scene is running. When nothing is present in all or part of the camera's rectangle a solid \"Background\" colour is displayed. Unity cameras have a default Background of a medium dark blue colour. You can change this as follows:    (setup) Create a new 2D scene, unless you already have a scene with which to work.    Select the Main Camera in the Hierarchy.    In the Inspector for the Camera component, click and choose a different value for the Background property - often black works well.       Now when any part of the camera rectangle (frustrum) shows no gameOjects then your custom Background colour will be what the user sees.", 
            "title": "Change Camera background colour"
        }, 
        {
            "location": "/telling_a_story/index.html#add-a-background-sprite", 
            "text": "To add any sprite image file from your Unity Project folder into the current scene, simply drag a reference to the sprite image file from the Project window onto the Scene window, and rotate / resize desired. The sprite will appear as a new gameObject (with same name as Sprite Project image file) in the Hierarchy window:    NOTE: You may not be able to see the sprite, because what we see depends on the current settings for the camera. What the camera shows, how it moves etc. can be controlled by Fungus Views and Commmands relating to Views.", 
            "title": "Add a background sprite"
        }, 
        {
            "location": "/telling_a_story/index.html#adding-and-customising-a-view", 
            "text": "What the main camera of a scene displays to the user, and how it moves etc. can be controlled by Fungus Views and Fungus Commmands relating to Views. A Fungus View is a special gameObject in the Hierarchy, it appears as a green outlined inner rectangle, with two filled green rectangles on the left and the right. The ratio of the outlined inner rectangle is 4:3. The ratio of the outer rectangle (which includes the two filled green left and right rectangles) is 16:9. These two ratios cover almost every common phone, tablet and computer screen width-to-height ratio. So arranging the view so that a background Sprite image looks good for both inner- and outer- rectangles of a view, pretty much ensures your game will look good on any device. Setting the background color of the camera to something like black also means on the rare device that has an odd ratio showing content outside of the view outer rectangle, the game should still look perfectly acceptable.  To add a view to the current scene do the following:    (setup) Create / Edit a scene that has a Sprite background image gameObject    Choose menu:  Tools | Fungus | Create | View :       Rename this View as \"View1\".    Use the two white squares to resize the view (it maintains its proportions). Use the center square outline, or vertical and horizontal arrows to move the View around the Scene window.          Ensure the View is selected in the Hierarchy, then position the view so that it is approximately centered on your background sprite image    Resize (and if necessary reposition) the View to be as big as possible, but ensuring that its outer rectangle stays within the bounds of the background sprite. (Note we've tinted the Sprite red so the green View rectangles can be more easily seen in this screenshot):       Note: You can also rotate the view with the Unity Rotate tool    NOTE: Utnil you add a \"Fade To View\" Fungus command, you still may not see the Sprite in the Game window when the scene plays, since the Main Camera has not been oriented to resize and align with the view.", 
            "title": "Adding and customising a view"
        }, 
        {
            "location": "/telling_a_story/index.html#add-a-fade-to-view-command", 
            "text": "Once you have a Scene that contains some background Sprites and Fungus Views, you are ready to use the Fungus camera related Commands to control what the user sees. The simplest camera control is to make the Game window fade from a solid colour to the Main Camera being sized, positioned (and if necessary rotated) to show a specified Fungus View. Do the following:    (setup) Create / being editing a Scene containing a background Sprite image, and a Fungus View that has been positioned to show all / some of the Sprite.    In the Fungus Flowchart rename the Block \"Camera Control\".    Add a new \"Fade to View\" Command to the Block. First click the Plus button in the bottom half of the Inspector window, to add a new Command, then choose menu:  Camera | Fade To View :       Now Drag \"View1\" from the Hierarchy window into the \"Target View\" property of the Fade to View Command  in the Inspector:       (We'll keep the defaults of 1 second and fade From Color of black).    When you run the Scene the Game window should start off solid black, and then slowly the background Sprite image within the View rectangle should fade into view.   Now Drag \"View1\" from the Hierarchy window into the", 
            "title": "Add a Fade To View command"
        }, 
        {
            "location": "/playing_audio/index.html", 
            "text": "Playing Audio\n\n\nAlmost every game benefits from some sound! Often we categorise audio clips into three kinds:\n\n\n\n\nMusic\n\n\nSound effects\n\n\nSpeech\n\n\n\n\nFungus provides straightforward ways to include all 3 kinds of audio clip in your game, using the techniques presented here.\n\n\n\n\n\nSources of free to use audio clips and music\n\n\nBefore you can \nadd\n audio clips to a game you need to get some audio clips. Here are some sources of audio clips to use when learning about audio in Fungus, in case you don't have some of your own to hand.\n\n\nThe following are some good places online to fine music and sound effects for games. Some are free for any use (including commerical), some are just free for personal use. As always, check the licence of media assets before using them for any commerical products ...\n\n\n\n\nFreesound.org\n\n\nlots of creative commons and royalty free sounds at \nSoundBible.com\n\n\na great list of audio sources in peoples answers to questions at \nAnswers.unity3d\n and \nStackOverflow.com\n\n\nmixture of free and paid music sources at \nPixelProspector.com\n\n\n\n\nYou'll find a range of audio clips included inside the Fungus Examples folders:\n\n\n\n\n\n\n\nAdding audio assets to your project\n\n\nOnce you have some audio clips on your computer, you need to import them into your Unity project.\n\n\nMethod 1 (menu)\n\n\nYou can do this one clip at a time, by choosing menu: \nAssets | Import New Asset...\n and navigating to and selecting each clip.\n\n\nMethod 2 (drag-drop)\n\n\nAlternatively you can \ndrag\n files or entire folders into your Unity Project window, and Unity will make a copy of, and then import the dragged files:\n\n\n\n\n\n\n\n\n\n\n\nThree ways to work with audio in Fungus games\n\n\nThere are 3 main ways to work with audio in Fungus games. These are the Audio commands, the Say command, and gameObjects containing Unity Audio Source components. All three are discussed below:\n\n\n\n\n\n\n\n\n\n\nList of Fungus audio commands\n\n\nThe range of audio \nCommands\n you can add to a Block are as follows:\n\n\n\n\n\n\n\nAlso you can declare an audio clip that contains the speech voiceover to correspond to text displayed with a \nSay\n command:\n\n\n\n\n\n\n\n\n\n\nPlay Music command\n\n\nMusic sound clips loop, so they are restarted once they have finished playing. Often the first Command in a Block is a \nPlay Music\n Command. Add music to a Block as follows:\n\n\n\n\n\n\n(if you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart).\n\n\n\n\n\n\nAdd a Play Music Command to the current Block by clicking the Add Command (plus-sign \"+\" button) in the Inspector, and then choosing menu: \nAudio | Play Music\n.\n\n\n\n\n\n\nEnsure the Play Music command is selected (green highlight) in the top of the Inspector, and then drag the desired music clip file into the \"Music Clip\" property in the bottom half of the Inspector:\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange the volume as desired\n\n(the default is 1, values are between 0.0 and 1.0, representing percentages of volume from 0% - 100%).\n\n\n\n\n\n\nPlay your scene - the music clip should play, and keep looping.\n\n\n\n\n\n\nNOTE: If you wish to start playing the music clip from a known time-point (rather than from the beginning), then enter the desired timepoint in the Inspector property \"At Time\" for your Play Music command.\n\n\n\n\n\nPlay Sound command\n\n\nThe Fungus Play Sound Command will play a stated audio clip once. With your Flowchart Block selected, click the Add Command button in the Inspector and choose menu: \nAudio | Play Sound\n. Drag in a sound effect (we chose the BearRoad sound from the Hunter example):\n\n\n\n\n\n\n\nPlay the scene, you should hear your sound effect play once.\n\n\nNote. The default Fungus setting is for the sound effect to start playing, and while it is playing the next Command in the Block will start executing. However, you if you check the \"Wait Until Finished\" checkbox, then Fungus will wait until the sound effect has finished playing, before moving on to execute the next Command in the block:\n\n\n\n\n\n\n\n\n\n\nSet Audio Volume command\n\n\nThe default volume for music being played is 1 (100%). However, we can change this easily with the Set Audio Volume command. Do the following:\n\n\n\n\n\n\n(if you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart).\n\n\n\n\n\n\nRename this Block \"Play Music\".\n\n\n\n\n\n\nAdd a Play Music Command to the current Block, then drag the desired music clip file into the \"Music Clip\" property in the bottom half of the Inspector:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you play the scene now, the music will play at full volume (1 = 100%).\n\n\n\n\n\n\nNow create a second Block in the Flowchart window named \"quieter\".\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd to this new Block a Set Audio Volume Command.\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the properties of the Set Audio Volume Command set the volume to 0.25 (25%).\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \"Play Music\" block, and add a Menu command by clicking the plus-sign add Command button in the Inspector and then choosing menu: \nNarrative | Menu\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSet the Text Property to \"Make Quieter\" and the Target Block to Block \"Quieter\":\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the Flowchart window you should now see a green arrow, showing that a Command in Block \"Play Music\" passes control to Block \"quieter\":\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you run the scene, the music will start playing at full volume, then when y ou click the \"Make Quieter\" button, control will pass to the \"quieter\" block, and you'll hear the music become much quieter after the Set Audio Volume Command has been executed with a value of 25% (0.25):\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe 3 Unity audio concepts\n\n\nUnity has 3 different kinds of Audio 'object', that it is worth understanding when working with audio in Fungus (or any other) Unity project:\n\n\n\n\nAudio Clip\n\n\nAudio Listener\n\n\nAudio Source\n\n\n\n\nUnity Audio Clip\n\n\nUnity uses the term Audio \"Clip\" to refer to the physical sound files (.mp3, .wav, .ogg etc.) that are stored in your Project folder. It is these Audio Clip files that you drag and drop into the \"Music Clip\" and \"Sound Clip\" properties in the Inspector Window, when creating Play Music and Play Sound Commands in a Fungus Block.\n\n\nUnity Audio \"Listener\"\n\n\nBasically, if you want sound to be played there must be an Audio Listener component inside one of the gameObjects in your scene. The Main Camera of a scene has one by default, so in most cases you just leave this alone and can rest assured that you have an Audio Listener.\n\n\nIf a scene has no Audio Listener in any gameObject, then no audio will be heard by the user of the game, regardless of how many music and sound clips might be playing.\n\n\nSometimes you may add gameObjects to your scene that contain another Audio Listener component. In this case, Unity will present a warning message stating that more than 1 Audio Listener is present in the scene. If you see such a message, then its best to resolve this problem by disabling all but one Audio Listener...\n\n\nIf you are working with a 3D game, and/or you wish to present a sophisticated stereo sound experience for your user, then you may need to learn about 3D audio. In such games the 3D \"position\" of the gameObject containing the Audio Listener becomes important - but don't worry about this if you are just getting started with audio in Fungus. For 3D effects the Audio Listener is like an \"electronic ear\", so its location determines things like how loud a sound is played (distance from \"ear\") and left-right stereo balance (which \"side\" audio is to the \"ear\") etc.\n\n\nUnity Audio Source\n\n\nIn Unity the link between an Audio Clip (music/sound) file that we wish to be played, and the Audio Listener in the scene is a Unity Audio Source component of a gameObject. However, in most cases Fungus creates one of these if needed, so we don't need to worry about them!\n\n\nHowever, for sophisticated control of music and sound and speech in your game there is the facility to make Fungus have detailed control of Unity Audio Sources. It is an Audio Source component that controls how and when and which part of an audio clip is playing (and whether it should loop or not), and whether it is playing or paused, and when resuming should continue from where paused or restart. The volume of a playing clip can also be controlled by properties of an Audio Source.\n\n\nLearn more about audio in Unity at the \nUnity Manual Audio Page\n.\n\n\n\nControl Audio command\n\n\nThe Fungus Audio Commands cover all common music and sound effect actions, for specialist audio work you may need to access the raw (and complicated) power of Unity audio. The Fungus Command \"Control Audio\" lets Fungus Blocks communicate directly with Unity Audio Source components in any gameObject in the current scene, so your wizard audio team member can do what they need to do with the Unity toolkit, and you can still control playing / looping / volume etc. of the audio in those complex gameObjects.\n\n\nThe Control Audio Command offers five actions that can be communicated to Unity Audio Source components:\n\n\n\n\n\n\n\n\n\nWe'll learn about this with a simple Unity gameObject that plays a bear sound two times, first at full volume and then reduces the volume before playing a second time, using three \"Control Audio\" Fungus Commands. Do the following:\n\n\n\n\n\n\n(setup) If you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename this Block \"Control Audio\".\n\n\n\n\n\n\nIn the Hierarchy Window create a new Empty gameObject, choose menu: \nCreate | Create Empty\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nRename this new empty gameObject \"GameObject - bear sound\" (or whatever sound name makes sense in your project).\n\n\n\n\n\n\nLocate your desired audio clip file in the Project window, and (with \"GameObject - bear sound\" selected), drag a reference to the audio clip from the Project window into the Inspector:\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn Audio Source component should now be added in the Inspector to \"GameObject - bear sound\". Un-check the Play On Awake property in the Inspector (to stop this sound from playing as soon as the scene begins - \nwe\n want to be in control of this Audio Source object...):\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith your Flowchart Block selected, click the Add Command button in the Inspector and choose menu: \nAudio | Control Audio\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\nDrag the  \"GameObject - bear sound\" gameObject from the Hierarchy into the Audio Source property in the Inspector, and select the Wait Until Finished checkbox (so Fungus will wait for the sound to finish playing before moving on):\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote that the default Control action for a Control Audio Command is \"Play Once\" - we'll leave this property unchanged, since we want our bear sound inside our gameObject to be played once.\n\n\n\n\n\n\nIf you run the scene now, you'll hear the bear sound play once at full volume.\n\n\n\n\n\n\nSince all three of the Control Audio commands we need use a link to \"GameObject - bear sound\" the fastest workflow is to \nduplicate\n each Command, and just change the bits we need. So duplicate your Control Audio command by clicking the Duplicate Command button:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the newly copied command, change the Command action to Change Volume, and choose a volume of 0.25 (25%):\n\n\n\n\n\n\n\n\n\n\n\n\n\nOnce again, make a duplicate of the first Control Audio Command (that Plays the sound). Drag this new Command to be last in the sequence of commands.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow when you play the scene, first the bear sound linked to in the Audio Source component of gameObject \"GameObject - bear sound\"  should play at full volume, then (after having its volume reduced to 25%) it should play a second time at a much reduced volume.\n\n\n\n\n\n\n\n\n\nAudio Tags (in Say Commands)\n\n\nSince often dialog authors will know just what sound effects or music they wish to associate with their characters utterances, Fungus allows audio-related 'tags' to be embedded in the text of Say Commands. There are four audio related tags:\n\n\n{audio=AudioObjectName} Play Audio Once\n{audioloop=AudioObjectName} Play Audio Loop\n{audiopause=AudioObjectName} Pause Audio\n{audiostop=AudioObjectName} Stop Audio\n\n\n\nUsing tags like this make it important to carefully \nname\n the gameObjects in the Hierarchy window. To explore how to control sounds in gameObjects do the following:\n\n\n\n\n\n\n(setup) If you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename this Block \"Say audio tags\".\n\n\n\n\n\n\nIn the Hierarchy Window create a new Empty gameObject, choose menu: \nCreate | Create Empty\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nRename this new empty gameObject \"audioBearRoar\", or whatever sound name makes sense in your project, but avoid spaces in the name of this game object.\n\n\n\n\n\n\nLocate your desired audio clip file in the Project window, and (with \"audioBearRoar\" selected), drag a reference to the audio clip from the Project window into the Inspector.\n\n\n\n\n\n\nUn-check the Play On Awake property in the Inspector for the Audio Source component (to stop this sound from playing as soon as the scene begins - \nwe\n want to be in control of this Audio Source object...):\n\n\n\n\n\n\nWith your Flowchart Block selected, click the Add Command button in the Inspector and choose menu: \nNarrative | Say\n. Enter the following for the Story Text property of this Say Command \"... and then the bear roared loudly {audio=audioBearRoar}\":\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun your scene - the bear sound will play after the text has been displayed:", 
            "title": "Playing Audio"
        }, 
        {
            "location": "/playing_audio/index.html#playing-audio", 
            "text": "Almost every game benefits from some sound! Often we categorise audio clips into three kinds:   Music  Sound effects  Speech   Fungus provides straightforward ways to include all 3 kinds of audio clip in your game, using the techniques presented here.", 
            "title": "Playing Audio"
        }, 
        {
            "location": "/playing_audio/index.html#sources-of-free-to-use-audio-clips-and-music", 
            "text": "Before you can  add  audio clips to a game you need to get some audio clips. Here are some sources of audio clips to use when learning about audio in Fungus, in case you don't have some of your own to hand.  The following are some good places online to fine music and sound effects for games. Some are free for any use (including commerical), some are just free for personal use. As always, check the licence of media assets before using them for any commerical products ...   Freesound.org  lots of creative commons and royalty free sounds at  SoundBible.com  a great list of audio sources in peoples answers to questions at  Answers.unity3d  and  StackOverflow.com  mixture of free and paid music sources at  PixelProspector.com   You'll find a range of audio clips included inside the Fungus Examples folders:", 
            "title": "Sources of free to use audio clips and music"
        }, 
        {
            "location": "/playing_audio/index.html#adding-audio-assets-to-your-project", 
            "text": "Once you have some audio clips on your computer, you need to import them into your Unity project.", 
            "title": "Adding audio assets to your project"
        }, 
        {
            "location": "/playing_audio/index.html#method-1-menu", 
            "text": "You can do this one clip at a time, by choosing menu:  Assets | Import New Asset...  and navigating to and selecting each clip.", 
            "title": "Method 1 (menu)"
        }, 
        {
            "location": "/playing_audio/index.html#method-2-drag-drop", 
            "text": "Alternatively you can  drag  files or entire folders into your Unity Project window, and Unity will make a copy of, and then import the dragged files:", 
            "title": "Method 2 (drag-drop)"
        }, 
        {
            "location": "/playing_audio/index.html#three-ways-to-work-with-audio-in-fungus-games", 
            "text": "There are 3 main ways to work with audio in Fungus games. These are the Audio commands, the Say command, and gameObjects containing Unity Audio Source components. All three are discussed below:", 
            "title": "Three ways to work with audio in Fungus games"
        }, 
        {
            "location": "/playing_audio/index.html#list-of-fungus-audio-commands", 
            "text": "The range of audio  Commands  you can add to a Block are as follows:    Also you can declare an audio clip that contains the speech voiceover to correspond to text displayed with a  Say  command:", 
            "title": "List of Fungus audio commands"
        }, 
        {
            "location": "/playing_audio/index.html#play-music-command", 
            "text": "Music sound clips loop, so they are restarted once they have finished playing. Often the first Command in a Block is a  Play Music  Command. Add music to a Block as follows:    (if you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart).    Add a Play Music Command to the current Block by clicking the Add Command (plus-sign \"+\" button) in the Inspector, and then choosing menu:  Audio | Play Music .    Ensure the Play Music command is selected (green highlight) in the top of the Inspector, and then drag the desired music clip file into the \"Music Clip\" property in the bottom half of the Inspector:       Change the volume as desired (the default is 1, values are between 0.0 and 1.0, representing percentages of volume from 0% - 100%).    Play your scene - the music clip should play, and keep looping.    NOTE: If you wish to start playing the music clip from a known time-point (rather than from the beginning), then enter the desired timepoint in the Inspector property \"At Time\" for your Play Music command.", 
            "title": "Play Music command"
        }, 
        {
            "location": "/playing_audio/index.html#play-sound-command", 
            "text": "The Fungus Play Sound Command will play a stated audio clip once. With your Flowchart Block selected, click the Add Command button in the Inspector and choose menu:  Audio | Play Sound . Drag in a sound effect (we chose the BearRoad sound from the Hunter example):    Play the scene, you should hear your sound effect play once.  Note. The default Fungus setting is for the sound effect to start playing, and while it is playing the next Command in the Block will start executing. However, you if you check the \"Wait Until Finished\" checkbox, then Fungus will wait until the sound effect has finished playing, before moving on to execute the next Command in the block:", 
            "title": "Play Sound command"
        }, 
        {
            "location": "/playing_audio/index.html#set-audio-volume-command", 
            "text": "The default volume for music being played is 1 (100%). However, we can change this easily with the Set Audio Volume command. Do the following:    (if you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart).    Rename this Block \"Play Music\".    Add a Play Music Command to the current Block, then drag the desired music clip file into the \"Music Clip\" property in the bottom half of the Inspector:       If you play the scene now, the music will play at full volume (1 = 100%).    Now create a second Block in the Flowchart window named \"quieter\".       Add to this new Block a Set Audio Volume Command.       In the properties of the Set Audio Volume Command set the volume to 0.25 (25%).       Select the \"Play Music\" block, and add a Menu command by clicking the plus-sign add Command button in the Inspector and then choosing menu:  Narrative | Menu .       Set the Text Property to \"Make Quieter\" and the Target Block to Block \"Quieter\":       In the Flowchart window you should now see a green arrow, showing that a Command in Block \"Play Music\" passes control to Block \"quieter\":       When you run the scene, the music will start playing at full volume, then when y ou click the \"Make Quieter\" button, control will pass to the \"quieter\" block, and you'll hear the music become much quieter after the Set Audio Volume Command has been executed with a value of 25% (0.25):", 
            "title": "Set Audio Volume command"
        }, 
        {
            "location": "/playing_audio/index.html#the-3-unity-audio-concepts", 
            "text": "Unity has 3 different kinds of Audio 'object', that it is worth understanding when working with audio in Fungus (or any other) Unity project:   Audio Clip  Audio Listener  Audio Source", 
            "title": "The 3 Unity audio concepts"
        }, 
        {
            "location": "/playing_audio/index.html#unity-audio-clip", 
            "text": "Unity uses the term Audio \"Clip\" to refer to the physical sound files (.mp3, .wav, .ogg etc.) that are stored in your Project folder. It is these Audio Clip files that you drag and drop into the \"Music Clip\" and \"Sound Clip\" properties in the Inspector Window, when creating Play Music and Play Sound Commands in a Fungus Block.", 
            "title": "Unity Audio Clip"
        }, 
        {
            "location": "/playing_audio/index.html#unity-audio-listener", 
            "text": "Basically, if you want sound to be played there must be an Audio Listener component inside one of the gameObjects in your scene. The Main Camera of a scene has one by default, so in most cases you just leave this alone and can rest assured that you have an Audio Listener.  If a scene has no Audio Listener in any gameObject, then no audio will be heard by the user of the game, regardless of how many music and sound clips might be playing.  Sometimes you may add gameObjects to your scene that contain another Audio Listener component. In this case, Unity will present a warning message stating that more than 1 Audio Listener is present in the scene. If you see such a message, then its best to resolve this problem by disabling all but one Audio Listener...  If you are working with a 3D game, and/or you wish to present a sophisticated stereo sound experience for your user, then you may need to learn about 3D audio. In such games the 3D \"position\" of the gameObject containing the Audio Listener becomes important - but don't worry about this if you are just getting started with audio in Fungus. For 3D effects the Audio Listener is like an \"electronic ear\", so its location determines things like how loud a sound is played (distance from \"ear\") and left-right stereo balance (which \"side\" audio is to the \"ear\") etc.", 
            "title": "Unity Audio \"Listener\""
        }, 
        {
            "location": "/playing_audio/index.html#unity-audio-source", 
            "text": "In Unity the link between an Audio Clip (music/sound) file that we wish to be played, and the Audio Listener in the scene is a Unity Audio Source component of a gameObject. However, in most cases Fungus creates one of these if needed, so we don't need to worry about them!  However, for sophisticated control of music and sound and speech in your game there is the facility to make Fungus have detailed control of Unity Audio Sources. It is an Audio Source component that controls how and when and which part of an audio clip is playing (and whether it should loop or not), and whether it is playing or paused, and when resuming should continue from where paused or restart. The volume of a playing clip can also be controlled by properties of an Audio Source.  Learn more about audio in Unity at the  Unity Manual Audio Page .", 
            "title": "Unity Audio Source"
        }, 
        {
            "location": "/playing_audio/index.html#control-audio-command", 
            "text": "The Fungus Audio Commands cover all common music and sound effect actions, for specialist audio work you may need to access the raw (and complicated) power of Unity audio. The Fungus Command \"Control Audio\" lets Fungus Blocks communicate directly with Unity Audio Source components in any gameObject in the current scene, so your wizard audio team member can do what they need to do with the Unity toolkit, and you can still control playing / looping / volume etc. of the audio in those complex gameObjects.  The Control Audio Command offers five actions that can be communicated to Unity Audio Source components:     We'll learn about this with a simple Unity gameObject that plays a bear sound two times, first at full volume and then reduces the volume before playing a second time, using three \"Control Audio\" Fungus Commands. Do the following:    (setup) If you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename this Block \"Control Audio\".    In the Hierarchy Window create a new Empty gameObject, choose menu:  Create | Create Empty :       Rename this new empty gameObject \"GameObject - bear sound\" (or whatever sound name makes sense in your project).    Locate your desired audio clip file in the Project window, and (with \"GameObject - bear sound\" selected), drag a reference to the audio clip from the Project window into the Inspector:       An Audio Source component should now be added in the Inspector to \"GameObject - bear sound\". Un-check the Play On Awake property in the Inspector (to stop this sound from playing as soon as the scene begins -  we  want to be in control of this Audio Source object...):       With your Flowchart Block selected, click the Add Command button in the Inspector and choose menu:  Audio | Control Audio .       Drag the  \"GameObject - bear sound\" gameObject from the Hierarchy into the Audio Source property in the Inspector, and select the Wait Until Finished checkbox (so Fungus will wait for the sound to finish playing before moving on):       Note that the default Control action for a Control Audio Command is \"Play Once\" - we'll leave this property unchanged, since we want our bear sound inside our gameObject to be played once.    If you run the scene now, you'll hear the bear sound play once at full volume.    Since all three of the Control Audio commands we need use a link to \"GameObject - bear sound\" the fastest workflow is to  duplicate  each Command, and just change the bits we need. So duplicate your Control Audio command by clicking the Duplicate Command button:       In the newly copied command, change the Command action to Change Volume, and choose a volume of 0.25 (25%):       Once again, make a duplicate of the first Control Audio Command (that Plays the sound). Drag this new Command to be last in the sequence of commands.       Now when you play the scene, first the bear sound linked to in the Audio Source component of gameObject \"GameObject - bear sound\"  should play at full volume, then (after having its volume reduced to 25%) it should play a second time at a much reduced volume.", 
            "title": "Control Audio command"
        }, 
        {
            "location": "/playing_audio/index.html#audio-tags-in-say-commands", 
            "text": "Since often dialog authors will know just what sound effects or music they wish to associate with their characters utterances, Fungus allows audio-related 'tags' to be embedded in the text of Say Commands. There are four audio related tags:  {audio=AudioObjectName} Play Audio Once\n{audioloop=AudioObjectName} Play Audio Loop\n{audiopause=AudioObjectName} Pause Audio\n{audiostop=AudioObjectName} Stop Audio  Using tags like this make it important to carefully  name  the gameObjects in the Hierarchy window. To explore how to control sounds in gameObjects do the following:    (setup) If you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename this Block \"Say audio tags\".    In the Hierarchy Window create a new Empty gameObject, choose menu:  Create | Create Empty :       Rename this new empty gameObject \"audioBearRoar\", or whatever sound name makes sense in your project, but avoid spaces in the name of this game object.    Locate your desired audio clip file in the Project window, and (with \"audioBearRoar\" selected), drag a reference to the audio clip from the Project window into the Inspector.    Un-check the Play On Awake property in the Inspector for the Audio Source component (to stop this sound from playing as soon as the scene begins -  we  want to be in control of this Audio Source object...):    With your Flowchart Block selected, click the Add Command button in the Inspector and choose menu:  Narrative | Say . Enter the following for the Story Text property of this Say Command \"... and then the bear roared loudly {audio=audioBearRoar}\":       Run your scene - the bear sound will play after the text has been displayed:", 
            "title": "Audio Tags (in Say Commands)"
        }, 
        {
            "location": "/articles/index.html", 
            "text": "Community Articles\n\n\nIf you've created an article or video about Fungus let us know on the forum and we'll add it here.\n\n\nDavid Arcila\n\n\n\n\nGame Development Resources\n\n\n\n\nDavid Sherlock\n\n\nhttp://davidsherlock.co.uk\n\n\n\n\nCreating Revision Apps as Text Adventures\n\n\nMore attempts to create revision apps using free resources\n\n\nCreating your own hidden object game\n\n\nSetting up Unity and Fungus to make #appliedgames\n\n\n\n\nLeah Lee\n\n\nhttp://leahlee.studio\n\n\n\n\nFungus Research\n\n\nContributing to Fungus\n\n\n\n\nKonrad Gadzina\n\n\n\n\nVisual scripting w Unity (Polish)", 
            "title": "Community Articles"
        }, 
        {
            "location": "/articles/index.html#community-articles", 
            "text": "If you've created an article or video about Fungus let us know on the forum and we'll add it here.", 
            "title": "Community Articles"
        }, 
        {
            "location": "/articles/index.html#david-arcila", 
            "text": "Game Development Resources", 
            "title": "David Arcila"
        }, 
        {
            "location": "/articles/index.html#david-sherlock", 
            "text": "http://davidsherlock.co.uk   Creating Revision Apps as Text Adventures  More attempts to create revision apps using free resources  Creating your own hidden object game  Setting up Unity and Fungus to make #appliedgames", 
            "title": "David Sherlock"
        }, 
        {
            "location": "/articles/index.html#leah-lee", 
            "text": "http://leahlee.studio   Fungus Research  Contributing to Fungus", 
            "title": "Leah Lee"
        }, 
        {
            "location": "/articles/index.html#konrad-gadzina", 
            "text": "Visual scripting w Unity (Polish)", 
            "title": "Konrad Gadzina"
        }, 
        {
            "location": "/glossary/index.html", 
            "text": "Glossary of terms\n\n\n\n\n\n\n\n\n\n\n\nA\n\n\nAnimator parameter\n: \nSpecial variables that can be used to change what happens in an animation chart, such as when to trigger a chance from one animation state to another.\n\n\n\n\n\nAssets\n:\nThe files on the computer/device, that are used in a game. Asset files include audio clips, video clips, 2D images, 3D models, and text files containing computer program code.\n\n\n\n\n\nAudio tag\n:\nOne of the tags specially allowing the control of Audio from within the Story Text of a Say Command.\n\n\nThere are four audio related tags:\n\n\n{audio=AudioObjectName} Play Audio Once\n{audioloop=AudioObjectName} Play Audio Loop\n{audiopause=AudioObjectName} Pause Audio\n{audiostop=AudioObjectName} Stop Audio\n\n\n\nFor more information see: \nAudio Tags recipe\n\n\n\n\n\nAudiosource\n:\nA special component of Unity objects that can refer to a particular audio clip file, and control its playing / pausing / 3d effects etc.\n\n\n\n\n\n\n\n\n\n\n\nB\n\n\n\n\n\nBlock\n:\nA Fungus Block is a sequence of Commands that have been created inside a Fungus Flowchart.\n\n\n\n\n\nBlock connection\n:\nWhen Commands in one Block cause the execution of Commands in another Block.\n\n\n\n\n\nBoolean variable\n:\nA true/false variable.\n\n\n\n\n\nBranching block\n:\nA Block that is \nnot\n an Event Block, and causes execution of 2 or more other Blocks.\n\n\nNote: Branching Blocks are displayed as an orange polygon in the Flowchart window.\n\n\n\n\n\n\n\nBranching narrative\n:\nWhen choices by the user (via the Menu Command for example) will change what Narrative Commands are executed and displayed to the user.\n\n\n\n\n\nBuild platform\n:\nThe target device for which a Unity game application will be built.\n\n\n\n\n\nBuild settings\n:\nBuild settings include the target platform, screen resolution, input devices, scenes to be included etc.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\nCsharp (C\n)\n:\nA computer programming language developed by Microsoft, similar to Java. C\n is one of the programming languages that can be used to write scripts for controlling Unity games.\n\n\n\n\n\nCharacter\n:\nA Fungus gameObject allowing the personalisation of narrative, allowing characters to have names, special colours for their text on screen, and a range of different named images so character images can be displayed corresponding to the content of their dialog.\n\n\n\n\n\nClickable Sprite\n:\nA 2D image on screen that has been code to do something when clicked with the mouse or selected by the trackpad.\n\n\n\n\n\nCoding / Scripting\n:\nWriting lines of computer code to control execution of a computer program, such as a Unity game (as opposed to using a visual language such as Fungus Flowcharts).\n\n\n\n\n\nCommand\n:\nAn instruction for the Unity game engine to do something, examples are to play or stop a sound, or to display some text to the user in a dialog.\n\n\n\n\n\nCommand category\n:\nTHe Fungus commands are grouped according to what kind of action they will lead to.\n\n\n\n\n\nCommand property panel\n:\nWhen a Block is selected in a Fungus Flowchart, the top-half of the Inspector window will show the properties and list of Commands for that Block. When one of the Commands is selected, that its properties are displayed in the bottom-half of the Inspector window.\n\n\n\n\n\nCondition\n:\nConditions are tests that are either \"TRUE\" or \"FALSE\" at a particular point in time. Different Commands can be defined to be executed depending on the value of a condition test in a Fungus Block.\n\n\n\n\n\nCSV\n:\nComma Separated Variable - a computer file format where the values of rows and columns are recorded, in a form that can be loaded into a spreadsheet..\n\n\n\n\n\nCustom strings\n:\nAs well as the automatically generated rows for each Say, Menu, Command etc., you can also add your own rows to the localisation file using any string id you want. To use these custom strings, you use variable substitution.\n\n\nFor example, say you have a custom string called \"PlayerName\", you can put {$PlayerName} in any Say text to substitute the correct localised value from the localisation file.\n\n\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\nDraggable Sprite\n:\nA 2D image on screen that has been code to do something when clicked-and-dragged with the mouse or trackpad.\n\n\n\n\n\nDragTarget Sprite\n:\nA 2D image that has been defined to execute some action(s) if a Draggable Sprite is dragged and released over it.\n\n\n\n\n\n\n\n\n\n\n\nE\n\n\n\n\n\nEditor\n:\nAn application allowing the editing of game resources. The Unity Editor has multiple windows for viewing / editing properties of files, scene contents, UI dialogs, camera settings etc.\n\n\n\n\n\nEvent Handler\n:\nA Fungus Block or a Unity coded \"method\" that will be executed when a particular \"Event\" occurs. For example when the \"SPACE\" key is pressed the game should respond to the user having executed a spell or fired a gun or whatever.\n\n\n\n\n\nEvent block\n:\nAny Block whose execution is triggered by an Event, such as Game Started or Key Preses.\n\n\nNote: Event Blocks are displayed as rounded blue rectangles in the Flowchart window.\n\n\n\n\n\n\n\nExcel\n:\nA computer spreadsheet application program from Microsoft, part of the MS Office suite.\n\n\nsee the Microsoft website: \nMicrosoft Excel application\n\n\n\n\n\nExecution\n:\nThe running of Commands or statements in a computer script / program. Making the computer do something.\n\n\n\n\n\n\n\n\n\n\n\nF\n\n\n\n\n\nFloat variable\n:\nA variable that stores decimal numbers, such as 5.5, -0.11 etc.\n\n\n\n\n\nFlowchart\n:\nA Fungus Flowchart contains a set of Blocks, each containing Commands to be executed.\n\n\n\n\n\nFlow control\n:\nA general term referring to how a computer decides what to do next. So it is deciding which Fungus Command or Unity code statement to execute next. Typical Flow commands include decision choices such as loops or IF-conditions etc.\n\n\n\n\n\nFlowchart item id\n:\nThe unique number that is created for each Block of a Flowchart. This ID is used fpr serialisation (save and load) purposes, and not usually seen by the developer.\n\n\n\n\n\nFlowchart Localization id\n:\nA special, unique name, used for associating language localization data for each Fungus game project.\n\n\n\n\n\nFlowchart Message\n:\nA Message is basically a piece of text, but one that plays the role of being able to act as a 'trigger event' to cause Blocks to start executing.\n\n\nMessages can be sent (via the \nFlow | Send Message\n Command), either to the current Flowchart, or to \nALL\n Flowcharts. One of the Events that can be defined to start the execution of a Block is if a particular Message has been received by the Flowchart.\n\n\n\n\n\nFlowchart Window\n:\nA special window available in the Unity Editor for editing and working with Fungus Flowcharts and their Blocks.\n\n\n\n\n\n\n\n\n\n\n\nI\n\n\n\n\n\nInteger variable\n:\nA variable that stores whole numbers, such as 100, 2, 0, -2 etc.\n\n\n\n\n\n\n\n\n\n\n\nL\n\n\n\n\n\nLandscape orientation\n:\nAn orientation of an image or computer screen, where the width is greater than the height.\n\n\n\n\n\nLanguage Column\n:\nWhen you first export the localization .csv (Comma-Separated-Variable) file it has 3 columns (Key, Description, Standard).\nWhen you want to add a new language to the file you add a new column for that language. You can use whatever column name you like, though it's typical to use two letter language codes (FR, ES, DE, etc.).\n\n\nThe Set Language command is provided with the name of the column for the language you wish to use in Fungus.\n\n\n\n\n\nLibre Office\n:\nA free and Open Source alternative to Microsoft Office.\n\n\nLean more and download from: \nLibreOffice.org\n\n\n\n\n\nLocalization\n:\nLocalization and Internationalization refer to coding a game in such a way that it can be deployed in a manner supporting playing and interactions in multiple human languages.\n\n\n\n\n\nLogging\n:\nThe  \nScripting | Debug Log\n Command allows the writing ('logging') of messages to the Console window while a scene is running. Logs provide a record of what has happened when the game is running, useful for checking what happened was what was intended, or for debugging (hunting down where errors are located).\n\n\n\n\n\n\n\n\n\n\n\nM\n\n\n\n\n\nMecanim Animation\n:\nA Unity file representing an animation clip or pose. Animators manage the changes or mixing between one Animation clip and another.\n\n\n\n\n\nMecanim Animator\n:\nA Unity state-chart controller, which manages animated gameObjects - deciding when and how quickly objects should 'blend' into a different state or animation.\n\n\n\n\n\nMenu Dialog\n:\nThe UI elements (background / lines / text) that define the visual style of how the Text of Menu Commands is presented to the user.\n\n\n\n\nFungus provides a default Menu Dialog, but custom variations can be defined, for different games / scenes / characters etc.\n\n\n\n\n\n\n\n\n\n\n\nO\n\n\n\n\n\nOrder in layer\n:\nIf multiple objects have been assigned to the same Unity Sorting Layer, then the numeric value of the Order in Layer property determines their visual sorting order (what appears in front of what).\n\n\n\n\n\n\n\n\n\n\n\nP\n\n\n\n\n\nParallax Sprite\n:\nThe use of 2D sprites, moving at different speeds, to give the impression of 3D movement (where sprites for objects meant to be further away from the user move more slowly than objects closer to the game object.\n\n\n\n\n\nPlatform build\n:\nRefers to the device and type of application that the Unity editor will create. Examples are stand alone applications for Windows, Mac OS, iOS phone, Android phone, X-BOX etc.\n\n\n\n\n\nPortrait\n:\nThe Fungus Portrait Command is used to make the game display one of the Character Portrait images on the Stage. A particular image can be selected, and it can be made to move on/off stage.\n\n\n\n\n\nPortrait orientation\n:\nAn orientation of an image or computer screen, where the height is greater than the width.\n\n\n\n\n\nProcedural Sound\n:\nA method of creating sounds using computer algorithms.\n\n\n\n\n\nPrivate / Public variables\n:\nA Private variable as one that can only be accessed by Cmmands in Blocks in that Flowchart. A Public variable is one that can be accessed by Commands in Blocks in other Flowcharts as well as its own one.\n\n\n\n\n\n\n\n\n\n\n\nS\n\n\n\n\n\nSave profile\n:\nThe Save Profile is basically a string that gets prepended to the key used to save \n load variables in PlayerPrefs. This allows you to create  separate save profiles using different names. For example, player 1's save data might use the Save Profile 'Chris', while player 2's data would use the Save Profile 'Matt', and their data can be saved / loaded independently.\n\n\nThe typical workflow would be:\n\n\n\n\n\n\nChoose a suitable value fo the Save Profile (e.g. \"player1\")\n\n\n\n\n\n\nSet Save Profile.\n\n\n\n\n\n\nSave Variable(s).\n\n\n\n\n\n\n\n\n\nSay Dialog\n:\nThe UI elements (background / lines / text) that define the visual style of how the Story Text of Say Commands is presented to the user.\n\n\n\n\nFungus provides a default Say Dialog, but custom variations can be defined, for different games / scenes / characters etc.\n\n\n\n\n\nScenes\n:\nUnity Scenes are like chapters in a book, or \"screens\" in a game, or \"levels\" in a game. They allow the logic of a computer game to be broken into components. The \"gameObjects\" in a scene determine what software components will be created when a Scene starts running (others may be created or deleted once the Scene has started).\n\n\n\n\n\nScreen aspect ratio\n:\nThe relationship of the width of an image or screen to its height. Typical rations include 4:3 ad 16:10.\n\n\n\n\n\nScreen resolution\n:\nThe number of pixels wide and high a window or device supports.\n\n\n\n\n\nSorting layer\n:\nUnity 2D objects are assigned to a \"Sorting Layer\". This allows images/text to be assigned to layers such as Background, Foreground, Middleground, UI (on top of everything) etc.\n\n\n\n\n\nSpine\n:\nSpine is a third-party 2D animation system from \nEsotericSoftware.com\n.\n\n\n\n\n\nSpine Animation\n:\nAnimation clip based on the Spine 2D system, that can be controlled from Fungus Commands (once  the Unity Spine and Fungus Spine add-on packages have been installed).\n\n\n\n\n\nSprites\n:\n2D Images, that may be hidden / revealed. Sprite may be moved through Fungus Commands, or Unity code. Sprites can also be defined to be \"draggable\" by the users computer mouse pointer or mobile device touch gestures.\n\n\n\n\n\nStage\n:\nA Fungus gameObject in the scene, used to define the position and start-end movements of Character Portrait images controlled by Fungus Portrait Commands.\n\n\n\n\n\nStandard block\n:\nA Fungus Block whose execution is \nnot\n triggered by an event (so it is not an Event Block), and which does \nnot\n cause the execution of 2 or more other Blocks (so is \nnot\n a Branching Block).\n\n\nNote: Standard Blocks are displayed as yellow rectangles in the Flowchart window.\n\n\n\n\n\n\n\nStandard Text\n:\nWhen you export the localization file, there is a Standard Text field. This is populated with the text that has been entered into the Say, Menu, etc. text fields in the Unity editor. In normal usage, this field is in the localisation file for reference so localizers know what text needs to be translated. For example, if the project is drafted using English, then the text in Say, Menu Commands etc. would be in English, and in the exported localization file this text would appear in the Standard Text fields.\n\n\nNote, if you use the Set Language command with an empty language string then the values in the Standard Text field will be used when Fungus runs.\n\n\n\n\n\nStory Text Tags\n:\nSpecial instructions that can be embedded inside the Story Text of Say commands. Examples are tags that start/stop playing a sound, or send a message.\n\n\n\n\n\nString ID\n:\nThis is an automatically generated ID code, that is stored in the first column of the localisation file. These IDs are generated automatically when you export the strings using the Localization object.\n\n\nThe ID is needed since every localised text string needs a unique identifying name so that it can be mapped it back to the Say, Menu, etc. command that references it.\n\n\n\n\n\nString variable\n:\nA variable that stores text characters, such as the player's name, or colour of the potion they are carrying.\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\nTag\n:\nSpecial characters that can be inserted into Fungus Say Commands, to control other aspects of the scene, such as the playing of a sound, or the shaking of the camera, or the sending of a message to cause other Blocks to start executing.\n\n\n\n\n\n\n\n\n\n\n\nU\n\n\n\n\n\nUnity\n:\nA game engine and IDE (Interactive Development Environment) - with program code editor, and audio/graphics editing facilities. Able to build applications for deployment to Windows, Mac, Linus, iOS, Android, XBox etc.\n\n\n\n\n\nUnity UI\n:\nThe building of visual interfaces for computer programs deployed by Unity.\n\n\n\n\n\nUsfxr\n:\nA system for generating sound effects from mathematical parameters.\n\n\nBuilt into Fungus and based on the open source project at: \nUsfxr at GitHub\n\n\n\n\n\n\n\n\n\n\n\nV\n\n\n\n\n\nVariable\n:\nA named memory location, from which values can be retrieved at a later date.\n\n\n\n\n\nVariable default value\n:\nA \"default\" value refers to the value given to a variable automatically, if no particular value is specified. In the Variables section at the bottom of the Flowchart window, as well as defining the names and data types of variables, you can also set default values here.\n\n\n\n\n\n\n\nVariables Panel\n:\nThe very bottom section of the Flowchart window is where variables (such as score, playerName, carryingGreenKey etc.) can be defined for use in Fungus Commands.\n\n\n\n\n\nVariable saving\n:\nThe saving of the value of a variable to the devices 'disk'. So when another Unity Scene is loaded, the saved value can be loaded from saved memory. The saved value can also be loaded the next time the game application is executed on a device.\n\n\n\n\n\nVariable substitution\n:\n\n\nThis relates to the use of a tag in the Story Text of a Say Command, whereby the contents of a Variable will be inserted into that part of the text for the Say Command\n\n\n{$VarName} Substitute variable\n\n\n\n\n\nView, Move, Rotate, Scale \n Rectangle tools\n:\nThe core tools offered in the Unity editor for changing basic properties of 2D and 3D objects\n\n\n\n\n\nView\n:\nA Fungus gameObject that helps ensure good visual experience regardless of device aspect ration, and used for camera movements and control by Fungus Commands.\n\n\n\n\n\nVoice over\n:\nA sound clip file containing recorded audio that corresponds to text being displayed on screen.\n\n\n\n\n\n\n\n\n\n\n\nW\n\n\n\n\n\nWebplayer\n:\nA Build option in Unity that creates an application that can play inside web pages that have the Unity Web Player plug-in installed. The need fo the plug-in and web-player option are being replaced by the WebGL Unity build facility.\n\n\n\n\n\nWebGL\n:\n\nWebGL\n is a technology available in modern browsers that allows for interactive, high quality computer graphics within web pages, without the need for any special plug-ins (such as Flash or the Unity Player). It promised to be the future for multimedia web page content and interaction.", 
            "title": "Glossary"
        }, 
        {
            "location": "/glossary/index.html#glossary-of-terms", 
            "text": "", 
            "title": "Glossary of terms"
        }, 
        {
            "location": "/glossary/index.html#a", 
            "text": "Animator parameter : \nSpecial variables that can be used to change what happens in an animation chart, such as when to trigger a chance from one animation state to another.   Assets :\nThe files on the computer/device, that are used in a game. Asset files include audio clips, video clips, 2D images, 3D models, and text files containing computer program code.   Audio tag :\nOne of the tags specially allowing the control of Audio from within the Story Text of a Say Command.  There are four audio related tags:  {audio=AudioObjectName} Play Audio Once\n{audioloop=AudioObjectName} Play Audio Loop\n{audiopause=AudioObjectName} Pause Audio\n{audiostop=AudioObjectName} Stop Audio  For more information see:  Audio Tags recipe   Audiosource :\nA special component of Unity objects that can refer to a particular audio clip file, and control its playing / pausing / 3d effects etc.", 
            "title": "A"
        }, 
        {
            "location": "/glossary/index.html#b", 
            "text": "Block :\nA Fungus Block is a sequence of Commands that have been created inside a Fungus Flowchart.   Block connection :\nWhen Commands in one Block cause the execution of Commands in another Block.   Boolean variable :\nA true/false variable.   Branching block :\nA Block that is  not  an Event Block, and causes execution of 2 or more other Blocks.  Note: Branching Blocks are displayed as an orange polygon in the Flowchart window.    Branching narrative :\nWhen choices by the user (via the Menu Command for example) will change what Narrative Commands are executed and displayed to the user.   Build platform :\nThe target device for which a Unity game application will be built.   Build settings :\nBuild settings include the target platform, screen resolution, input devices, scenes to be included etc.", 
            "title": "B"
        }, 
        {
            "location": "/glossary/index.html#c", 
            "text": "Csharp (C ) :\nA computer programming language developed by Microsoft, similar to Java. C  is one of the programming languages that can be used to write scripts for controlling Unity games.   Character :\nA Fungus gameObject allowing the personalisation of narrative, allowing characters to have names, special colours for their text on screen, and a range of different named images so character images can be displayed corresponding to the content of their dialog.   Clickable Sprite :\nA 2D image on screen that has been code to do something when clicked with the mouse or selected by the trackpad.   Coding / Scripting :\nWriting lines of computer code to control execution of a computer program, such as a Unity game (as opposed to using a visual language such as Fungus Flowcharts).   Command :\nAn instruction for the Unity game engine to do something, examples are to play or stop a sound, or to display some text to the user in a dialog.   Command category :\nTHe Fungus commands are grouped according to what kind of action they will lead to.   Command property panel :\nWhen a Block is selected in a Fungus Flowchart, the top-half of the Inspector window will show the properties and list of Commands for that Block. When one of the Commands is selected, that its properties are displayed in the bottom-half of the Inspector window.   Condition :\nConditions are tests that are either \"TRUE\" or \"FALSE\" at a particular point in time. Different Commands can be defined to be executed depending on the value of a condition test in a Fungus Block.   CSV :\nComma Separated Variable - a computer file format where the values of rows and columns are recorded, in a form that can be loaded into a spreadsheet..   Custom strings :\nAs well as the automatically generated rows for each Say, Menu, Command etc., you can also add your own rows to the localisation file using any string id you want. To use these custom strings, you use variable substitution.  For example, say you have a custom string called \"PlayerName\", you can put {$PlayerName} in any Say text to substitute the correct localised value from the localisation file.", 
            "title": "C"
        }, 
        {
            "location": "/glossary/index.html#d", 
            "text": "Draggable Sprite :\nA 2D image on screen that has been code to do something when clicked-and-dragged with the mouse or trackpad.   DragTarget Sprite :\nA 2D image that has been defined to execute some action(s) if a Draggable Sprite is dragged and released over it.", 
            "title": "D"
        }, 
        {
            "location": "/glossary/index.html#e", 
            "text": "Editor :\nAn application allowing the editing of game resources. The Unity Editor has multiple windows for viewing / editing properties of files, scene contents, UI dialogs, camera settings etc.   Event Handler :\nA Fungus Block or a Unity coded \"method\" that will be executed when a particular \"Event\" occurs. For example when the \"SPACE\" key is pressed the game should respond to the user having executed a spell or fired a gun or whatever.   Event block :\nAny Block whose execution is triggered by an Event, such as Game Started or Key Preses.  Note: Event Blocks are displayed as rounded blue rectangles in the Flowchart window.    Excel :\nA computer spreadsheet application program from Microsoft, part of the MS Office suite.  see the Microsoft website:  Microsoft Excel application   Execution :\nThe running of Commands or statements in a computer script / program. Making the computer do something.", 
            "title": "E"
        }, 
        {
            "location": "/glossary/index.html#f", 
            "text": "Float variable :\nA variable that stores decimal numbers, such as 5.5, -0.11 etc.   Flowchart :\nA Fungus Flowchart contains a set of Blocks, each containing Commands to be executed.   Flow control :\nA general term referring to how a computer decides what to do next. So it is deciding which Fungus Command or Unity code statement to execute next. Typical Flow commands include decision choices such as loops or IF-conditions etc.   Flowchart item id :\nThe unique number that is created for each Block of a Flowchart. This ID is used fpr serialisation (save and load) purposes, and not usually seen by the developer.   Flowchart Localization id :\nA special, unique name, used for associating language localization data for each Fungus game project.   Flowchart Message :\nA Message is basically a piece of text, but one that plays the role of being able to act as a 'trigger event' to cause Blocks to start executing.  Messages can be sent (via the  Flow | Send Message  Command), either to the current Flowchart, or to  ALL  Flowcharts. One of the Events that can be defined to start the execution of a Block is if a particular Message has been received by the Flowchart.   Flowchart Window :\nA special window available in the Unity Editor for editing and working with Fungus Flowcharts and their Blocks.", 
            "title": "F"
        }, 
        {
            "location": "/glossary/index.html#i", 
            "text": "Integer variable :\nA variable that stores whole numbers, such as 100, 2, 0, -2 etc.", 
            "title": "I"
        }, 
        {
            "location": "/glossary/index.html#l", 
            "text": "Landscape orientation :\nAn orientation of an image or computer screen, where the width is greater than the height.   Language Column :\nWhen you first export the localization .csv (Comma-Separated-Variable) file it has 3 columns (Key, Description, Standard).\nWhen you want to add a new language to the file you add a new column for that language. You can use whatever column name you like, though it's typical to use two letter language codes (FR, ES, DE, etc.).  The Set Language command is provided with the name of the column for the language you wish to use in Fungus.   Libre Office :\nA free and Open Source alternative to Microsoft Office.  Lean more and download from:  LibreOffice.org   Localization :\nLocalization and Internationalization refer to coding a game in such a way that it can be deployed in a manner supporting playing and interactions in multiple human languages.   Logging :\nThe   Scripting | Debug Log  Command allows the writing ('logging') of messages to the Console window while a scene is running. Logs provide a record of what has happened when the game is running, useful for checking what happened was what was intended, or for debugging (hunting down where errors are located).", 
            "title": "L"
        }, 
        {
            "location": "/glossary/index.html#m", 
            "text": "Mecanim Animation :\nA Unity file representing an animation clip or pose. Animators manage the changes or mixing between one Animation clip and another.   Mecanim Animator :\nA Unity state-chart controller, which manages animated gameObjects - deciding when and how quickly objects should 'blend' into a different state or animation.   Menu Dialog :\nThe UI elements (background / lines / text) that define the visual style of how the Text of Menu Commands is presented to the user.   Fungus provides a default Menu Dialog, but custom variations can be defined, for different games / scenes / characters etc.", 
            "title": "M"
        }, 
        {
            "location": "/glossary/index.html#o", 
            "text": "Order in layer :\nIf multiple objects have been assigned to the same Unity Sorting Layer, then the numeric value of the Order in Layer property determines their visual sorting order (what appears in front of what).", 
            "title": "O"
        }, 
        {
            "location": "/glossary/index.html#p", 
            "text": "Parallax Sprite :\nThe use of 2D sprites, moving at different speeds, to give the impression of 3D movement (where sprites for objects meant to be further away from the user move more slowly than objects closer to the game object.   Platform build :\nRefers to the device and type of application that the Unity editor will create. Examples are stand alone applications for Windows, Mac OS, iOS phone, Android phone, X-BOX etc.   Portrait :\nThe Fungus Portrait Command is used to make the game display one of the Character Portrait images on the Stage. A particular image can be selected, and it can be made to move on/off stage.   Portrait orientation :\nAn orientation of an image or computer screen, where the height is greater than the width.   Procedural Sound :\nA method of creating sounds using computer algorithms.   Private / Public variables :\nA Private variable as one that can only be accessed by Cmmands in Blocks in that Flowchart. A Public variable is one that can be accessed by Commands in Blocks in other Flowcharts as well as its own one.", 
            "title": "P"
        }, 
        {
            "location": "/glossary/index.html#s", 
            "text": "Save profile :\nThe Save Profile is basically a string that gets prepended to the key used to save   load variables in PlayerPrefs. This allows you to create  separate save profiles using different names. For example, player 1's save data might use the Save Profile 'Chris', while player 2's data would use the Save Profile 'Matt', and their data can be saved / loaded independently.  The typical workflow would be:    Choose a suitable value fo the Save Profile (e.g. \"player1\")    Set Save Profile.    Save Variable(s).     Say Dialog :\nThe UI elements (background / lines / text) that define the visual style of how the Story Text of Say Commands is presented to the user.   Fungus provides a default Say Dialog, but custom variations can be defined, for different games / scenes / characters etc.   Scenes :\nUnity Scenes are like chapters in a book, or \"screens\" in a game, or \"levels\" in a game. They allow the logic of a computer game to be broken into components. The \"gameObjects\" in a scene determine what software components will be created when a Scene starts running (others may be created or deleted once the Scene has started).   Screen aspect ratio :\nThe relationship of the width of an image or screen to its height. Typical rations include 4:3 ad 16:10.   Screen resolution :\nThe number of pixels wide and high a window or device supports.   Sorting layer :\nUnity 2D objects are assigned to a \"Sorting Layer\". This allows images/text to be assigned to layers such as Background, Foreground, Middleground, UI (on top of everything) etc.   Spine :\nSpine is a third-party 2D animation system from  EsotericSoftware.com .   Spine Animation :\nAnimation clip based on the Spine 2D system, that can be controlled from Fungus Commands (once  the Unity Spine and Fungus Spine add-on packages have been installed).   Sprites :\n2D Images, that may be hidden / revealed. Sprite may be moved through Fungus Commands, or Unity code. Sprites can also be defined to be \"draggable\" by the users computer mouse pointer or mobile device touch gestures.   Stage :\nA Fungus gameObject in the scene, used to define the position and start-end movements of Character Portrait images controlled by Fungus Portrait Commands.   Standard block :\nA Fungus Block whose execution is  not  triggered by an event (so it is not an Event Block), and which does  not  cause the execution of 2 or more other Blocks (so is  not  a Branching Block).  Note: Standard Blocks are displayed as yellow rectangles in the Flowchart window.    Standard Text :\nWhen you export the localization file, there is a Standard Text field. This is populated with the text that has been entered into the Say, Menu, etc. text fields in the Unity editor. In normal usage, this field is in the localisation file for reference so localizers know what text needs to be translated. For example, if the project is drafted using English, then the text in Say, Menu Commands etc. would be in English, and in the exported localization file this text would appear in the Standard Text fields.  Note, if you use the Set Language command with an empty language string then the values in the Standard Text field will be used when Fungus runs.   Story Text Tags :\nSpecial instructions that can be embedded inside the Story Text of Say commands. Examples are tags that start/stop playing a sound, or send a message.   String ID :\nThis is an automatically generated ID code, that is stored in the first column of the localisation file. These IDs are generated automatically when you export the strings using the Localization object.  The ID is needed since every localised text string needs a unique identifying name so that it can be mapped it back to the Say, Menu, etc. command that references it.   String variable :\nA variable that stores text characters, such as the player's name, or colour of the potion they are carrying.", 
            "title": "S"
        }, 
        {
            "location": "/glossary/index.html#t", 
            "text": "Tag :\nSpecial characters that can be inserted into Fungus Say Commands, to control other aspects of the scene, such as the playing of a sound, or the shaking of the camera, or the sending of a message to cause other Blocks to start executing.", 
            "title": "T"
        }, 
        {
            "location": "/glossary/index.html#u", 
            "text": "Unity :\nA game engine and IDE (Interactive Development Environment) - with program code editor, and audio/graphics editing facilities. Able to build applications for deployment to Windows, Mac, Linus, iOS, Android, XBox etc.   Unity UI :\nThe building of visual interfaces for computer programs deployed by Unity.   Usfxr :\nA system for generating sound effects from mathematical parameters.  Built into Fungus and based on the open source project at:  Usfxr at GitHub", 
            "title": "U"
        }, 
        {
            "location": "/glossary/index.html#v", 
            "text": "Variable :\nA named memory location, from which values can be retrieved at a later date.   Variable default value :\nA \"default\" value refers to the value given to a variable automatically, if no particular value is specified. In the Variables section at the bottom of the Flowchart window, as well as defining the names and data types of variables, you can also set default values here.    Variables Panel :\nThe very bottom section of the Flowchart window is where variables (such as score, playerName, carryingGreenKey etc.) can be defined for use in Fungus Commands.   Variable saving :\nThe saving of the value of a variable to the devices 'disk'. So when another Unity Scene is loaded, the saved value can be loaded from saved memory. The saved value can also be loaded the next time the game application is executed on a device.   Variable substitution :  This relates to the use of a tag in the Story Text of a Say Command, whereby the contents of a Variable will be inserted into that part of the text for the Say Command  {$VarName} Substitute variable   View, Move, Rotate, Scale   Rectangle tools :\nThe core tools offered in the Unity editor for changing basic properties of 2D and 3D objects   View :\nA Fungus gameObject that helps ensure good visual experience regardless of device aspect ration, and used for camera movements and control by Fungus Commands.   Voice over :\nA sound clip file containing recorded audio that corresponds to text being displayed on screen.", 
            "title": "V"
        }, 
        {
            "location": "/glossary/index.html#w", 
            "text": "Webplayer :\nA Build option in Unity that creates an application that can play inside web pages that have the Unity Web Player plug-in installed. The need fo the plug-in and web-player option are being replaced by the WebGL Unity build facility.   WebGL : WebGL  is a technology available in modern browsers that allows for interactive, high quality computer graphics within web pages, without the need for any special plug-ins (such as Flash or the Unity Player). It promised to be the future for multimedia web page content and interaction.", 
            "title": "W"
        }, 
        {
            "location": "/faq/index.html", 
            "text": "Frequently Asked Questions\n\n\nWhat is Fungus ?\n\n\nFungus is a free open source tool for creating storytelling games, with a strong focus on accessibility for novice game developers. Users all over the world are now using it to create a wonderfully diverse range of storytelling games.\n\n\nWho makes Fungus ?\n\n\nFungus is developed by \nSnozbot\n, a small independent games company. Chris Gregan is the main developer of Fungus.\n\n\nWhere do I get Fungus ?\n\n\nFungus is available on the \nUnity Asset Store\n and in the download section of this website.\n\n\nIs Fungus really free to use?\n\n\nYes. Fungus has an Open Source M.I.T. license. You can use Fungus with any version of the Unity game engine, including the freely available personal edition.\n\n\nCan I sell the apps I make with Fungus ?\n\n\nYes. We do not charge a license fee.\n\n\nWhat platforms does Fungus support ?\n\n\nFungus runs on any platform supported by the Unity game engine. See here for a list of supported platforms.\n\n\nDo I need to be a programmer to use Fungus ?\n\n\nNo. Fungus can be used to make a variety of story-driven games with no coding required.\n\n\nIs Fungus useful for programmers ?\n\n\nYes. Fungus provides an easy way to add visual novel features to any Unity game. It is also possible to extend Fungus to customise the workflow for your team. Checkout the documentation and tutorials for more information.\n\n\nWhere can I learn more about Fungus ?\n\n\nWe provide extensive tutorials and documentation on our website here. There is also a comprehensive online training course suitable for beginners at Udemy.\n\n\nI've made something cool with Fungus. Wanna see?\n\n\nMost definitely! Please tweet @gofungus and/or post an item in the announcements section of our forum.\n\n\nHow can I upload my Fungus game for others to see?\n\n\nAfter creating a build, you can use a hosting service such as \nitch.io\n, \ngamejolt.com\n or \nnewgrounds.com\n\n\nHow can I suggest new features for Fungus ?\n\n\nPlease use the forum to request new features. You can also checkout our github issues list to see what we have planned.\n\n\nHow do I report a bug in Fungus?\n\n\nPlease use the forum to report bugs.\n\n\nHow long will I have to wait for a bug-fix ?\n\n\nIf a bug is critical and we can't offer a sensible workaround, we will try to fix it as soon as possible. Otherwise, we will aim to fix the issue in the next release.\n\n\nCan I get my hands on beta versions of Fungus ?\n\n\nThe very latest version is always available at our \ngithub repository\n\n\nHow can I contribute to Fungus?\n\n\nThere are lots of ways to help the Fungus community to grow\n\n\n\n\nAnswer questions and post tips on the forum\n\n\nContribute code either via a Github pull request or post code snippets in the forums.\n\n\nImprove the documentation by editing the \nfungus-site repo\n and send in a pull request.\n\n\nLet us know on the forum if you've made a game with Fungus so we can add it to the site.\n\n\nIf you write an article, blog post, podcast, etc. about Fungus send it in and we'll add it to the \ncommunity articles\n section.\n\n\n\n\nAre you planning to integrate Fungus into other game engines ?\n\n\nNot currently. We're sticking with Unity for the foreseeable future.", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/index.html#frequently-asked-questions", 
            "text": "", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/index.html#what-is-fungus", 
            "text": "Fungus is a free open source tool for creating storytelling games, with a strong focus on accessibility for novice game developers. Users all over the world are now using it to create a wonderfully diverse range of storytelling games.", 
            "title": "What is Fungus ?"
        }, 
        {
            "location": "/faq/index.html#who-makes-fungus", 
            "text": "Fungus is developed by  Snozbot , a small independent games company. Chris Gregan is the main developer of Fungus.", 
            "title": "Who makes Fungus ?"
        }, 
        {
            "location": "/faq/index.html#where-do-i-get-fungus", 
            "text": "Fungus is available on the  Unity Asset Store  and in the download section of this website.", 
            "title": "Where do I get Fungus ?"
        }, 
        {
            "location": "/faq/index.html#is-fungus-really-free-to-use", 
            "text": "Yes. Fungus has an Open Source M.I.T. license. You can use Fungus with any version of the Unity game engine, including the freely available personal edition.", 
            "title": "Is Fungus really free to use?"
        }, 
        {
            "location": "/faq/index.html#can-i-sell-the-apps-i-make-with-fungus", 
            "text": "Yes. We do not charge a license fee.", 
            "title": "Can I sell the apps I make with Fungus ?"
        }, 
        {
            "location": "/faq/index.html#what-platforms-does-fungus-support", 
            "text": "Fungus runs on any platform supported by the Unity game engine. See here for a list of supported platforms.", 
            "title": "What platforms does Fungus support ?"
        }, 
        {
            "location": "/faq/index.html#do-i-need-to-be-a-programmer-to-use-fungus", 
            "text": "No. Fungus can be used to make a variety of story-driven games with no coding required.", 
            "title": "Do I need to be a programmer to use Fungus ?"
        }, 
        {
            "location": "/faq/index.html#is-fungus-useful-for-programmers", 
            "text": "Yes. Fungus provides an easy way to add visual novel features to any Unity game. It is also possible to extend Fungus to customise the workflow for your team. Checkout the documentation and tutorials for more information.", 
            "title": "Is Fungus useful for programmers ?"
        }, 
        {
            "location": "/faq/index.html#where-can-i-learn-more-about-fungus", 
            "text": "We provide extensive tutorials and documentation on our website here. There is also a comprehensive online training course suitable for beginners at Udemy.", 
            "title": "Where can I learn more about Fungus ?"
        }, 
        {
            "location": "/faq/index.html#ive-made-something-cool-with-fungus-wanna-see", 
            "text": "Most definitely! Please tweet @gofungus and/or post an item in the announcements section of our forum.", 
            "title": "I've made something cool with Fungus. Wanna see?"
        }, 
        {
            "location": "/faq/index.html#how-can-i-upload-my-fungus-game-for-others-to-see", 
            "text": "After creating a build, you can use a hosting service such as  itch.io ,  gamejolt.com  or  newgrounds.com", 
            "title": "How can I upload my Fungus game for others to see?"
        }, 
        {
            "location": "/faq/index.html#how-can-i-suggest-new-features-for-fungus", 
            "text": "Please use the forum to request new features. You can also checkout our github issues list to see what we have planned.", 
            "title": "How can I suggest new features for Fungus ?"
        }, 
        {
            "location": "/faq/index.html#how-do-i-report-a-bug-in-fungus", 
            "text": "Please use the forum to report bugs.", 
            "title": "How do I report a bug in Fungus?"
        }, 
        {
            "location": "/faq/index.html#how-long-will-i-have-to-wait-for-a-bug-fix", 
            "text": "If a bug is critical and we can't offer a sensible workaround, we will try to fix it as soon as possible. Otherwise, we will aim to fix the issue in the next release.", 
            "title": "How long will I have to wait for a bug-fix ?"
        }, 
        {
            "location": "/faq/index.html#can-i-get-my-hands-on-beta-versions-of-fungus", 
            "text": "The very latest version is always available at our  github repository", 
            "title": "Can I get my hands on beta versions of Fungus ?"
        }, 
        {
            "location": "/faq/index.html#how-can-i-contribute-to-fungus", 
            "text": "There are lots of ways to help the Fungus community to grow   Answer questions and post tips on the forum  Contribute code either via a Github pull request or post code snippets in the forums.  Improve the documentation by editing the  fungus-site repo  and send in a pull request.  Let us know on the forum if you've made a game with Fungus so we can add it to the site.  If you write an article, blog post, podcast, etc. about Fungus send it in and we'll add it to the  community articles  section.", 
            "title": "How can I contribute to Fungus?"
        }, 
        {
            "location": "/faq/index.html#are-you-planning-to-integrate-fungus-into-other-game-engines", 
            "text": "Not currently. We're sticking with Unity for the foreseeable future.", 
            "title": "Are you planning to integrate Fungus into other game engines ?"
        }, 
        {
            "location": "/commands/animation_commands/index.html", 
            "text": "Play Anim State\n\n\nPlays a state of an animator according to the state name\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAnimator\n\n\nFungus.AnimatorData\n\n\nReference to an Animator component in a game object\n\n\n\n\n\n\nState Name\n\n\nFungus.StringData\n\n\nName of the state you want to play\n\n\n\n\n\n\nLayer\n\n\nFungus.IntegerData\n\n\nLayer to play animation on\n\n\n\n\n\n\nTime\n\n\nFungus.FloatData\n\n\nStart time of animation\n\n\n\n\n\n\n\n\nReset Anim Trigger\n\n\nResets a trigger parameter on an Animator component.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_animator\n\n\nFungus.AnimatorData\n\n\nReference to an Animator component in a game object\n\n\n\n\n\n\n_parameter Name\n\n\nFungus.StringData\n\n\nName of the trigger Animator parameter that will be reset\n\n\n\n\n\n\n\n\nSet Anim Bool\n\n\nSets a boolean parameter on an Animator component to control a Unity animation\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_animator\n\n\nFungus.AnimatorData\n\n\nReference to an Animator component in a game object\n\n\n\n\n\n\n_parameter Name\n\n\nFungus.StringData\n\n\nName of the boolean Animator parameter that will have its value changed\n\n\n\n\n\n\nValue\n\n\nFungus.BooleanData\n\n\nThe boolean value to set the parameter to\n\n\n\n\n\n\n\n\nSet Anim Float\n\n\nSets a float parameter on an Animator component to control a Unity animation\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_animator\n\n\nFungus.AnimatorData\n\n\nReference to an Animator component in a game object\n\n\n\n\n\n\n_parameter Name\n\n\nFungus.StringData\n\n\nName of the float Animator parameter that will have its value changed\n\n\n\n\n\n\nValue\n\n\nFungus.FloatData\n\n\nThe float value to set the parameter to\n\n\n\n\n\n\n\n\nSet Anim Integer\n\n\nSets an integer parameter on an Animator component to control a Unity animation\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_animator\n\n\nFungus.AnimatorData\n\n\nReference to an Animator component in a game object\n\n\n\n\n\n\n_parameter Name\n\n\nFungus.StringData\n\n\nName of the integer Animator parameter that will have its value changed\n\n\n\n\n\n\nValue\n\n\nFungus.IntegerData\n\n\nThe integer value to set the parameter to\n\n\n\n\n\n\n\n\nSet Anim Trigger\n\n\nSets a trigger parameter on an Animator component to control a Unity animation\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_animator\n\n\nFungus.AnimatorData\n\n\nReference to an Animator component in a game object\n\n\n\n\n\n\n_parameter Name\n\n\nFungus.StringData\n\n\nName of the trigger Animator parameter that will have its value changed", 
            "title": "Animation Commands"
        }, 
        {
            "location": "/commands/animation_commands/index.html#play-anim-state", 
            "text": "Plays a state of an animator according to the state name     Property  Type  Description      Animator  Fungus.AnimatorData  Reference to an Animator component in a game object    State Name  Fungus.StringData  Name of the state you want to play    Layer  Fungus.IntegerData  Layer to play animation on    Time  Fungus.FloatData  Start time of animation", 
            "title": "Play Anim State"
        }, 
        {
            "location": "/commands/animation_commands/index.html#reset-anim-trigger", 
            "text": "Resets a trigger parameter on an Animator component.     Property  Type  Description      _animator  Fungus.AnimatorData  Reference to an Animator component in a game object    _parameter Name  Fungus.StringData  Name of the trigger Animator parameter that will be reset", 
            "title": "Reset Anim Trigger"
        }, 
        {
            "location": "/commands/animation_commands/index.html#set-anim-bool", 
            "text": "Sets a boolean parameter on an Animator component to control a Unity animation     Property  Type  Description      _animator  Fungus.AnimatorData  Reference to an Animator component in a game object    _parameter Name  Fungus.StringData  Name of the boolean Animator parameter that will have its value changed    Value  Fungus.BooleanData  The boolean value to set the parameter to", 
            "title": "Set Anim Bool"
        }, 
        {
            "location": "/commands/animation_commands/index.html#set-anim-float", 
            "text": "Sets a float parameter on an Animator component to control a Unity animation     Property  Type  Description      _animator  Fungus.AnimatorData  Reference to an Animator component in a game object    _parameter Name  Fungus.StringData  Name of the float Animator parameter that will have its value changed    Value  Fungus.FloatData  The float value to set the parameter to", 
            "title": "Set Anim Float"
        }, 
        {
            "location": "/commands/animation_commands/index.html#set-anim-integer", 
            "text": "Sets an integer parameter on an Animator component to control a Unity animation     Property  Type  Description      _animator  Fungus.AnimatorData  Reference to an Animator component in a game object    _parameter Name  Fungus.StringData  Name of the integer Animator parameter that will have its value changed    Value  Fungus.IntegerData  The integer value to set the parameter to", 
            "title": "Set Anim Integer"
        }, 
        {
            "location": "/commands/animation_commands/index.html#set-anim-trigger", 
            "text": "Sets a trigger parameter on an Animator component to control a Unity animation     Property  Type  Description      _animator  Fungus.AnimatorData  Reference to an Animator component in a game object    _parameter Name  Fungus.StringData  Name of the trigger Animator parameter that will have its value changed", 
            "title": "Set Anim Trigger"
        }, 
        {
            "location": "/commands/audio_commands/index.html", 
            "text": "Control Audio\n\n\nPlays, loops, or stops an audiosource. Any AudioSources with the same tag as the target Audio Source will automatically be stoped.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nControl\n\n\nFungus.ControlAudio+controlType\n\n\nWhat to do to audio\n\n\n\n\n\n\n_audio Source\n\n\nFungus.AudioSourceData\n\n\nAudio clip to play\n\n\n\n\n\n\nStart Volume\n\n\nSystem.Single\n\n\nStart audio at this volume\n\n\n\n\n\n\nEnd Volume\n\n\nSystem.Single\n\n\nEnd audio at this volume\n\n\n\n\n\n\nFade Duration\n\n\nSystem.Single\n\n\nTime to fade between current volume level and target volume level.\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until this command has finished before executing the next command.\n\n\n\n\n\n\n\n\nPlay Music\n\n\nPlays looping game music. If any game music is already playing, it is stopped. Game music will continue playing across scene loads.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMusic Clip\n\n\nUnityEngine.AudioClip\n\n\nMusic sound clip to play\n\n\n\n\n\n\nAt Time\n\n\nSystem.Single\n\n\nTime to begin playing in seconds. If the audio file is compressed, the time index may be inaccurate.\n\n\n\n\n\n\nLoop\n\n\nSystem.Boolean\n\n\nThe music will start playing again at end.\n\n\n\n\n\n\nFade Duration\n\n\nSystem.Single\n\n\nLength of time to fade out previous playing music.\n\n\n\n\n\n\n\n\nPlay Sound\n\n\nPlays a once-off sound effect. Multiple sound effects can be played at the same time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSound Clip\n\n\nUnityEngine.AudioClip\n\n\nSound effect clip to play\n\n\n\n\n\n\nVolume\n\n\nSystem.Single\n\n\nVolume level of the sound effect\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the sound has finished playing before continuing execution.\n\n\n\n\n\n\n\n\nPlay Usfxr Sound\n\n\nPlays a usfxr synth sound. Use the usfxr editor [Tools \n Fungus \n Utilities \n Generate usfxr Sound Effects] to create the SettingsString. Set a ParentTransform if using positional sound. See https://github.com/zeh/usfxr for more information about usfxr.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nParent Transform\n\n\nUnityEngine.Transform\n\n\nTransform to use for positional audio\n\n\n\n\n\n\n_ Settings String\n\n\nFungus.StringDataMulti\n\n\nSettings string which describes the audio\n\n\n\n\n\n\nWait Duration\n\n\nSystem.Single\n\n\nTime to wait before executing the next command\n\n\n\n\n\n\n\n\nSet Audio Pitch\n\n\nSets the global pitch level for audio played with Play Music and Play Sound commands.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPitch\n\n\nSystem.Single\n\n\nGlobal pitch level for audio played using the Play Music and Play Sound commands\n\n\n\n\n\n\nFade Duration\n\n\nSystem.Single\n\n\nTime to fade between current pitch level and target pitch level.\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the pitch change has finished before executing next command\n\n\n\n\n\n\n\n\nSet Audio Volume\n\n\nSets the global volume level for audio played with Play Music and Play Sound commands.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVolume\n\n\nSystem.Single\n\n\nGlobal volume level for audio played using Play Music and Play Sound\n\n\n\n\n\n\nFade Duration\n\n\nSystem.Single\n\n\nTime to fade between current volume level and target volume level.\n\n\n\n\n\n\n\n\nStop Music\n\n\nStops the currently playing game music.", 
            "title": "Audio Commands"
        }, 
        {
            "location": "/commands/audio_commands/index.html#control-audio", 
            "text": "Plays, loops, or stops an audiosource. Any AudioSources with the same tag as the target Audio Source will automatically be stoped.     Property  Type  Description      Control  Fungus.ControlAudio+controlType  What to do to audio    _audio Source  Fungus.AudioSourceData  Audio clip to play    Start Volume  System.Single  Start audio at this volume    End Volume  System.Single  End audio at this volume    Fade Duration  System.Single  Time to fade between current volume level and target volume level.    Wait Until Finished  System.Boolean  Wait until this command has finished before executing the next command.", 
            "title": "Control Audio"
        }, 
        {
            "location": "/commands/audio_commands/index.html#play-music", 
            "text": "Plays looping game music. If any game music is already playing, it is stopped. Game music will continue playing across scene loads.     Property  Type  Description      Music Clip  UnityEngine.AudioClip  Music sound clip to play    At Time  System.Single  Time to begin playing in seconds. If the audio file is compressed, the time index may be inaccurate.    Loop  System.Boolean  The music will start playing again at end.    Fade Duration  System.Single  Length of time to fade out previous playing music.", 
            "title": "Play Music"
        }, 
        {
            "location": "/commands/audio_commands/index.html#play-sound", 
            "text": "Plays a once-off sound effect. Multiple sound effects can be played at the same time.     Property  Type  Description      Sound Clip  UnityEngine.AudioClip  Sound effect clip to play    Volume  System.Single  Volume level of the sound effect    Wait Until Finished  System.Boolean  Wait until the sound has finished playing before continuing execution.", 
            "title": "Play Sound"
        }, 
        {
            "location": "/commands/audio_commands/index.html#play-usfxr-sound", 
            "text": "Plays a usfxr synth sound. Use the usfxr editor [Tools   Fungus   Utilities   Generate usfxr Sound Effects] to create the SettingsString. Set a ParentTransform if using positional sound. See https://github.com/zeh/usfxr for more information about usfxr.     Property  Type  Description      Parent Transform  UnityEngine.Transform  Transform to use for positional audio    _ Settings String  Fungus.StringDataMulti  Settings string which describes the audio    Wait Duration  System.Single  Time to wait before executing the next command", 
            "title": "Play Usfxr Sound"
        }, 
        {
            "location": "/commands/audio_commands/index.html#set-audio-pitch", 
            "text": "Sets the global pitch level for audio played with Play Music and Play Sound commands.     Property  Type  Description      Pitch  System.Single  Global pitch level for audio played using the Play Music and Play Sound commands    Fade Duration  System.Single  Time to fade between current pitch level and target pitch level.    Wait Until Finished  System.Boolean  Wait until the pitch change has finished before executing next command", 
            "title": "Set Audio Pitch"
        }, 
        {
            "location": "/commands/audio_commands/index.html#set-audio-volume", 
            "text": "Sets the global volume level for audio played with Play Music and Play Sound commands.     Property  Type  Description      Volume  System.Single  Global volume level for audio played using Play Music and Play Sound    Fade Duration  System.Single  Time to fade between current volume level and target volume level.", 
            "title": "Set Audio Volume"
        }, 
        {
            "location": "/commands/audio_commands/index.html#stop-music", 
            "text": "Stops the currently playing game music.", 
            "title": "Stop Music"
        }, 
        {
            "location": "/commands/camera_commands/index.html", 
            "text": "Fade Screen\n\n\nDraws a fullscreen texture over the scene to give a fade effect. Setting Target Alpha to 1 will obscure the screen, alpha 0 will reveal the screen. If no Fade Texture is provided then a default flat color texture is used.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDuration\n\n\nSystem.Single\n\n\nTime for fade effect to complete\n\n\n\n\n\n\nTarget Alpha\n\n\nSystem.Single\n\n\nCurrent target alpha transparency value. The fade gradually adjusts the alpha to approach this target value.\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the fade has finished before executing next command\n\n\n\n\n\n\nFade Color\n\n\nUnityEngine.Color\n\n\nColor to render fullscreen fade texture with when screen is obscured.\n\n\n\n\n\n\nFade Texture\n\n\nUnityEngine.Texture2D\n\n\nOptional texture to use when rendering the fullscreen fade effect.\n\n\n\n\n\n\n\n\nFade To View\n\n\nFades the camera out and in again at a position specified by a View object.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDuration\n\n\nSystem.Single\n\n\nTime for fade effect to complete\n\n\n\n\n\n\nFade Out\n\n\nSystem.Boolean\n\n\nFade from fully visible to opaque at start of fade\n\n\n\n\n\n\nTarget View\n\n\nFungus.View\n\n\nView to transition to when Fade is complete\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the fade has finished before executing next command\n\n\n\n\n\n\nFade Color\n\n\nUnityEngine.Color\n\n\nColor to render fullscreen fade texture with when screen is obscured.\n\n\n\n\n\n\nFade Texture\n\n\nUnityEngine.Texture2D\n\n\nOptional texture to use when rendering the fullscreen fade effect.\n\n\n\n\n\n\nTarget Camera\n\n\nUnityEngine.Camera\n\n\nCamera to use for the fade. Will use main camera if set to none.\n\n\n\n\n\n\n\n\nFullscreen\n\n\nSets the application to fullscreen, windowed or toggles the current state.\n\n\nMove To View\n\n\nMoves the camera to a location specified by a View object.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDuration\n\n\nSystem.Single\n\n\nTime for move effect to complete\n\n\n\n\n\n\nTarget View\n\n\nFungus.View\n\n\nView to transition to when move is complete\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the fade has finished before executing next command\n\n\n\n\n\n\nTarget Camera\n\n\nUnityEngine.Camera\n\n\nCamera to use for the pan. Will use main camera if set to none.\n\n\n\n\n\n\n\n\nShake Camera\n\n\nApplies a camera shake effect to the main camera.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDuration\n\n\nSystem.Single\n\n\nTime for camera shake effect to complete\n\n\n\n\n\n\nAmount\n\n\nUnityEngine.Vector2\n\n\nMagnitude of shake effect in x \n y axes\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the shake effect has finished before executing next command\n\n\n\n\n\n\n\n\nStart Swipe\n\n\nActivates swipe panning mode where the player can pan the camera within the area between viewA \n viewB.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nView A\n\n\nFungus.View\n\n\nDefines one extreme of the scrollable area that the player can pan around\n\n\n\n\n\n\nView B\n\n\nFungus.View\n\n\nDefines one extreme of the scrollable area that the player can pan around\n\n\n\n\n\n\nDuration\n\n\nSystem.Single\n\n\nTime to move the camera to a valid starting position between the two views\n\n\n\n\n\n\nSpeed Multiplier\n\n\nSystem.Single\n\n\nMultiplier factor for speed of swipe pan\n\n\n\n\n\n\nTarget Camera\n\n\nUnityEngine.Camera\n\n\nCamera to use for the pan. Will use main camera if set to none.\n\n\n\n\n\n\n\n\nStop Swipe\n\n\nDeactivates swipe panning mode.", 
            "title": "Camera Commands"
        }, 
        {
            "location": "/commands/camera_commands/index.html#fade-screen", 
            "text": "Draws a fullscreen texture over the scene to give a fade effect. Setting Target Alpha to 1 will obscure the screen, alpha 0 will reveal the screen. If no Fade Texture is provided then a default flat color texture is used.     Property  Type  Description      Duration  System.Single  Time for fade effect to complete    Target Alpha  System.Single  Current target alpha transparency value. The fade gradually adjusts the alpha to approach this target value.    Wait Until Finished  System.Boolean  Wait until the fade has finished before executing next command    Fade Color  UnityEngine.Color  Color to render fullscreen fade texture with when screen is obscured.    Fade Texture  UnityEngine.Texture2D  Optional texture to use when rendering the fullscreen fade effect.", 
            "title": "Fade Screen"
        }, 
        {
            "location": "/commands/camera_commands/index.html#fade-to-view", 
            "text": "Fades the camera out and in again at a position specified by a View object.     Property  Type  Description      Duration  System.Single  Time for fade effect to complete    Fade Out  System.Boolean  Fade from fully visible to opaque at start of fade    Target View  Fungus.View  View to transition to when Fade is complete    Wait Until Finished  System.Boolean  Wait until the fade has finished before executing next command    Fade Color  UnityEngine.Color  Color to render fullscreen fade texture with when screen is obscured.    Fade Texture  UnityEngine.Texture2D  Optional texture to use when rendering the fullscreen fade effect.    Target Camera  UnityEngine.Camera  Camera to use for the fade. Will use main camera if set to none.", 
            "title": "Fade To View"
        }, 
        {
            "location": "/commands/camera_commands/index.html#fullscreen", 
            "text": "Sets the application to fullscreen, windowed or toggles the current state.", 
            "title": "Fullscreen"
        }, 
        {
            "location": "/commands/camera_commands/index.html#move-to-view", 
            "text": "Moves the camera to a location specified by a View object.     Property  Type  Description      Duration  System.Single  Time for move effect to complete    Target View  Fungus.View  View to transition to when move is complete    Wait Until Finished  System.Boolean  Wait until the fade has finished before executing next command    Target Camera  UnityEngine.Camera  Camera to use for the pan. Will use main camera if set to none.", 
            "title": "Move To View"
        }, 
        {
            "location": "/commands/camera_commands/index.html#shake-camera", 
            "text": "Applies a camera shake effect to the main camera.     Property  Type  Description      Duration  System.Single  Time for camera shake effect to complete    Amount  UnityEngine.Vector2  Magnitude of shake effect in x   y axes    Wait Until Finished  System.Boolean  Wait until the shake effect has finished before executing next command", 
            "title": "Shake Camera"
        }, 
        {
            "location": "/commands/camera_commands/index.html#start-swipe", 
            "text": "Activates swipe panning mode where the player can pan the camera within the area between viewA   viewB.     Property  Type  Description      View A  Fungus.View  Defines one extreme of the scrollable area that the player can pan around    View B  Fungus.View  Defines one extreme of the scrollable area that the player can pan around    Duration  System.Single  Time to move the camera to a valid starting position between the two views    Speed Multiplier  System.Single  Multiplier factor for speed of swipe pan    Target Camera  UnityEngine.Camera  Camera to use for the pan. Will use main camera if set to none.", 
            "title": "Start Swipe"
        }, 
        {
            "location": "/commands/camera_commands/index.html#stop-swipe", 
            "text": "Deactivates swipe panning mode.", 
            "title": "Stop Swipe"
        }, 
        {
            "location": "/commands/flow_commands/index.html", 
            "text": "Break\n\n\nForce a loop to terminate immediately.\n\n\nCall\n\n\nExecute another block in the same Flowchart as the command, or in a different Flowchart.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTarget Flowchart\n\n\nFungus.Flowchart\n\n\nFlowchart which contains the block to execute. If none is specified then the current Flowchart is used.\n\n\n\n\n\n\nTarget Block\n\n\nFungus.Block\n\n\nBlock to start executing\n\n\n\n\n\n\nCall Mode\n\n\nFungus.Call+CallMode\n\n\nSelect if the calling block should stop or continue executing commands, or wait until the called block finishes.\n\n\n\n\n\n\n\n\nElse\n\n\nMarks the start of a command block to be executed when the preceding If statement is False.\n\n\nElse If\n\n\nMarks the start of a command block to be executed when the preceding If statement is False and the test expression is true.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVariable\n\n\nFungus.Variable\n\n\nVariable to use in expression\n\n\n\n\n\n\nBoolean Data\n\n\nFungus.BooleanData\n\n\nBoolean value to compare against\n\n\n\n\n\n\nInteger Data\n\n\nFungus.IntegerData\n\n\nInteger value to compare against\n\n\n\n\n\n\nFloat Data\n\n\nFungus.FloatData\n\n\nFloat value to compare against\n\n\n\n\n\n\nString Data\n\n\nFungus.StringDataMulti\n\n\nString value to compare against\n\n\n\n\n\n\nCompare Operator\n\n\nFungus.CompareOperator\n\n\nThe type of comparison to be performed\n\n\n\n\n\n\n\n\nEnd\n\n\nMarks the end of a conditional block.\n\n\nIf\n\n\nIf the test expression is true, execute the following command block.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVariable\n\n\nFungus.Variable\n\n\nVariable to use in expression\n\n\n\n\n\n\nBoolean Data\n\n\nFungus.BooleanData\n\n\nBoolean value to compare against\n\n\n\n\n\n\nInteger Data\n\n\nFungus.IntegerData\n\n\nInteger value to compare against\n\n\n\n\n\n\nFloat Data\n\n\nFungus.FloatData\n\n\nFloat value to compare against\n\n\n\n\n\n\nString Data\n\n\nFungus.StringDataMulti\n\n\nString value to compare against\n\n\n\n\n\n\nCompare Operator\n\n\nFungus.CompareOperator\n\n\nThe type of comparison to be performed\n\n\n\n\n\n\n\n\nJump\n\n\nMove execution to a specific Label command\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTarget Label\n\n\nFungus.Label\n\n\nLabel to jump to\n\n\n\n\n\n\n\n\nLabel\n\n\nMarks a position in the command list for execution to jump to.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nSystem.String\n\n\nDisplay name for the label\n\n\n\n\n\n\n\n\nLoad Scene\n\n\nLoads a new Unity scene and displays an optional loading image. This is useful for splitting a large game across multiple scene files to reduce peak memory usage. Previously loaded assets will be released before loading the scene to free up memory.The scene to be loaded must be added to the scene list in Build Settings.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_scene Name\n\n\nFungus.StringData\n\n\nName of the scene to load. The scene must also be added to the build settings.\n\n\n\n\n\n\nLoading Image\n\n\nUnityEngine.Texture2D\n\n\nImage to display while loading the scene\n\n\n\n\n\n\n\n\nQuit\n\n\nQuits the application. Does not work in Editor or Webplayer builds. Shouldn't generally be used on iOS.\n\n\nSend Message\n\n\nSends a message to either the owner Flowchart or all Flowcharts in the scene. Blocks can listen for this message using a Message Received event handler.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMessage Target\n\n\nFungus.SendMessage+MessageTarget\n\n\nTarget flowchart(s) to send the message to\n\n\n\n\n\n\n_message\n\n\nFungus.StringData\n\n\nName of the message to send\n\n\n\n\n\n\n\n\nStop\n\n\nStop executing the Block that contains this command.\n\n\nStop Block\n\n\nStops executing the named Block\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFlowchart\n\n\nFungus.Flowchart\n\n\nFlowchart containing the Block. If none is specified, the parent Flowchart is used.\n\n\n\n\n\n\nBlock Name\n\n\nFungus.StringData\n\n\nName of the Block to stop\n\n\n\n\n\n\n\n\nStop Flowchart\n\n\nStops execution of all Blocks in a Flowchart\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStop Parent Flowchart\n\n\nSystem.Boolean\n\n\nStop all executing Blocks in the Flowchart that contains this command\n\n\n\n\n\n\nTarget Flowcharts\n\n\nSystem.Collections.Generic.List`1[Fungus.Flowchart]\n\n\nStop all executing Blocks in a list of target Flowcharts\n\n\n\n\n\n\n\n\nWait\n\n\nWaits for period of time before executing the next command in the block.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nDuration to wait for\n\n\n\n\n\n\n\n\nWaitInput\n\n\nWaits for a period of time or for player input before executing the next command in the block.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDuration\n\n\nSystem.Single\n\n\nDuration to wait for. If negative will wait until player input occurs.\n\n\n\n\n\n\n\n\nWhile\n\n\nContinuously loop through a block of commands while the condition is true. Use the Break command to force the loop to terminate immediately.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVariable\n\n\nFungus.Variable\n\n\nVariable to use in expression\n\n\n\n\n\n\nBoolean Data\n\n\nFungus.BooleanData\n\n\nBoolean value to compare against\n\n\n\n\n\n\nInteger Data\n\n\nFungus.IntegerData\n\n\nInteger value to compare against\n\n\n\n\n\n\nFloat Data\n\n\nFungus.FloatData\n\n\nFloat value to compare against\n\n\n\n\n\n\nString Data\n\n\nFungus.StringDataMulti\n\n\nString value to compare against\n\n\n\n\n\n\nCompare Operator\n\n\nFungus.CompareOperator\n\n\nThe type of comparison to be performed", 
            "title": "Flow Commands"
        }, 
        {
            "location": "/commands/flow_commands/index.html#break", 
            "text": "Force a loop to terminate immediately.", 
            "title": "Break"
        }, 
        {
            "location": "/commands/flow_commands/index.html#call", 
            "text": "Execute another block in the same Flowchart as the command, or in a different Flowchart.     Property  Type  Description      Target Flowchart  Fungus.Flowchart  Flowchart which contains the block to execute. If none is specified then the current Flowchart is used.    Target Block  Fungus.Block  Block to start executing    Call Mode  Fungus.Call+CallMode  Select if the calling block should stop or continue executing commands, or wait until the called block finishes.", 
            "title": "Call"
        }, 
        {
            "location": "/commands/flow_commands/index.html#else", 
            "text": "Marks the start of a command block to be executed when the preceding If statement is False.", 
            "title": "Else"
        }, 
        {
            "location": "/commands/flow_commands/index.html#else-if", 
            "text": "Marks the start of a command block to be executed when the preceding If statement is False and the test expression is true.     Property  Type  Description      Variable  Fungus.Variable  Variable to use in expression    Boolean Data  Fungus.BooleanData  Boolean value to compare against    Integer Data  Fungus.IntegerData  Integer value to compare against    Float Data  Fungus.FloatData  Float value to compare against    String Data  Fungus.StringDataMulti  String value to compare against    Compare Operator  Fungus.CompareOperator  The type of comparison to be performed", 
            "title": "Else If"
        }, 
        {
            "location": "/commands/flow_commands/index.html#end", 
            "text": "Marks the end of a conditional block.", 
            "title": "End"
        }, 
        {
            "location": "/commands/flow_commands/index.html#if", 
            "text": "If the test expression is true, execute the following command block.     Property  Type  Description      Variable  Fungus.Variable  Variable to use in expression    Boolean Data  Fungus.BooleanData  Boolean value to compare against    Integer Data  Fungus.IntegerData  Integer value to compare against    Float Data  Fungus.FloatData  Float value to compare against    String Data  Fungus.StringDataMulti  String value to compare against    Compare Operator  Fungus.CompareOperator  The type of comparison to be performed", 
            "title": "If"
        }, 
        {
            "location": "/commands/flow_commands/index.html#jump", 
            "text": "Move execution to a specific Label command     Property  Type  Description      Target Label  Fungus.Label  Label to jump to", 
            "title": "Jump"
        }, 
        {
            "location": "/commands/flow_commands/index.html#label", 
            "text": "Marks a position in the command list for execution to jump to.     Property  Type  Description      Key  System.String  Display name for the label", 
            "title": "Label"
        }, 
        {
            "location": "/commands/flow_commands/index.html#load-scene", 
            "text": "Loads a new Unity scene and displays an optional loading image. This is useful for splitting a large game across multiple scene files to reduce peak memory usage. Previously loaded assets will be released before loading the scene to free up memory.The scene to be loaded must be added to the scene list in Build Settings.     Property  Type  Description      _scene Name  Fungus.StringData  Name of the scene to load. The scene must also be added to the build settings.    Loading Image  UnityEngine.Texture2D  Image to display while loading the scene", 
            "title": "Load Scene"
        }, 
        {
            "location": "/commands/flow_commands/index.html#quit", 
            "text": "Quits the application. Does not work in Editor or Webplayer builds. Shouldn't generally be used on iOS.", 
            "title": "Quit"
        }, 
        {
            "location": "/commands/flow_commands/index.html#send-message", 
            "text": "Sends a message to either the owner Flowchart or all Flowcharts in the scene. Blocks can listen for this message using a Message Received event handler.     Property  Type  Description      Message Target  Fungus.SendMessage+MessageTarget  Target flowchart(s) to send the message to    _message  Fungus.StringData  Name of the message to send", 
            "title": "Send Message"
        }, 
        {
            "location": "/commands/flow_commands/index.html#stop", 
            "text": "Stop executing the Block that contains this command.", 
            "title": "Stop"
        }, 
        {
            "location": "/commands/flow_commands/index.html#stop-block", 
            "text": "Stops executing the named Block     Property  Type  Description      Flowchart  Fungus.Flowchart  Flowchart containing the Block. If none is specified, the parent Flowchart is used.    Block Name  Fungus.StringData  Name of the Block to stop", 
            "title": "Stop Block"
        }, 
        {
            "location": "/commands/flow_commands/index.html#stop-flowchart", 
            "text": "Stops execution of all Blocks in a Flowchart     Property  Type  Description      Stop Parent Flowchart  System.Boolean  Stop all executing Blocks in the Flowchart that contains this command    Target Flowcharts  System.Collections.Generic.List`1[Fungus.Flowchart]  Stop all executing Blocks in a list of target Flowcharts", 
            "title": "Stop Flowchart"
        }, 
        {
            "location": "/commands/flow_commands/index.html#wait", 
            "text": "Waits for period of time before executing the next command in the block.     Property  Type  Description      _duration  Fungus.FloatData  Duration to wait for", 
            "title": "Wait"
        }, 
        {
            "location": "/commands/flow_commands/index.html#waitinput", 
            "text": "Waits for a period of time or for player input before executing the next command in the block.     Property  Type  Description      Duration  System.Single  Duration to wait for. If negative will wait until player input occurs.", 
            "title": "WaitInput"
        }, 
        {
            "location": "/commands/flow_commands/index.html#while", 
            "text": "Continuously loop through a block of commands while the condition is true. Use the Break command to force the loop to terminate immediately.     Property  Type  Description      Variable  Fungus.Variable  Variable to use in expression    Boolean Data  Fungus.BooleanData  Boolean value to compare against    Integer Data  Fungus.IntegerData  Integer value to compare against    Float Data  Fungus.FloatData  Float value to compare against    String Data  Fungus.StringDataMulti  String value to compare against    Compare Operator  Fungus.CompareOperator  The type of comparison to be performed", 
            "title": "While"
        }, 
        {
            "location": "/commands/itween_commands/index.html", 
            "text": "Look From\n\n\nInstantly rotates a GameObject to look at the supplied Vector3 then returns it to it's starting rotation over time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_from Transform\n\n\nFungus.TransformData\n\n\nTarget transform that the GameObject will look at\n\n\n\n\n\n\n_from Position\n\n\nFungus.Vector3Data\n\n\nTarget world position that the GameObject will look at, if no From Transform is set\n\n\n\n\n\n\nAxis\n\n\nFungus.iTweenAxis\n\n\nRestricts rotation to the supplied axis only\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nLook To\n\n\nRotates a GameObject to look at a supplied Transform or Vector3 over time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_to Transform\n\n\nFungus.TransformData\n\n\nTarget transform that the GameObject will look at\n\n\n\n\n\n\n_to Position\n\n\nFungus.Vector3Data\n\n\nTarget world position that the GameObject will look at, if no From Transform is set\n\n\n\n\n\n\nAxis\n\n\nFungus.iTweenAxis\n\n\nRestricts rotation to the supplied axis only\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nMove Add\n\n\nMoves a game object by a specified offset over time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_offset\n\n\nFungus.Vector3Data\n\n\nA translation offset in space the GameObject will animate to\n\n\n\n\n\n\nSpace\n\n\nUnityEngine.Space\n\n\nApply the transformation in either the world coordinate or local cordinate system\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nMove From\n\n\nMoves a game object from a specified position back to its starting position over time. The position can be defined by a transform in another object (using To Transform) or by setting an absolute position (using To Position, if To Transform is set to None).\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_from Transform\n\n\nFungus.TransformData\n\n\nTarget transform that the GameObject will move from\n\n\n\n\n\n\n_from Position\n\n\nFungus.Vector3Data\n\n\nTarget world position that the GameObject will move from, if no From Transform is set\n\n\n\n\n\n\nIs Local\n\n\nSystem.Boolean\n\n\nWhether to animate in world space or relative to the parent. False by default.\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nMove To\n\n\nMoves a game object to a specified position over time. The position can be defined by a transform in another object (using To Transform) or by setting an absolute position (using To Position, if To Transform is set to None).\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_to Transform\n\n\nFungus.TransformData\n\n\nTarget transform that the GameObject will move to\n\n\n\n\n\n\n_to Position\n\n\nFungus.Vector3Data\n\n\nTarget world position that the GameObject will move to, if no From Transform is set\n\n\n\n\n\n\nIs Local\n\n\nSystem.Boolean\n\n\nWhether to animate in world space or relative to the parent. False by default.\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nPunch Position\n\n\nApplies a jolt of force to a GameObject's position and wobbles it back to its initial position.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_amount\n\n\nFungus.Vector3Data\n\n\nA translation offset in space the GameObject will animate to\n\n\n\n\n\n\nSpace\n\n\nUnityEngine.Space\n\n\nApply the transformation in either the world coordinate or local cordinate system\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nPunch Rotation\n\n\nApplies a jolt of force to a GameObject's rotation and wobbles it back to its initial rotation.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_amount\n\n\nFungus.Vector3Data\n\n\nA rotation offset in space the GameObject will animate to\n\n\n\n\n\n\nSpace\n\n\nUnityEngine.Space\n\n\nApply the transformation in either the world coordinate or local cordinate system\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nPunch Scale\n\n\nApplies a jolt of force to a GameObject's scale and wobbles it back to its initial scale.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_amount\n\n\nFungus.Vector3Data\n\n\nA scale offset in space the GameObject will animate to\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nRotate Add\n\n\nRotates a game object by the specified angles over time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_offset\n\n\nFungus.Vector3Data\n\n\nA rotation offset in space the GameObject will animate to\n\n\n\n\n\n\nSpace\n\n\nUnityEngine.Space\n\n\nApply the transformation in either the world coordinate or local cordinate system\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nRotate From\n\n\nRotates a game object from the specified angles back to its starting orientation over time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_from Transform\n\n\nFungus.TransformData\n\n\nTarget transform that the GameObject will rotate from\n\n\n\n\n\n\n_from Rotation\n\n\nFungus.Vector3Data\n\n\nTarget rotation that the GameObject will rotate from, if no From Transform is set\n\n\n\n\n\n\nIs Local\n\n\nSystem.Boolean\n\n\nWhether to animate in world space or relative to the parent. False by default.\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nRotate To\n\n\nRotates a game object to the specified angles over time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_to Transform\n\n\nFungus.TransformData\n\n\nTarget transform that the GameObject will rotate to\n\n\n\n\n\n\n_to Rotation\n\n\nFungus.Vector3Data\n\n\nTarget rotation that the GameObject will rotate to, if no To Transform is set\n\n\n\n\n\n\nIs Local\n\n\nSystem.Boolean\n\n\nWhether to animate in world space or relative to the parent. False by default.\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nScale Add\n\n\nChanges a game object's scale by a specified offset over time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_offset\n\n\nFungus.Vector3Data\n\n\nA scale offset in space the GameObject will animate to\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nScale From\n\n\nChanges a game object's scale to the specified value and back to its original scale over time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_from Transform\n\n\nFungus.TransformData\n\n\nTarget transform that the GameObject will scale from\n\n\n\n\n\n\n_from Scale\n\n\nFungus.Vector3Data\n\n\nTarget scale that the GameObject will scale from, if no From Transform is set\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nScale To\n\n\nChanges a game object's scale to a specified value over time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_to Transform\n\n\nFungus.TransformData\n\n\nTarget transform that the GameObject will scale to\n\n\n\n\n\n\n_to Scale\n\n\nFungus.Vector3Data\n\n\nTarget scale that the GameObject will scale to, if no To Transform is set\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nShake Position\n\n\nRandomly shakes a GameObject's position by a diminishing amount over time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_amount\n\n\nFungus.Vector3Data\n\n\nA translation offset in space the GameObject will animate to\n\n\n\n\n\n\nIs Local\n\n\nSystem.Boolean\n\n\nWhether to animate in world space or relative to the parent. False by default.\n\n\n\n\n\n\nAxis\n\n\nFungus.iTweenAxis\n\n\nRestricts rotation to the supplied axis only\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nShake Rotation\n\n\nRandomly shakes a GameObject's rotation by a diminishing amount over time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_amount\n\n\nFungus.Vector3Data\n\n\nA rotation offset in space the GameObject will animate to\n\n\n\n\n\n\nSpace\n\n\nUnityEngine.Space\n\n\nApply the transformation in either the world coordinate or local cordinate system\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nShake Scale\n\n\nRandomly shakes a GameObject's rotation by a diminishing amount over time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_amount\n\n\nFungus.Vector3Data\n\n\nA scale offset in space the GameObject will animate to\n\n\n\n\n\n\n_target Object\n\n\nFungus.GameObjectData\n\n\nTarget game object to apply the Tween to\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nAn individual name useful for stopping iTweens by name\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nThe time in seconds the animation will take to complete\n\n\n\n\n\n\nEase Type\n\n\nFungus.iTween+EaseType\n\n\nThe shape of the easing curve applied to the animation\n\n\n\n\n\n\nLoop Type\n\n\nFungus.iTween+LoopType\n\n\nThe type of loop to apply once the animation has completed\n\n\n\n\n\n\nStop Previous Tweens\n\n\nSystem.Boolean\n\n\nStop any previously added iTweens on this object before adding this iTween\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nStop Tween\n\n\nStops an active iTween by name.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_tween Name\n\n\nFungus.StringData\n\n\nStop and destroy any Tweens in current scene with the supplied name\n\n\n\n\n\n\n\n\nStop Tweens\n\n\nStop all active iTweens in the current scene.", 
            "title": "iTween Commands"
        }, 
        {
            "location": "/commands/itween_commands/index.html#look-from", 
            "text": "Instantly rotates a GameObject to look at the supplied Vector3 then returns it to it's starting rotation over time.     Property  Type  Description      _from Transform  Fungus.TransformData  Target transform that the GameObject will look at    _from Position  Fungus.Vector3Data  Target world position that the GameObject will look at, if no From Transform is set    Axis  Fungus.iTweenAxis  Restricts rotation to the supplied axis only    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Look From"
        }, 
        {
            "location": "/commands/itween_commands/index.html#look-to", 
            "text": "Rotates a GameObject to look at a supplied Transform or Vector3 over time.     Property  Type  Description      _to Transform  Fungus.TransformData  Target transform that the GameObject will look at    _to Position  Fungus.Vector3Data  Target world position that the GameObject will look at, if no From Transform is set    Axis  Fungus.iTweenAxis  Restricts rotation to the supplied axis only    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Look To"
        }, 
        {
            "location": "/commands/itween_commands/index.html#move-add", 
            "text": "Moves a game object by a specified offset over time.     Property  Type  Description      _offset  Fungus.Vector3Data  A translation offset in space the GameObject will animate to    Space  UnityEngine.Space  Apply the transformation in either the world coordinate or local cordinate system    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Move Add"
        }, 
        {
            "location": "/commands/itween_commands/index.html#move-from", 
            "text": "Moves a game object from a specified position back to its starting position over time. The position can be defined by a transform in another object (using To Transform) or by setting an absolute position (using To Position, if To Transform is set to None).     Property  Type  Description      _from Transform  Fungus.TransformData  Target transform that the GameObject will move from    _from Position  Fungus.Vector3Data  Target world position that the GameObject will move from, if no From Transform is set    Is Local  System.Boolean  Whether to animate in world space or relative to the parent. False by default.    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Move From"
        }, 
        {
            "location": "/commands/itween_commands/index.html#move-to", 
            "text": "Moves a game object to a specified position over time. The position can be defined by a transform in another object (using To Transform) or by setting an absolute position (using To Position, if To Transform is set to None).     Property  Type  Description      _to Transform  Fungus.TransformData  Target transform that the GameObject will move to    _to Position  Fungus.Vector3Data  Target world position that the GameObject will move to, if no From Transform is set    Is Local  System.Boolean  Whether to animate in world space or relative to the parent. False by default.    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Move To"
        }, 
        {
            "location": "/commands/itween_commands/index.html#punch-position", 
            "text": "Applies a jolt of force to a GameObject's position and wobbles it back to its initial position.     Property  Type  Description      _amount  Fungus.Vector3Data  A translation offset in space the GameObject will animate to    Space  UnityEngine.Space  Apply the transformation in either the world coordinate or local cordinate system    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Punch Position"
        }, 
        {
            "location": "/commands/itween_commands/index.html#punch-rotation", 
            "text": "Applies a jolt of force to a GameObject's rotation and wobbles it back to its initial rotation.     Property  Type  Description      _amount  Fungus.Vector3Data  A rotation offset in space the GameObject will animate to    Space  UnityEngine.Space  Apply the transformation in either the world coordinate or local cordinate system    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Punch Rotation"
        }, 
        {
            "location": "/commands/itween_commands/index.html#punch-scale", 
            "text": "Applies a jolt of force to a GameObject's scale and wobbles it back to its initial scale.     Property  Type  Description      _amount  Fungus.Vector3Data  A scale offset in space the GameObject will animate to    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Punch Scale"
        }, 
        {
            "location": "/commands/itween_commands/index.html#rotate-add", 
            "text": "Rotates a game object by the specified angles over time.     Property  Type  Description      _offset  Fungus.Vector3Data  A rotation offset in space the GameObject will animate to    Space  UnityEngine.Space  Apply the transformation in either the world coordinate or local cordinate system    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Rotate Add"
        }, 
        {
            "location": "/commands/itween_commands/index.html#rotate-from", 
            "text": "Rotates a game object from the specified angles back to its starting orientation over time.     Property  Type  Description      _from Transform  Fungus.TransformData  Target transform that the GameObject will rotate from    _from Rotation  Fungus.Vector3Data  Target rotation that the GameObject will rotate from, if no From Transform is set    Is Local  System.Boolean  Whether to animate in world space or relative to the parent. False by default.    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Rotate From"
        }, 
        {
            "location": "/commands/itween_commands/index.html#rotate-to", 
            "text": "Rotates a game object to the specified angles over time.     Property  Type  Description      _to Transform  Fungus.TransformData  Target transform that the GameObject will rotate to    _to Rotation  Fungus.Vector3Data  Target rotation that the GameObject will rotate to, if no To Transform is set    Is Local  System.Boolean  Whether to animate in world space or relative to the parent. False by default.    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Rotate To"
        }, 
        {
            "location": "/commands/itween_commands/index.html#scale-add", 
            "text": "Changes a game object's scale by a specified offset over time.     Property  Type  Description      _offset  Fungus.Vector3Data  A scale offset in space the GameObject will animate to    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Scale Add"
        }, 
        {
            "location": "/commands/itween_commands/index.html#scale-from", 
            "text": "Changes a game object's scale to the specified value and back to its original scale over time.     Property  Type  Description      _from Transform  Fungus.TransformData  Target transform that the GameObject will scale from    _from Scale  Fungus.Vector3Data  Target scale that the GameObject will scale from, if no From Transform is set    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Scale From"
        }, 
        {
            "location": "/commands/itween_commands/index.html#scale-to", 
            "text": "Changes a game object's scale to a specified value over time.     Property  Type  Description      _to Transform  Fungus.TransformData  Target transform that the GameObject will scale to    _to Scale  Fungus.Vector3Data  Target scale that the GameObject will scale to, if no To Transform is set    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Scale To"
        }, 
        {
            "location": "/commands/itween_commands/index.html#shake-position", 
            "text": "Randomly shakes a GameObject's position by a diminishing amount over time.     Property  Type  Description      _amount  Fungus.Vector3Data  A translation offset in space the GameObject will animate to    Is Local  System.Boolean  Whether to animate in world space or relative to the parent. False by default.    Axis  Fungus.iTweenAxis  Restricts rotation to the supplied axis only    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Shake Position"
        }, 
        {
            "location": "/commands/itween_commands/index.html#shake-rotation", 
            "text": "Randomly shakes a GameObject's rotation by a diminishing amount over time.     Property  Type  Description      _amount  Fungus.Vector3Data  A rotation offset in space the GameObject will animate to    Space  UnityEngine.Space  Apply the transformation in either the world coordinate or local cordinate system    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Shake Rotation"
        }, 
        {
            "location": "/commands/itween_commands/index.html#shake-scale", 
            "text": "Randomly shakes a GameObject's rotation by a diminishing amount over time.     Property  Type  Description      _amount  Fungus.Vector3Data  A scale offset in space the GameObject will animate to    _target Object  Fungus.GameObjectData  Target game object to apply the Tween to    _tween Name  Fungus.StringData  An individual name useful for stopping iTweens by name    _duration  Fungus.FloatData  The time in seconds the animation will take to complete    Ease Type  Fungus.iTween+EaseType  The shape of the easing curve applied to the animation    Loop Type  Fungus.iTween+LoopType  The type of loop to apply once the animation has completed    Stop Previous Tweens  System.Boolean  Stop any previously added iTweens on this object before adding this iTween    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Shake Scale"
        }, 
        {
            "location": "/commands/itween_commands/index.html#stop-tween", 
            "text": "Stops an active iTween by name.     Property  Type  Description      _tween Name  Fungus.StringData  Stop and destroy any Tweens in current scene with the supplied name", 
            "title": "Stop Tween"
        }, 
        {
            "location": "/commands/itween_commands/index.html#stop-tweens", 
            "text": "Stop all active iTweens in the current scene.", 
            "title": "Stop Tweens"
        }, 
        {
            "location": "/commands/narrative_commands/index.html", 
            "text": "Clear Menu\n\n\nClears the options from a menu dialogue\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMenu Dialog\n\n\nFungus.MenuDialog\n\n\nMenu Dialog to clear the options on\n\n\n\n\n\n\n\n\nControl Stage\n\n\nControls the stage on which character portraits are displayed.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDisplay\n\n\nFungus.StageDisplayType\n\n\nDisplay type\n\n\n\n\n\n\nStage\n\n\nFungus.Stage\n\n\nStage to display characters on\n\n\n\n\n\n\nReplaced Stage\n\n\nFungus.Stage\n\n\nStage to swap with\n\n\n\n\n\n\nUse Default Settings\n\n\nSystem.Boolean\n\n\nUse Default Settings\n\n\n\n\n\n\nFade Duration\n\n\nSystem.Single\n\n\nFade Duration\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nMenu\n\n\nDisplays a button in a multiple choice menu\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nText\n\n\nSystem.String\n\n\nText to display on the menu button\n\n\n\n\n\n\nDescription\n\n\nSystem.String\n\n\nNotes about the option text for other authors, localization, etc.\n\n\n\n\n\n\nTarget Block\n\n\nFungus.Block\n\n\nBlock to execute when this option is selected\n\n\n\n\n\n\nHide If Visited\n\n\nSystem.Boolean\n\n\nHide this option if the target block has been executed previously\n\n\n\n\n\n\nInteractable\n\n\nFungus.BooleanData\n\n\nIf false, the menu option will be displayed but will not be selectable\n\n\n\n\n\n\nSet Menu Dialog\n\n\nFungus.MenuDialog\n\n\nA custom Menu Dialog to use to display this menu. All subsequent Menu commands will use this dialog.\n\n\n\n\n\n\n\n\nMenu Timer\n\n\nDisplays a timer bar and executes a target block if the player fails to select a menu option in time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nLength of time to display the timer for\n\n\n\n\n\n\nTarget Block\n\n\nFungus.Block\n\n\nBlock to execute when the timer expires\n\n\n\n\n\n\n\n\nPortrait\n\n\nControls a character portrait. \n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStage\n\n\nFungus.Stage\n\n\nStage to display portrait on\n\n\n\n\n\n\nDisplay\n\n\nFungus.DisplayType\n\n\nDisplay type\n\n\n\n\n\n\nCharacter\n\n\nFungus.Character\n\n\nCharacter to display\n\n\n\n\n\n\nReplaced Character\n\n\nFungus.Character\n\n\nCharacter to swap with\n\n\n\n\n\n\nPortrait\n\n\nUnityEngine.Sprite\n\n\nPortrait to display\n\n\n\n\n\n\nOffset\n\n\nFungus.PositionOffset\n\n\nMove the portrait from/to this offset position\n\n\n\n\n\n\nFrom Position\n\n\nUnityEngine.RectTransform\n\n\nMove the portrait from this position\n\n\n\n\n\n\nTo Position\n\n\nUnityEngine.RectTransform\n\n\nMove the portrait to this positoin\n\n\n\n\n\n\nFacing\n\n\nFungus.FacingDirection\n\n\nDirection character is facing\n\n\n\n\n\n\nUse Default Settings\n\n\nSystem.Boolean\n\n\nUse Default Settings\n\n\n\n\n\n\nFade Duration\n\n\nSystem.Single\n\n\nFade Duration\n\n\n\n\n\n\nMove Duration\n\n\nSystem.Single\n\n\nMovement Duration\n\n\n\n\n\n\nShift Offset\n\n\nUnityEngine.Vector2\n\n\nShift Offset\n\n\n\n\n\n\nMove\n\n\nSystem.Boolean\n\n\nMove\n\n\n\n\n\n\nShift Into Place\n\n\nSystem.Boolean\n\n\nStart from offset\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the tween has finished before executing the next command\n\n\n\n\n\n\n\n\nSay\n\n\nWrites text in a dialog box.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nSystem.String\n\n\nNotes about this story text for other authors, localization, etc.\n\n\n\n\n\n\nCharacter\n\n\nFungus.Character\n\n\nCharacter that is speaking\n\n\n\n\n\n\nPortrait\n\n\nUnityEngine.Sprite\n\n\nPortrait that represents speaking character\n\n\n\n\n\n\nVoice Over Clip\n\n\nUnityEngine.AudioClip\n\n\nVoiceover audio to play when writing the text\n\n\n\n\n\n\nShow Always\n\n\nSystem.Boolean\n\n\nAlways show this Say text when the command is executed multiple times\n\n\n\n\n\n\nShow Count\n\n\nSystem.Int32\n\n\nNumber of times to show this Say text when the command is executed multiple times\n\n\n\n\n\n\nExtend Previous\n\n\nSystem.Boolean\n\n\nType this text in the previous dialog box.\n\n\n\n\n\n\nFade When Done\n\n\nSystem.Boolean\n\n\nFade out the dialog box when writing has finished and not waiting for input.\n\n\n\n\n\n\nWait For Click\n\n\nSystem.Boolean\n\n\nWait for player to click before continuing.\n\n\n\n\n\n\nStop Voiceover\n\n\nSystem.Boolean\n\n\nStop playing voiceover when text finishes writing.\n\n\n\n\n\n\nSet Say Dialog\n\n\nFungus.SayDialog\n\n\nSets the active Say dialog with a reference to a Say Dialog object in the scene. All story text will now display using this Say Dialog.\n\n\n\n\n\n\n\n\nSet Language\n\n\nSet the active language for the scene. A Localization object with a localization file must be present in the scene.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_language Code\n\n\nFungus.StringData\n\n\nCode of the language to set. e.g. ES, DE, JA\n\n\n\n\n\n\n\n\nSet Menu Dialog\n\n\nSets a custom menu dialog to use when displaying multiple choice menus\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMenu Dialog\n\n\nFungus.MenuDialog\n\n\nThe Menu Dialog to use for displaying menu buttons\n\n\n\n\n\n\n\n\nSet Say Dialog\n\n\nSets a custom say dialog to use when displaying story text\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSay Dialog\n\n\nFungus.SayDialog\n\n\nThe Say Dialog to use for displaying Say story text", 
            "title": "Narrative Commands"
        }, 
        {
            "location": "/commands/narrative_commands/index.html#clear-menu", 
            "text": "Clears the options from a menu dialogue     Property  Type  Description      Menu Dialog  Fungus.MenuDialog  Menu Dialog to clear the options on", 
            "title": "Clear Menu"
        }, 
        {
            "location": "/commands/narrative_commands/index.html#control-stage", 
            "text": "Controls the stage on which character portraits are displayed.     Property  Type  Description      Display  Fungus.StageDisplayType  Display type    Stage  Fungus.Stage  Stage to display characters on    Replaced Stage  Fungus.Stage  Stage to swap with    Use Default Settings  System.Boolean  Use Default Settings    Fade Duration  System.Single  Fade Duration    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Control Stage"
        }, 
        {
            "location": "/commands/narrative_commands/index.html#menu", 
            "text": "Displays a button in a multiple choice menu     Property  Type  Description      Text  System.String  Text to display on the menu button    Description  System.String  Notes about the option text for other authors, localization, etc.    Target Block  Fungus.Block  Block to execute when this option is selected    Hide If Visited  System.Boolean  Hide this option if the target block has been executed previously    Interactable  Fungus.BooleanData  If false, the menu option will be displayed but will not be selectable    Set Menu Dialog  Fungus.MenuDialog  A custom Menu Dialog to use to display this menu. All subsequent Menu commands will use this dialog.", 
            "title": "Menu"
        }, 
        {
            "location": "/commands/narrative_commands/index.html#menu-timer", 
            "text": "Displays a timer bar and executes a target block if the player fails to select a menu option in time.     Property  Type  Description      _duration  Fungus.FloatData  Length of time to display the timer for    Target Block  Fungus.Block  Block to execute when the timer expires", 
            "title": "Menu Timer"
        }, 
        {
            "location": "/commands/narrative_commands/index.html#portrait", 
            "text": "Controls a character portrait.      Property  Type  Description      Stage  Fungus.Stage  Stage to display portrait on    Display  Fungus.DisplayType  Display type    Character  Fungus.Character  Character to display    Replaced Character  Fungus.Character  Character to swap with    Portrait  UnityEngine.Sprite  Portrait to display    Offset  Fungus.PositionOffset  Move the portrait from/to this offset position    From Position  UnityEngine.RectTransform  Move the portrait from this position    To Position  UnityEngine.RectTransform  Move the portrait to this positoin    Facing  Fungus.FacingDirection  Direction character is facing    Use Default Settings  System.Boolean  Use Default Settings    Fade Duration  System.Single  Fade Duration    Move Duration  System.Single  Movement Duration    Shift Offset  UnityEngine.Vector2  Shift Offset    Move  System.Boolean  Move    Shift Into Place  System.Boolean  Start from offset    Wait Until Finished  System.Boolean  Wait until the tween has finished before executing the next command", 
            "title": "Portrait"
        }, 
        {
            "location": "/commands/narrative_commands/index.html#say", 
            "text": "Writes text in a dialog box.     Property  Type  Description      Description  System.String  Notes about this story text for other authors, localization, etc.    Character  Fungus.Character  Character that is speaking    Portrait  UnityEngine.Sprite  Portrait that represents speaking character    Voice Over Clip  UnityEngine.AudioClip  Voiceover audio to play when writing the text    Show Always  System.Boolean  Always show this Say text when the command is executed multiple times    Show Count  System.Int32  Number of times to show this Say text when the command is executed multiple times    Extend Previous  System.Boolean  Type this text in the previous dialog box.    Fade When Done  System.Boolean  Fade out the dialog box when writing has finished and not waiting for input.    Wait For Click  System.Boolean  Wait for player to click before continuing.    Stop Voiceover  System.Boolean  Stop playing voiceover when text finishes writing.    Set Say Dialog  Fungus.SayDialog  Sets the active Say dialog with a reference to a Say Dialog object in the scene. All story text will now display using this Say Dialog.", 
            "title": "Say"
        }, 
        {
            "location": "/commands/narrative_commands/index.html#set-language", 
            "text": "Set the active language for the scene. A Localization object with a localization file must be present in the scene.     Property  Type  Description      _language Code  Fungus.StringData  Code of the language to set. e.g. ES, DE, JA", 
            "title": "Set Language"
        }, 
        {
            "location": "/commands/narrative_commands/index.html#set-menu-dialog", 
            "text": "Sets a custom menu dialog to use when displaying multiple choice menus     Property  Type  Description      Menu Dialog  Fungus.MenuDialog  The Menu Dialog to use for displaying menu buttons", 
            "title": "Set Menu Dialog"
        }, 
        {
            "location": "/commands/narrative_commands/index.html#set-say-dialog", 
            "text": "Sets a custom say dialog to use when displaying story text     Property  Type  Description      Say Dialog  Fungus.SayDialog  The Say Dialog to use for displaying Say story text", 
            "title": "Set Say Dialog"
        }, 
        {
            "location": "/commands/scripting_commands/index.html", 
            "text": "Comment\n\n\nUse comments to record design notes and reminders about your game.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCommenter Name\n\n\nSystem.String\n\n\nName of Commenter\n\n\n\n\n\n\nComment Text\n\n\nSystem.String\n\n\nText to display for this comment\n\n\n\n\n\n\n\n\nCall Method\n\n\nCalls a named method on a GameObject using the GameObject.SendMessage() system.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTarget Object\n\n\nUnityEngine.GameObject\n\n\nTarget monobehavior which contains the method we want to call\n\n\n\n\n\n\nMethod Name\n\n\nSystem.String\n\n\nName of the method to call\n\n\n\n\n\n\nDelay\n\n\nSystem.Single\n\n\nDelay (in seconds) before the method will be called\n\n\n\n\n\n\n\n\nDebug Log\n\n\nWrites a log message to the debug console.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nLog Type\n\n\nFungus.DebugLog+DebugLogType\n\n\nDisplay type of debug log info\n\n\n\n\n\n\nLog Message\n\n\nFungus.StringDataMulti\n\n\nText to write to the debug log. Supports variable substitution, e.g. {$Myvar}\n\n\n\n\n\n\n\n\nDestroy\n\n\nDestroys a specified game object in the scene.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_target Game Object\n\n\nFungus.GameObjectData\n\n\nReference to game object to destroy\n\n\n\n\n\n\n\n\nExecute Lua\n\n\nExecutes a Lua code chunk using a Lua Environment.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nLua Environment\n\n\nFungus.LuaEnvironment\n\n\nLua Environment to use to execute this Lua script\n\n\n\n\n\n\nLua File\n\n\nUnityEngine.TextAsset\n\n\nA text file containing Lua script to execute.\n\n\n\n\n\n\nLua Script\n\n\nSystem.String\n\n\nLua script to execute. This text is appended to the contents of Lua file (if one is specified).\n\n\n\n\n\n\nRun As Coroutine\n\n\nSystem.Boolean\n\n\nExecute this Lua script as a Lua coroutine\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nPause command execution until the Lua script has finished execution\n\n\n\n\n\n\nReturn Variable\n\n\nFungus.Variable\n\n\nA Flowchart variable to store the returned value in.\n\n\n\n\n\n\n\n\nInvoke Event\n\n\nCalls a list of component methods via the Unity Event System (as used in the Unity UI). This command is more efficient than the Invoke Method command but can only pass a single parameter and doesn't support return values.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDelay\n\n\nSystem.Single\n\n\nDelay (in seconds) before the methods will be called\n\n\n\n\n\n\nStatic Event\n\n\nUnityEngine.Events.UnityEvent\n\n\nList of methods to call. Supports methods with no parameters or exactly one string, int, float or object parameter.\n\n\n\n\n\n\nBoolean Parameter\n\n\nFungus.BooleanData\n\n\nBoolean parameter to pass to the invoked methods.\n\n\n\n\n\n\nBoolean Event\n\n\nFungus.InvokeEvent+BooleanEvent\n\n\nList of methods to call. Supports methods with one boolean parameter.\n\n\n\n\n\n\nInteger Parameter\n\n\nFungus.IntegerData\n\n\nInteger parameter to pass to the invoked methods.\n\n\n\n\n\n\nInteger Event\n\n\nFungus.InvokeEvent+IntegerEvent\n\n\nList of methods to call. Supports methods with one integer parameter.\n\n\n\n\n\n\nFloat Parameter\n\n\nFungus.FloatData\n\n\nFloat parameter to pass to the invoked methods.\n\n\n\n\n\n\nFloat Event\n\n\nFungus.InvokeEvent+FloatEvent\n\n\nList of methods to call. Supports methods with one float parameter.\n\n\n\n\n\n\nString Parameter\n\n\nFungus.StringDataMulti\n\n\nString parameter to pass to the invoked methods.\n\n\n\n\n\n\nString Event\n\n\nFungus.InvokeEvent+StringEvent\n\n\nList of methods to call. Supports methods with one string parameter.\n\n\n\n\n\n\n\n\nInvoke Method\n\n\nInvokes a method of a component via reflection. Supports passing multiple parameters and storing returned values in a Fungus variable.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTarget Object\n\n\nUnityEngine.GameObject\n\n\nGameObject containing the component method to be invoked\n\n\n\n\n\n\nTarget Component Assembly Name\n\n\nSystem.String\n\n\nName of assembly containing the target component\n\n\n\n\n\n\nTarget Component Fullname\n\n\nSystem.String\n\n\nFull name of the target component\n\n\n\n\n\n\nTarget Component Text\n\n\nSystem.String\n\n\nDisplay name of the target component\n\n\n\n\n\n\nTarget Method\n\n\nSystem.String\n\n\nName of target method to invoke on the target component\n\n\n\n\n\n\nTarget Method Text\n\n\nSystem.String\n\n\nDisplay name of target method to invoke on the target component\n\n\n\n\n\n\nMethod Parameters\n\n\nFungus.InvokeMethodParameter[]\n\n\nList of parameters to pass to the invoked method\n\n\n\n\n\n\nSave Return Value\n\n\nSystem.Boolean\n\n\nIf true, store the return value in a flowchart variable of the same type.\n\n\n\n\n\n\nReturn Value Variable Key\n\n\nSystem.String\n\n\nName of Fungus variable to store the return value in\n\n\n\n\n\n\nReturn Value Type\n\n\nSystem.String\n\n\nThe type of the return value\n\n\n\n\n\n\nShow Inherited\n\n\nSystem.Boolean\n\n\nIf true, list all inherited methods for the component\n\n\n\n\n\n\nCall Mode\n\n\nFungus.Call+CallMode\n\n\nThe coroutine call behavior for methods that return IEnumerator\n\n\n\n\n\n\n\n\nOpen URL\n\n\nOpens the specified URL in the browser.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUrl\n\n\nFungus.StringData\n\n\nURL to open in the browser\n\n\n\n\n\n\n\n\nSet Active\n\n\nSets a game object in the scene to be active / inactive.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_target Game Object\n\n\nFungus.GameObjectData\n\n\nReference to game object to enable / disable\n\n\n\n\n\n\nActive State\n\n\nFungus.BooleanData\n\n\nSet to true to enable the game object\n\n\n\n\n\n\n\n\nSpawn Object\n\n\nSpawns a new object based on a reference to a scene or prefab game object.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_source Object\n\n\nFungus.GameObjectData\n\n\nGame object to copy when spawning. Can be a scene object or a prefab.\n\n\n\n\n\n\n_parent Transform\n\n\nFungus.TransformData\n\n\nTransform to use for position of newly spawned object.\n\n\n\n\n\n\n_spawn Position\n\n\nFungus.Vector3Data\n\n\nLocal position of newly spawned object.\n\n\n\n\n\n\n_spawn Rotation\n\n\nFungus.Vector3Data\n\n\nLocal rotation of newly spawned object.", 
            "title": "Scripting Commands"
        }, 
        {
            "location": "/commands/scripting_commands/index.html#comment", 
            "text": "Use comments to record design notes and reminders about your game.     Property  Type  Description      Commenter Name  System.String  Name of Commenter    Comment Text  System.String  Text to display for this comment", 
            "title": "Comment"
        }, 
        {
            "location": "/commands/scripting_commands/index.html#call-method", 
            "text": "Calls a named method on a GameObject using the GameObject.SendMessage() system.     Property  Type  Description      Target Object  UnityEngine.GameObject  Target monobehavior which contains the method we want to call    Method Name  System.String  Name of the method to call    Delay  System.Single  Delay (in seconds) before the method will be called", 
            "title": "Call Method"
        }, 
        {
            "location": "/commands/scripting_commands/index.html#debug-log", 
            "text": "Writes a log message to the debug console.     Property  Type  Description      Log Type  Fungus.DebugLog+DebugLogType  Display type of debug log info    Log Message  Fungus.StringDataMulti  Text to write to the debug log. Supports variable substitution, e.g. {$Myvar}", 
            "title": "Debug Log"
        }, 
        {
            "location": "/commands/scripting_commands/index.html#destroy", 
            "text": "Destroys a specified game object in the scene.     Property  Type  Description      _target Game Object  Fungus.GameObjectData  Reference to game object to destroy", 
            "title": "Destroy"
        }, 
        {
            "location": "/commands/scripting_commands/index.html#execute-lua", 
            "text": "Executes a Lua code chunk using a Lua Environment.     Property  Type  Description      Lua Environment  Fungus.LuaEnvironment  Lua Environment to use to execute this Lua script    Lua File  UnityEngine.TextAsset  A text file containing Lua script to execute.    Lua Script  System.String  Lua script to execute. This text is appended to the contents of Lua file (if one is specified).    Run As Coroutine  System.Boolean  Execute this Lua script as a Lua coroutine    Wait Until Finished  System.Boolean  Pause command execution until the Lua script has finished execution    Return Variable  Fungus.Variable  A Flowchart variable to store the returned value in.", 
            "title": "Execute Lua"
        }, 
        {
            "location": "/commands/scripting_commands/index.html#invoke-event", 
            "text": "Calls a list of component methods via the Unity Event System (as used in the Unity UI). This command is more efficient than the Invoke Method command but can only pass a single parameter and doesn't support return values.     Property  Type  Description      Delay  System.Single  Delay (in seconds) before the methods will be called    Static Event  UnityEngine.Events.UnityEvent  List of methods to call. Supports methods with no parameters or exactly one string, int, float or object parameter.    Boolean Parameter  Fungus.BooleanData  Boolean parameter to pass to the invoked methods.    Boolean Event  Fungus.InvokeEvent+BooleanEvent  List of methods to call. Supports methods with one boolean parameter.    Integer Parameter  Fungus.IntegerData  Integer parameter to pass to the invoked methods.    Integer Event  Fungus.InvokeEvent+IntegerEvent  List of methods to call. Supports methods with one integer parameter.    Float Parameter  Fungus.FloatData  Float parameter to pass to the invoked methods.    Float Event  Fungus.InvokeEvent+FloatEvent  List of methods to call. Supports methods with one float parameter.    String Parameter  Fungus.StringDataMulti  String parameter to pass to the invoked methods.    String Event  Fungus.InvokeEvent+StringEvent  List of methods to call. Supports methods with one string parameter.", 
            "title": "Invoke Event"
        }, 
        {
            "location": "/commands/scripting_commands/index.html#invoke-method", 
            "text": "Invokes a method of a component via reflection. Supports passing multiple parameters and storing returned values in a Fungus variable.     Property  Type  Description      Target Object  UnityEngine.GameObject  GameObject containing the component method to be invoked    Target Component Assembly Name  System.String  Name of assembly containing the target component    Target Component Fullname  System.String  Full name of the target component    Target Component Text  System.String  Display name of the target component    Target Method  System.String  Name of target method to invoke on the target component    Target Method Text  System.String  Display name of target method to invoke on the target component    Method Parameters  Fungus.InvokeMethodParameter[]  List of parameters to pass to the invoked method    Save Return Value  System.Boolean  If true, store the return value in a flowchart variable of the same type.    Return Value Variable Key  System.String  Name of Fungus variable to store the return value in    Return Value Type  System.String  The type of the return value    Show Inherited  System.Boolean  If true, list all inherited methods for the component    Call Mode  Fungus.Call+CallMode  The coroutine call behavior for methods that return IEnumerator", 
            "title": "Invoke Method"
        }, 
        {
            "location": "/commands/scripting_commands/index.html#open-url", 
            "text": "Opens the specified URL in the browser.     Property  Type  Description      Url  Fungus.StringData  URL to open in the browser", 
            "title": "Open URL"
        }, 
        {
            "location": "/commands/scripting_commands/index.html#set-active", 
            "text": "Sets a game object in the scene to be active / inactive.     Property  Type  Description      _target Game Object  Fungus.GameObjectData  Reference to game object to enable / disable    Active State  Fungus.BooleanData  Set to true to enable the game object", 
            "title": "Set Active"
        }, 
        {
            "location": "/commands/scripting_commands/index.html#spawn-object", 
            "text": "Spawns a new object based on a reference to a scene or prefab game object.     Property  Type  Description      _source Object  Fungus.GameObjectData  Game object to copy when spawning. Can be a scene object or a prefab.    _parent Transform  Fungus.TransformData  Transform to use for position of newly spawned object.    _spawn Position  Fungus.Vector3Data  Local position of newly spawned object.    _spawn Rotation  Fungus.Vector3Data  Local rotation of newly spawned object.", 
            "title": "Spawn Object"
        }, 
        {
            "location": "/commands/sprite_commands/index.html", 
            "text": "Fade Sprite\n\n\nFades a sprite to a target color over a period of time.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSprite Renderer\n\n\nUnityEngine.SpriteRenderer\n\n\nSprite object to be faded\n\n\n\n\n\n\n_duration\n\n\nFungus.FloatData\n\n\nLength of time to perform the fade\n\n\n\n\n\n\n_target Color\n\n\nFungus.ColorData\n\n\nTarget color to fade to. To only fade transparency level, set the color to white and set the alpha to required transparency.\n\n\n\n\n\n\nWait Until Finished\n\n\nSystem.Boolean\n\n\nWait until the fade has finished before executing the next command\n\n\n\n\n\n\n\n\nSet Clickable 2D\n\n\nSets a Clickable2D component to be clickable / non-clickable.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTarget Clickable2 D\n\n\nFungus.Clickable2D\n\n\nReference to Clickable2D component on a gameobject\n\n\n\n\n\n\nActive State\n\n\nFungus.BooleanData\n\n\nSet to true to enable the component\n\n\n\n\n\n\n\n\nSet Collider\n\n\nSets all collider (2d or 3d) components on the target objects to be active / inactive\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTarget Objects\n\n\nSystem.Collections.Generic.List`1[UnityEngine.GameObject]\n\n\nA list of gameobjects containing collider components to be set active / inactive\n\n\n\n\n\n\nTarget Tag\n\n\nSystem.String\n\n\nAll objects with this tag will have their collider set active / inactive\n\n\n\n\n\n\nActive State\n\n\nFungus.BooleanData\n\n\nSet to true to enable the collider components\n\n\n\n\n\n\n\n\nSet Draggable 2D\n\n\nSets a Draggable2D component to be draggable / non-draggable.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTarget Draggable2 D\n\n\nFungus.Draggable2D\n\n\nReference to Draggable2D component on a gameobject\n\n\n\n\n\n\nActive State\n\n\nFungus.BooleanData\n\n\nSet to true to enable the component\n\n\n\n\n\n\n\n\nSet Mouse Cursor\n\n\nSets the mouse cursor sprite.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCursor Texture\n\n\nUnityEngine.Texture2D\n\n\nTexture to use for cursor. Will use default mouse cursor if no sprite is specified\n\n\n\n\n\n\nHot Spot\n\n\nUnityEngine.Vector2\n\n\nThe offset from the top left of the texture to use as the target point\n\n\n\n\n\n\n\n\nSet Sorting Layer\n\n\nSets the Renderer sorting layer of every child of a game object. Applies to all Renderers (including mesh, skinned mesh, and sprite).\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTarget Object\n\n\nUnityEngine.GameObject\n\n\nRoot Object that will have the Sorting Layer set. Any children will also be affected\n\n\n\n\n\n\nSorting Layer\n\n\nSystem.String\n\n\nThe New Layer Name to apply\n\n\n\n\n\n\n\n\nSet Sprite Order\n\n\nControls the render order of sprites by setting the Order In Layer property of a list of sprites.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTarget Sprites\n\n\nSystem.Collections.Generic.List`1[UnityEngine.SpriteRenderer]\n\n\nList of sprites to set the order in layer property on\n\n\n\n\n\n\nOrder In Layer\n\n\nFungus.IntegerData\n\n\nThe order in layer value to set on the target sprites\n\n\n\n\n\n\n\n\nShow Sprite\n\n\nMakes a sprite visible / invisible by setting the color alpha.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSprite Renderer\n\n\nUnityEngine.SpriteRenderer\n\n\nSprite object to be made visible / invisible\n\n\n\n\n\n\n_visible\n\n\nFungus.BooleanData\n\n\nMake the sprite visible or invisible\n\n\n\n\n\n\nAffect Children\n\n\nSystem.Boolean\n\n\nAffect the visibility of child sprites", 
            "title": "Sprite Commands"
        }, 
        {
            "location": "/commands/sprite_commands/index.html#fade-sprite", 
            "text": "Fades a sprite to a target color over a period of time.     Property  Type  Description      Sprite Renderer  UnityEngine.SpriteRenderer  Sprite object to be faded    _duration  Fungus.FloatData  Length of time to perform the fade    _target Color  Fungus.ColorData  Target color to fade to. To only fade transparency level, set the color to white and set the alpha to required transparency.    Wait Until Finished  System.Boolean  Wait until the fade has finished before executing the next command", 
            "title": "Fade Sprite"
        }, 
        {
            "location": "/commands/sprite_commands/index.html#set-clickable-2d", 
            "text": "Sets a Clickable2D component to be clickable / non-clickable.     Property  Type  Description      Target Clickable2 D  Fungus.Clickable2D  Reference to Clickable2D component on a gameobject    Active State  Fungus.BooleanData  Set to true to enable the component", 
            "title": "Set Clickable 2D"
        }, 
        {
            "location": "/commands/sprite_commands/index.html#set-collider", 
            "text": "Sets all collider (2d or 3d) components on the target objects to be active / inactive     Property  Type  Description      Target Objects  System.Collections.Generic.List`1[UnityEngine.GameObject]  A list of gameobjects containing collider components to be set active / inactive    Target Tag  System.String  All objects with this tag will have their collider set active / inactive    Active State  Fungus.BooleanData  Set to true to enable the collider components", 
            "title": "Set Collider"
        }, 
        {
            "location": "/commands/sprite_commands/index.html#set-draggable-2d", 
            "text": "Sets a Draggable2D component to be draggable / non-draggable.     Property  Type  Description      Target Draggable2 D  Fungus.Draggable2D  Reference to Draggable2D component on a gameobject    Active State  Fungus.BooleanData  Set to true to enable the component", 
            "title": "Set Draggable 2D"
        }, 
        {
            "location": "/commands/sprite_commands/index.html#set-mouse-cursor", 
            "text": "Sets the mouse cursor sprite.     Property  Type  Description      Cursor Texture  UnityEngine.Texture2D  Texture to use for cursor. Will use default mouse cursor if no sprite is specified    Hot Spot  UnityEngine.Vector2  The offset from the top left of the texture to use as the target point", 
            "title": "Set Mouse Cursor"
        }, 
        {
            "location": "/commands/sprite_commands/index.html#set-sorting-layer", 
            "text": "Sets the Renderer sorting layer of every child of a game object. Applies to all Renderers (including mesh, skinned mesh, and sprite).     Property  Type  Description      Target Object  UnityEngine.GameObject  Root Object that will have the Sorting Layer set. Any children will also be affected    Sorting Layer  System.String  The New Layer Name to apply", 
            "title": "Set Sorting Layer"
        }, 
        {
            "location": "/commands/sprite_commands/index.html#set-sprite-order", 
            "text": "Controls the render order of sprites by setting the Order In Layer property of a list of sprites.     Property  Type  Description      Target Sprites  System.Collections.Generic.List`1[UnityEngine.SpriteRenderer]  List of sprites to set the order in layer property on    Order In Layer  Fungus.IntegerData  The order in layer value to set on the target sprites", 
            "title": "Set Sprite Order"
        }, 
        {
            "location": "/commands/sprite_commands/index.html#show-sprite", 
            "text": "Makes a sprite visible / invisible by setting the color alpha.     Property  Type  Description      Sprite Renderer  UnityEngine.SpriteRenderer  Sprite object to be made visible / invisible    _visible  Fungus.BooleanData  Make the sprite visible or invisible    Affect Children  System.Boolean  Affect the visibility of child sprites", 
            "title": "Show Sprite"
        }, 
        {
            "location": "/commands/variable_commands/index.html", 
            "text": "Delete Save Key\n\n\nDeletes a saved value from permanent storage.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nSystem.String\n\n\nName of the saved value. Supports variable substition e.g. \"player_{$PlayerNumber}\n\n\n\n\n\n\n\n\nLoad Variable\n\n\nLoads a saved value and stores it in a Boolean, Integer, Float or String variable. If the key is not found then the variable is not modified.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nSystem.String\n\n\nName of the saved value. Supports variable substition e.g. \"player_{$PlayerNumber}\"\n\n\n\n\n\n\nVariable\n\n\nFungus.Variable\n\n\nVariable to store the value in.\n\n\n\n\n\n\n\n\nRandom Float\n\n\nSets an float variable to a random value in the defined range.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVariable\n\n\nFungus.FloatVariable\n\n\nThe variable whos value will be set\n\n\n\n\n\n\nMin Value\n\n\nFungus.FloatData\n\n\nMinimum value for random range\n\n\n\n\n\n\nMax Value\n\n\nFungus.FloatData\n\n\nMaximum value for random range\n\n\n\n\n\n\n\n\nRandom Integer\n\n\nSets an integer variable to a random value in the defined range.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVariable\n\n\nFungus.IntegerVariable\n\n\nThe variable whos value will be set\n\n\n\n\n\n\nMin Value\n\n\nFungus.IntegerData\n\n\nMinimum value for random range\n\n\n\n\n\n\nMax Value\n\n\nFungus.IntegerData\n\n\nMaximum value for random range\n\n\n\n\n\n\n\n\nRead Text File\n\n\nReads in a text file and stores the contents in a string variable\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nText File\n\n\nUnityEngine.TextAsset\n\n\nText file to read into the string variable\n\n\n\n\n\n\nString Variable\n\n\nFungus.StringVariable\n\n\nString variable to store the tex file contents in\n\n\n\n\n\n\n\n\nReset\n\n\nResets the state of all commands and variables in the Flowchart.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nReset Commands\n\n\nSystem.Boolean\n\n\nReset state of all commands in the script\n\n\n\n\n\n\nReset Variables\n\n\nSystem.Boolean\n\n\nReset variables back to their default values\n\n\n\n\n\n\n\n\nSave Variable\n\n\nSave an Boolean, Integer, Float or String variable to persistent storage using a string key. The value can be loaded again later using the Load Variable command. You can also use the Set Save Profile command to manage separate save profiles for multiple players.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nSystem.String\n\n\nName of the saved value. Supports variable substition e.g. \"player_{$PlayerNumber}\n\n\n\n\n\n\nVariable\n\n\nFungus.Variable\n\n\nVariable to read the value from. Only Boolean, Integer, Float and String are supported.\n\n\n\n\n\n\n\n\nSet Save Profile\n\n\nSets the active profile that the Save Variable and Load Variable commands will use. This is useful to crete multiple player save games. Once set, the profile applies across all Flowcharts and will also persist across scene loads.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSave Profile Name\n\n\nSystem.String\n\n\nName of save profile to make active.\n\n\n\n\n\n\n\n\nSet Variable\n\n\nSets a Boolean, Integer, Float or String variable to a new value using a simple arithmetic operation. The value can be a constant or reference another variable of the same type.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVariable\n\n\nFungus.Variable\n\n\nThe variable whos value will be set\n\n\n\n\n\n\nSet Operator\n\n\nFungus.SetVariable+SetOperator\n\n\nThe type of math operation to be performed\n\n\n\n\n\n\nBoolean Data\n\n\nFungus.BooleanData\n\n\nBoolean value to set with\n\n\n\n\n\n\nInteger Data\n\n\nFungus.IntegerData\n\n\nInteger value to set with\n\n\n\n\n\n\nFloat Data\n\n\nFungus.FloatData\n\n\nFloat value to set with\n\n\n\n\n\n\nString Data\n\n\nFungus.StringDataMulti\n\n\nString value to set with", 
            "title": "Variable Commands"
        }, 
        {
            "location": "/commands/variable_commands/index.html#delete-save-key", 
            "text": "Deletes a saved value from permanent storage.     Property  Type  Description      Key  System.String  Name of the saved value. Supports variable substition e.g. \"player_{$PlayerNumber}", 
            "title": "Delete Save Key"
        }, 
        {
            "location": "/commands/variable_commands/index.html#load-variable", 
            "text": "Loads a saved value and stores it in a Boolean, Integer, Float or String variable. If the key is not found then the variable is not modified.     Property  Type  Description      Key  System.String  Name of the saved value. Supports variable substition e.g. \"player_{$PlayerNumber}\"    Variable  Fungus.Variable  Variable to store the value in.", 
            "title": "Load Variable"
        }, 
        {
            "location": "/commands/variable_commands/index.html#random-float", 
            "text": "Sets an float variable to a random value in the defined range.     Property  Type  Description      Variable  Fungus.FloatVariable  The variable whos value will be set    Min Value  Fungus.FloatData  Minimum value for random range    Max Value  Fungus.FloatData  Maximum value for random range", 
            "title": "Random Float"
        }, 
        {
            "location": "/commands/variable_commands/index.html#random-integer", 
            "text": "Sets an integer variable to a random value in the defined range.     Property  Type  Description      Variable  Fungus.IntegerVariable  The variable whos value will be set    Min Value  Fungus.IntegerData  Minimum value for random range    Max Value  Fungus.IntegerData  Maximum value for random range", 
            "title": "Random Integer"
        }, 
        {
            "location": "/commands/variable_commands/index.html#read-text-file", 
            "text": "Reads in a text file and stores the contents in a string variable     Property  Type  Description      Text File  UnityEngine.TextAsset  Text file to read into the string variable    String Variable  Fungus.StringVariable  String variable to store the tex file contents in", 
            "title": "Read Text File"
        }, 
        {
            "location": "/commands/variable_commands/index.html#reset", 
            "text": "Resets the state of all commands and variables in the Flowchart.     Property  Type  Description      Reset Commands  System.Boolean  Reset state of all commands in the script    Reset Variables  System.Boolean  Reset variables back to their default values", 
            "title": "Reset"
        }, 
        {
            "location": "/commands/variable_commands/index.html#save-variable", 
            "text": "Save an Boolean, Integer, Float or String variable to persistent storage using a string key. The value can be loaded again later using the Load Variable command. You can also use the Set Save Profile command to manage separate save profiles for multiple players.     Property  Type  Description      Key  System.String  Name of the saved value. Supports variable substition e.g. \"player_{$PlayerNumber}    Variable  Fungus.Variable  Variable to read the value from. Only Boolean, Integer, Float and String are supported.", 
            "title": "Save Variable"
        }, 
        {
            "location": "/commands/variable_commands/index.html#set-save-profile", 
            "text": "Sets the active profile that the Save Variable and Load Variable commands will use. This is useful to crete multiple player save games. Once set, the profile applies across all Flowcharts and will also persist across scene loads.     Property  Type  Description      Save Profile Name  System.String  Name of save profile to make active.", 
            "title": "Set Save Profile"
        }, 
        {
            "location": "/commands/variable_commands/index.html#set-variable", 
            "text": "Sets a Boolean, Integer, Float or String variable to a new value using a simple arithmetic operation. The value can be a constant or reference another variable of the same type.     Property  Type  Description      Variable  Fungus.Variable  The variable whos value will be set    Set Operator  Fungus.SetVariable+SetOperator  The type of math operation to be performed    Boolean Data  Fungus.BooleanData  Boolean value to set with    Integer Data  Fungus.IntegerData  Integer value to set with    Float Data  Fungus.FloatData  Float value to set with    String Data  Fungus.StringDataMulti  String value to set with", 
            "title": "Set Variable"
        }, 
        {
            "location": "/commands/event_handlers/core_events/index.html", 
            "text": "Flowchart Enabled\n\n\nThe block will execute when the Flowchart game object is enabled.\n\n\nGame Started\n\n\nThe block will execute when the game starts playing.\n\n\nMessage Received\n\n\nThe block will execute when the specified message is received from a Send Message command.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMessage\n\n\nSystem.String\n\n\nFungus message to listen for", 
            "title": "Events (Core) Commands"
        }, 
        {
            "location": "/commands/event_handlers/core_events/index.html#flowchart-enabled", 
            "text": "The block will execute when the Flowchart game object is enabled.", 
            "title": "Flowchart Enabled"
        }, 
        {
            "location": "/commands/event_handlers/core_events/index.html#game-started", 
            "text": "The block will execute when the game starts playing.", 
            "title": "Game Started"
        }, 
        {
            "location": "/commands/event_handlers/core_events/index.html#message-received", 
            "text": "The block will execute when the specified message is received from a Send Message command.     Property  Type  Description      Message  System.String  Fungus message to listen for", 
            "title": "Message Received"
        }, 
        {
            "location": "/commands/event_handlers/input_events/index.html", 
            "text": "Key Pressed\n\n\nThe block will execute when a key press event occurs.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nKey Press Type\n\n\nFungus.KeyPressed+KeyPressType\n\n\nThe type of keypress to activate on\n\n\n\n\n\n\nKey Code\n\n\nUnityEngine.KeyCode\n\n\nKeycode of the key to activate on", 
            "title": "Events (Input) Commands"
        }, 
        {
            "location": "/commands/event_handlers/input_events/index.html#key-pressed", 
            "text": "The block will execute when a key press event occurs.     Property  Type  Description      Key Press Type  Fungus.KeyPressed+KeyPressType  The type of keypress to activate on    Key Code  UnityEngine.KeyCode  Keycode of the key to activate on", 
            "title": "Key Pressed"
        }, 
        {
            "location": "/commands/event_handlers/sprite_events/index.html", 
            "text": "Drag Cancelled\n\n\nThe block will execute when the player drags an object and releases it without dropping it on a target object.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDraggable Object\n\n\nFungus.Draggable2D\n\n\nDraggable object to listen for drag events on\n\n\n\n\n\n\n\n\nDrag Completed\n\n\nThe block will execute when the player drags an object and successfully drops it on a target object.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDraggable Object\n\n\nFungus.Draggable2D\n\n\nDraggable object to listen for drag events on\n\n\n\n\n\n\nTarget Object\n\n\nUnityEngine.Collider2D\n\n\nDrag target object to listen for drag events on\n\n\n\n\n\n\n\n\nDrag Entered\n\n\nThe block will execute when the player is dragging an object which starts touching the target object.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDraggable Object\n\n\nFungus.Draggable2D\n\n\nDraggable object to listen for drag events on\n\n\n\n\n\n\nTarget Object\n\n\nUnityEngine.Collider2D\n\n\nDrag target object to listen for drag events on\n\n\n\n\n\n\n\n\nDrag Exited\n\n\nThe block will execute when the player is dragging an object which stops touching the target object.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDraggable Object\n\n\nFungus.Draggable2D\n\n\nDraggable object to listen for drag events on\n\n\n\n\n\n\nTarget Object\n\n\nUnityEngine.Collider2D\n\n\nDrag target object to listen for drag events on\n\n\n\n\n\n\n\n\nDrag Started\n\n\nThe block will execute when the player starts dragging an object.\n\n\nObject Clicked\n\n\nThe block will execute when the user clicks or taps on the clickable object.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClickable Object\n\n\nFungus.Clickable2D\n\n\nObject that the user can click or tap on", 
            "title": "Events (Sprite) Commands"
        }, 
        {
            "location": "/commands/event_handlers/sprite_events/index.html#drag-cancelled", 
            "text": "The block will execute when the player drags an object and releases it without dropping it on a target object.     Property  Type  Description      Draggable Object  Fungus.Draggable2D  Draggable object to listen for drag events on", 
            "title": "Drag Cancelled"
        }, 
        {
            "location": "/commands/event_handlers/sprite_events/index.html#drag-completed", 
            "text": "The block will execute when the player drags an object and successfully drops it on a target object.     Property  Type  Description      Draggable Object  Fungus.Draggable2D  Draggable object to listen for drag events on    Target Object  UnityEngine.Collider2D  Drag target object to listen for drag events on", 
            "title": "Drag Completed"
        }, 
        {
            "location": "/commands/event_handlers/sprite_events/index.html#drag-entered", 
            "text": "The block will execute when the player is dragging an object which starts touching the target object.     Property  Type  Description      Draggable Object  Fungus.Draggable2D  Draggable object to listen for drag events on    Target Object  UnityEngine.Collider2D  Drag target object to listen for drag events on", 
            "title": "Drag Entered"
        }, 
        {
            "location": "/commands/event_handlers/sprite_events/index.html#drag-exited", 
            "text": "The block will execute when the player is dragging an object which stops touching the target object.     Property  Type  Description      Draggable Object  Fungus.Draggable2D  Draggable object to listen for drag events on    Target Object  UnityEngine.Collider2D  Drag target object to listen for drag events on", 
            "title": "Drag Exited"
        }, 
        {
            "location": "/commands/event_handlers/sprite_events/index.html#drag-started", 
            "text": "The block will execute when the player starts dragging an object.", 
            "title": "Drag Started"
        }, 
        {
            "location": "/commands/event_handlers/sprite_events/index.html#object-clicked", 
            "text": "The block will execute when the user clicks or taps on the clickable object.     Property  Type  Description      Clickable Object  Fungus.Clickable2D  Object that the user can click or tap on", 
            "title": "Object Clicked"
        }, 
        {
            "location": "/advanced/narrative_parser_tokens/index.html", 
            "text": "Narrative Parser Tags\n\n\nThe following tokens can be used within Story Text to do things such as change the styling of text or clear the contents of a dialog area on input and much more.\n\n\n\n\n{b} Bold Text {/b}\n\n\n{i} Italic Text {/i}\n\n\n{color=red} Color Text (color){/color}\n\n\n{size=30} Text size {/size}\n\n\n{s}, {s=60} Writing speed (chars per sec){/s}\n\n\n{w}, {w=0.5} Wait (seconds)\n\n\n{wi} Wait for input\n\n\n{wc} Wait for input and clear\n\n\n{wp}, {wp=0.5} Wait on punctuation (seconds){/wp}\n\n\n{c} Clear\n\n\n{x} Exit, advance to the next command without waiting for input\n\n\n{vpunch=10,0.5} Vertically punch screen (intensity,time)\n\n\n{hpunch=10,0.5} Horizontally punch screen (intensity,time)\n\n\n{punch=10,0.5} Punch screen (intensity,time)\n\n\n{flash=0.5} Flash screen (duration)\n\n\n{audio=AudioObjectName} Play Audio Once\n\n\n{audioloop=AudioObjectName} Play Audio Loop\n\n\n{audiopause=AudioObjectName} Pause Audio\n\n\n{audiostop=AudioObjectName} Stop Audio\n\n\n{m=MessageName} Broadcast message\n\n\n{$VarName} Substitute variable\n\n\n\n\nExamples:\n\n\nThis is a line of dialog.\n{wc}\nThis is another line of dialog with some {b}bold{/b} styling.\nThis is another line of dialog with some {color=blue}blue{/b} text.", 
            "title": "Narrative Parser Tokens"
        }, 
        {
            "location": "/advanced/narrative_parser_tokens/index.html#narrative-parser-tags", 
            "text": "The following tokens can be used within Story Text to do things such as change the styling of text or clear the contents of a dialog area on input and much more.   {b} Bold Text {/b}  {i} Italic Text {/i}  {color=red} Color Text (color){/color}  {size=30} Text size {/size}  {s}, {s=60} Writing speed (chars per sec){/s}  {w}, {w=0.5} Wait (seconds)  {wi} Wait for input  {wc} Wait for input and clear  {wp}, {wp=0.5} Wait on punctuation (seconds){/wp}  {c} Clear  {x} Exit, advance to the next command without waiting for input  {vpunch=10,0.5} Vertically punch screen (intensity,time)  {hpunch=10,0.5} Horizontally punch screen (intensity,time)  {punch=10,0.5} Punch screen (intensity,time)  {flash=0.5} Flash screen (duration)  {audio=AudioObjectName} Play Audio Once  {audioloop=AudioObjectName} Play Audio Loop  {audiopause=AudioObjectName} Pause Audio  {audiostop=AudioObjectName} Stop Audio  {m=MessageName} Broadcast message  {$VarName} Substitute variable   Examples:  This is a line of dialog.\n{wc}\nThis is another line of dialog with some {b}bold{/b} styling.\nThis is another line of dialog with some {color=blue}blue{/b} text.", 
            "title": "Narrative Parser Tags"
        }, 
        {
            "location": "/fungus_lua/index.html", 
            "text": "What is FungusLua?\n\n\nFungusLua is a simple way to embed Lua scripting into your Unity project. Lua is an easy to learn scripting language so it's a great way to empower artists, writers and designers to use more of the power of Unity.\n\n\nAt its core, FungusLua allows you to control any Unity object from Lua script. It has useful utilities for using Fungus flowcharts and dialogs, persisting variables between scene loads, localization, and working with the Unity Test Tools. \n\n\nWe made FungusLua in response to requests from the Fungus community for a way to script Fungus commands from a text file or spreadsheet. We figured that if people are going to be writing commands in text files, why not go all the way and add a powerful embedded scripting language?\n\n\nDownload the Beta\n\n\nFungusLua is currently available as part of the \nFungus 3 Beta\n package.\n\n\nWe'd would love to hear your feedback on \nthe forum\n about the design of FungusLua during the beta. Be aware that new versions of the beta may introduce breaking changes to your project. Once the design is stable we'll make an official release and maintain backwards compatibility from that point on.\n\n\nTutorial Video\n\n\nThis video shows how to use many of the features available in FungusLua. It's more of a demonstration than a step-by-step tutorial, but hopefully between this video, the docs and the forums you'll have enough to figure it all out :)\n\n\n\n\n\nUsing FungusLua On Its Own\n\n\nFungusLua can easily be used on its own if you don't need the rest of the functionality in Fungus.\n\n\n\n\nIn the project window, move the Fungus/Thirdparty/FungusLua folder up to the root of the project.\n\n\nDelete the Fungus and FungusExamples folders.\n\n\n\n\nThe Tools \n Fungus menu will now only show options for creating FungusLua objects. Obviously you won't be able to use Fungus functions like say(), menu(), etc. anymore, but you can still use LuaEnvironment, LuaBindings, LuaScript to add Lua scripting to your game.\n\n\nAbout Lua\n\n\n\n\nLua\n is a powerful, fast, lightweight, embeddable scripting language. It is a popular language for game development and supporting user modding. The standard resource for learning Lua is \nProgramming in Lua\n.\n\n\nAbout MoonSharp\n\n\n\n\nMoonSharp\n is an open source implementation of the Lua scripting language written entirely in C#. \n\n\nFungusLua is essentially a set of wrapper components built on top of MoonSharp which make it easier to use Lua scripting directly in the Unity editor. MoonSharp does all the hard work really and is a completely awesome project :)\n\n\nThe \nMoonSharp tutorials\n and \nMoonSharp forum\n are great resources to learn how MoonSharp works, especially for more advanced usage.", 
            "title": "Overview"
        }, 
        {
            "location": "/fungus_lua/index.html#what-is-funguslua", 
            "text": "FungusLua is a simple way to embed Lua scripting into your Unity project. Lua is an easy to learn scripting language so it's a great way to empower artists, writers and designers to use more of the power of Unity.  At its core, FungusLua allows you to control any Unity object from Lua script. It has useful utilities for using Fungus flowcharts and dialogs, persisting variables between scene loads, localization, and working with the Unity Test Tools.   We made FungusLua in response to requests from the Fungus community for a way to script Fungus commands from a text file or spreadsheet. We figured that if people are going to be writing commands in text files, why not go all the way and add a powerful embedded scripting language?", 
            "title": "What is FungusLua?"
        }, 
        {
            "location": "/fungus_lua/index.html#download-the-beta", 
            "text": "FungusLua is currently available as part of the  Fungus 3 Beta  package.  We'd would love to hear your feedback on  the forum  about the design of FungusLua during the beta. Be aware that new versions of the beta may introduce breaking changes to your project. Once the design is stable we'll make an official release and maintain backwards compatibility from that point on.", 
            "title": "Download the Beta"
        }, 
        {
            "location": "/fungus_lua/index.html#tutorial-video", 
            "text": "This video shows how to use many of the features available in FungusLua. It's more of a demonstration than a step-by-step tutorial, but hopefully between this video, the docs and the forums you'll have enough to figure it all out :)", 
            "title": "Tutorial Video"
        }, 
        {
            "location": "/fungus_lua/index.html#using-funguslua-on-its-own", 
            "text": "FungusLua can easily be used on its own if you don't need the rest of the functionality in Fungus.   In the project window, move the Fungus/Thirdparty/FungusLua folder up to the root of the project.  Delete the Fungus and FungusExamples folders.   The Tools   Fungus menu will now only show options for creating FungusLua objects. Obviously you won't be able to use Fungus functions like say(), menu(), etc. anymore, but you can still use LuaEnvironment, LuaBindings, LuaScript to add Lua scripting to your game.", 
            "title": "Using FungusLua On Its Own"
        }, 
        {
            "location": "/fungus_lua/index.html#about-lua", 
            "text": "Lua  is a powerful, fast, lightweight, embeddable scripting language. It is a popular language for game development and supporting user modding. The standard resource for learning Lua is  Programming in Lua .", 
            "title": "About Lua"
        }, 
        {
            "location": "/fungus_lua/index.html#about-moonsharp", 
            "text": "MoonSharp  is an open source implementation of the Lua scripting language written entirely in C#.   FungusLua is essentially a set of wrapper components built on top of MoonSharp which make it easier to use Lua scripting directly in the Unity editor. MoonSharp does all the hard work really and is a completely awesome project :)  The  MoonSharp tutorials  and  MoonSharp forum  are great resources to learn how MoonSharp works, especially for more advanced usage.", 
            "title": "About MoonSharp"
        }, 
        {
            "location": "/fungus_lua/create_menu/index.html", 
            "text": "The Create Menu\n\n\nThe easiest way to add Lua scripting to your scene is via the Tools \n Fungus \n Create menu. This allows you to quickly instantiate one of the Lua prefabs that comes with FungusLua. The FungusLua prefabs all begin with 'Lua'.\n\n\nYou can also access these prefabs from Fungus/Thirdparty/FungusLua/Resources/Prefabs.\n\n\n\n\nLua Prefab\n\n\nThis prefab provides a complete Lua setup, including the \nLuaEnvironment\n, \nLuaUtils\n, \nLuaBindings\n and \nLuaScript\n components in a single game object. \n\n\nThis is perfect when you want to quickly set up a single script with a few bindings. If you're learning FungusLua, use the Lua object until you're comfortable with how all these components work.\n\n\nFor more sophisticated scenarios it can be better to place these components in different game objects, e.g. one LuaEnvironment object, one LuaBindings object and multiple LuaScript objects that share the environment and bindings. The other prefab types listed below make it easy to set up this kind of configuration.\n\n\nLua File\n\n\nThis option creates a Lua file in the folder you select. In Unity, Lua files use the .txt extension so they work properly with TextAsset properties and can be opened in the code editor. \n\n\nWhen you create a Lua file, add your Lua script to it in a text editor, and then select the file in the Lua File property of a LuaScript component or Execute Lua command to execute it. You can also use Lua's \nmodule system\n and the require() function to include Lua code from other files. \n\n\nLua Environment Prefab\n\n\nThis prefab provides a \nLuaEnvironment\n component for executing Lua script, and the \nLuaUtils\n component which provides useful utilities for working with Lua, Unity and Fungus.\n\n\nFungusLua will automatically create a default LuaEnvironment if none exists when the scene starts, so you really only need to create a Lua Environment in your scene when you want to customize the default environment setup (e.g. Adding a string table file or registering additional c# types).\n\n\nLua Bindings Prefab\n\n\nThis prefab provides a \nLuaBindings\n component which you can use to bind objects in your scene / project to Lua variables so they can be accessed from Lua script. You can have multiple Lua Bindings in a scene, or additively load in a scene which contains a Lua Bindings for objects in that scene. At startup, all loaded Lua Bindings register their bindings with every Lua Environment in the scene (unless the All Environments option is switched off).\n\n\nIf you want to make a prefab using Lua Bindings, all the bound objects must be children of the Lua Bindings prefab in the hierarchy so that Unity can maintain the object references correctly. This is a limitation of how Unity works.\n\n\nLua Script Prefab\n\n\nThis prefab contains a \nLua Script\n component which you can use to execute Lua script, either typed in the inspector window or loaded via a text file. It also contains an Execute Handler component which supports executing the Lua Script when a Unity event occurs (e.g. start, update, on enter trigger, etc.)\n\n\nLua Store Prefab\n\n\nThis prefab contains a \nLua Store\n component which you can use to persist Lua variables between scene loads.", 
            "title": "Create Menu"
        }, 
        {
            "location": "/fungus_lua/create_menu/index.html#the-create-menu", 
            "text": "The easiest way to add Lua scripting to your scene is via the Tools   Fungus   Create menu. This allows you to quickly instantiate one of the Lua prefabs that comes with FungusLua. The FungusLua prefabs all begin with 'Lua'.  You can also access these prefabs from Fungus/Thirdparty/FungusLua/Resources/Prefabs.", 
            "title": "The Create Menu"
        }, 
        {
            "location": "/fungus_lua/create_menu/index.html#lua-prefab", 
            "text": "This prefab provides a complete Lua setup, including the  LuaEnvironment ,  LuaUtils ,  LuaBindings  and  LuaScript  components in a single game object.   This is perfect when you want to quickly set up a single script with a few bindings. If you're learning FungusLua, use the Lua object until you're comfortable with how all these components work.  For more sophisticated scenarios it can be better to place these components in different game objects, e.g. one LuaEnvironment object, one LuaBindings object and multiple LuaScript objects that share the environment and bindings. The other prefab types listed below make it easy to set up this kind of configuration.", 
            "title": "Lua Prefab"
        }, 
        {
            "location": "/fungus_lua/create_menu/index.html#lua-file", 
            "text": "This option creates a Lua file in the folder you select. In Unity, Lua files use the .txt extension so they work properly with TextAsset properties and can be opened in the code editor.   When you create a Lua file, add your Lua script to it in a text editor, and then select the file in the Lua File property of a LuaScript component or Execute Lua command to execute it. You can also use Lua's  module system  and the require() function to include Lua code from other files.", 
            "title": "Lua File"
        }, 
        {
            "location": "/fungus_lua/create_menu/index.html#lua-environment-prefab", 
            "text": "This prefab provides a  LuaEnvironment  component for executing Lua script, and the  LuaUtils  component which provides useful utilities for working with Lua, Unity and Fungus.  FungusLua will automatically create a default LuaEnvironment if none exists when the scene starts, so you really only need to create a Lua Environment in your scene when you want to customize the default environment setup (e.g. Adding a string table file or registering additional c# types).", 
            "title": "Lua Environment Prefab"
        }, 
        {
            "location": "/fungus_lua/create_menu/index.html#lua-bindings-prefab", 
            "text": "This prefab provides a  LuaBindings  component which you can use to bind objects in your scene / project to Lua variables so they can be accessed from Lua script. You can have multiple Lua Bindings in a scene, or additively load in a scene which contains a Lua Bindings for objects in that scene. At startup, all loaded Lua Bindings register their bindings with every Lua Environment in the scene (unless the All Environments option is switched off).  If you want to make a prefab using Lua Bindings, all the bound objects must be children of the Lua Bindings prefab in the hierarchy so that Unity can maintain the object references correctly. This is a limitation of how Unity works.", 
            "title": "Lua Bindings Prefab"
        }, 
        {
            "location": "/fungus_lua/create_menu/index.html#lua-script-prefab", 
            "text": "This prefab contains a  Lua Script  component which you can use to execute Lua script, either typed in the inspector window or loaded via a text file. It also contains an Execute Handler component which supports executing the Lua Script when a Unity event occurs (e.g. start, update, on enter trigger, etc.)", 
            "title": "Lua Script Prefab"
        }, 
        {
            "location": "/fungus_lua/create_menu/index.html#lua-store-prefab", 
            "text": "This prefab contains a  Lua Store  component which you can use to persist Lua variables between scene loads.", 
            "title": "Lua Store Prefab"
        }, 
        {
            "location": "/fungus_lua/lua_environment/index.html", 
            "text": "LuaEnvironment\n\n\nThe LuaEnvironment component manages all the variables, functions, executing code, etc. for a single Lua context, and provides handy functions for loading and running Lua scripts. In order to run Lua code there must be at least one LuaEnvironment component present in the scene. \n\n\nYou can create one via (Tools \n Fungus \n Create \n LuaEnvironment). You usually don't need to explicitly create a LuaEnvironment though because FungusLua will create one automatically when there isn't one in the scene at startup.\n\n\n\n\nMultiple Environments\n\n\nYou can use multiple LuaEnvironments in your scene to \u2019sandbox\u2019 the variables, functions and executing code of independent sets of Lua scripts. If you do this, make sure to specify the appropriate LuaEnvironment when using LuaScript components, ExecuteLua commands, etc. or else they'll just use the first one they find in the scene.\n\n\nRemote Debugger\n\n\nThe 'Remote Debugger' option activates the built-in MoonSharp remote debugger tool. The application will halt execution on the first executed line of Lua code and open a MoonSharp debugger window in your browser. See the \nMoonSharp documentation\n for more information on using this debugger.\n\n\nLuaUtils\n\n\nWhen you create a LuaEnvironment object via (Tools \n Fungus \n Create \n LuaEnvironment), the created gameobject has another component called LuaUtils which adds many useful features to the basic LuaEnvironment setup. See the \nLua Utils\n section for more info.", 
            "title": "Lua Environment"
        }, 
        {
            "location": "/fungus_lua/lua_environment/index.html#luaenvironment", 
            "text": "The LuaEnvironment component manages all the variables, functions, executing code, etc. for a single Lua context, and provides handy functions for loading and running Lua scripts. In order to run Lua code there must be at least one LuaEnvironment component present in the scene.   You can create one via (Tools   Fungus   Create   LuaEnvironment). You usually don't need to explicitly create a LuaEnvironment though because FungusLua will create one automatically when there isn't one in the scene at startup.", 
            "title": "LuaEnvironment"
        }, 
        {
            "location": "/fungus_lua/lua_environment/index.html#multiple-environments", 
            "text": "You can use multiple LuaEnvironments in your scene to \u2019sandbox\u2019 the variables, functions and executing code of independent sets of Lua scripts. If you do this, make sure to specify the appropriate LuaEnvironment when using LuaScript components, ExecuteLua commands, etc. or else they'll just use the first one they find in the scene.", 
            "title": "Multiple Environments"
        }, 
        {
            "location": "/fungus_lua/lua_environment/index.html#remote-debugger", 
            "text": "The 'Remote Debugger' option activates the built-in MoonSharp remote debugger tool. The application will halt execution on the first executed line of Lua code and open a MoonSharp debugger window in your browser. See the  MoonSharp documentation  for more information on using this debugger.", 
            "title": "Remote Debugger"
        }, 
        {
            "location": "/fungus_lua/lua_environment/index.html#luautils", 
            "text": "When you create a LuaEnvironment object via (Tools   Fungus   Create   LuaEnvironment), the created gameobject has another component called LuaUtils which adds many useful features to the basic LuaEnvironment setup. See the  Lua Utils  section for more info.", 
            "title": "LuaUtils"
        }, 
        {
            "location": "/fungus_lua/lua_bindings/index.html", 
            "text": "LuaBindings component\n\n\nThe LuaBindings component allows you map gameobjects and components in your scenes to Lua variables which you can then access in your Lua scripts. You can bind to any component, including standard Unity components, components from the Unity Asset Store and your own custom scripts.\n\n\nAs well as scene GameObjects and components, you can bind to any Unity object in your project. This includes things like Prefabs, Materials, TextAssets, Textures, ScriptableObjects, etc. \n\n\n\n\nAdding LuaBindings\n\n\nTo setup LuaBindings in your scene:\n\n\n\n\nCreate a LuaBindings object (Tools \n Fungus \n Create \n LuaBindings)\n\n\nDrag the Unity object you want to access to the Object field in the Object Bindings list.\n\n\nThe Key field is automatically populated based on the object name. This will be the variable name you use to access the bound object from Lua script. You can change this key to whatever string you prefer.\n\n\nIf the bound object is a GameObject, you can optionally select a component within it to bind to.\n\n\n\n\nUsing a global table\n\n\nThe bindings specified in a LuaBindings component are automatically registered as global variables in all LuaEnvironments in the scene at startup. \n\n\nRegistering as global variables is convenient when writing short scripts, but for more complex scripts it could cause problems if you accidentally define another variable with the same name as a binding. To avoid this problem, you can use the Table Name property to register bindings in a global table to add a degree of namespace safety.\n\n\nFor example, if your binding is called 'camera' and you've set Table Name to \"myobjects\", you would access the camera object like this:\n\n\nmyobjects.camera\n\n\n\n\nNote that by default the LuaBindings component will register its bindings with all LuaEnvironments in the scene. If you don't want this behaviour, deselect the 'All Environments' option and select the specific LuaEnvironment you want to use instead.\n\n\nFinding member info\n\n\nThe Member Info dropdown box lets you to quickly lookup properties and methods for any bound object. When you select a member, a description of the member is displayed together with the Lua script needed to access it. When binding to standard Unity objects, you can also check the API docs to find out more about the supported methods and properties.\n\n\nRegister Types option\n\n\nIn order to access a C# type from Lua, that type has to be registered with MoonSharp. When the Register Types option is selected, LuaBindings will automatically register the types of bound objects and all public properties \n methods that the type uses.", 
            "title": "Lua Bindings"
        }, 
        {
            "location": "/fungus_lua/lua_bindings/index.html#luabindings-component", 
            "text": "The LuaBindings component allows you map gameobjects and components in your scenes to Lua variables which you can then access in your Lua scripts. You can bind to any component, including standard Unity components, components from the Unity Asset Store and your own custom scripts.  As well as scene GameObjects and components, you can bind to any Unity object in your project. This includes things like Prefabs, Materials, TextAssets, Textures, ScriptableObjects, etc.", 
            "title": "LuaBindings component"
        }, 
        {
            "location": "/fungus_lua/lua_bindings/index.html#adding-luabindings", 
            "text": "To setup LuaBindings in your scene:   Create a LuaBindings object (Tools   Fungus   Create   LuaBindings)  Drag the Unity object you want to access to the Object field in the Object Bindings list.  The Key field is automatically populated based on the object name. This will be the variable name you use to access the bound object from Lua script. You can change this key to whatever string you prefer.  If the bound object is a GameObject, you can optionally select a component within it to bind to.", 
            "title": "Adding LuaBindings"
        }, 
        {
            "location": "/fungus_lua/lua_bindings/index.html#using-a-global-table", 
            "text": "The bindings specified in a LuaBindings component are automatically registered as global variables in all LuaEnvironments in the scene at startup.   Registering as global variables is convenient when writing short scripts, but for more complex scripts it could cause problems if you accidentally define another variable with the same name as a binding. To avoid this problem, you can use the Table Name property to register bindings in a global table to add a degree of namespace safety.  For example, if your binding is called 'camera' and you've set Table Name to \"myobjects\", you would access the camera object like this:  myobjects.camera  Note that by default the LuaBindings component will register its bindings with all LuaEnvironments in the scene. If you don't want this behaviour, deselect the 'All Environments' option and select the specific LuaEnvironment you want to use instead.", 
            "title": "Using a global table"
        }, 
        {
            "location": "/fungus_lua/lua_bindings/index.html#finding-member-info", 
            "text": "The Member Info dropdown box lets you to quickly lookup properties and methods for any bound object. When you select a member, a description of the member is displayed together with the Lua script needed to access it. When binding to standard Unity objects, you can also check the API docs to find out more about the supported methods and properties.", 
            "title": "Finding member info"
        }, 
        {
            "location": "/fungus_lua/lua_bindings/index.html#register-types-option", 
            "text": "In order to access a C# type from Lua, that type has to be registered with MoonSharp. When the Register Types option is selected, LuaBindings will automatically register the types of bound objects and all public properties   methods that the type uses.", 
            "title": "Register Types option"
        }, 
        {
            "location": "/fungus_lua/lua_script/index.html", 
            "text": "LuaScript\n\n\nThe LuaScript component provides an easy way to run Lua scripts in your scene. You can create a LuaScript object via (Tools \n Fungus \n Create \n LuaScript).\n\n\n\n\nExecuteHandler component\n\n\nWhen you create a LuaScript object, you'll see that it contains a component called 'ExecuteHandler'. This component allows you to specify options for when the Lua script should execute. By default it executes the Lua script when the scene starts, but you can change this to execute after a delay, on every update, on trigger events, etc.\n\n\nIf you want to execute a LuaScript from a custom C# script, set On Event to 'Nothing' and instead call the LuaScript.OnExecute() method directly. You can also call the OnExecute() method from a UI event, e.g. a UI Button 'On Click' event.\n\n\nLua script and files\n\n\nYou can enter the Lua code you wish to execute directly into the 'Lua Script' text box. You can also put Lua code into a text file in your project and use the Lua File property to execute it. \n\n\nYou can also use both options at the same time. In this case, the Lua File contents are loaded first and the Lua Script text is appended to that. This is a handy feature for code reuse and configuration, e.g. create a Lua text file with Lua functions to control your game, and then call those functions from the Lua Script text box.\n\n\nLua modules and require()\n\n\nThe Lua module system allows you to create reusable packages of Lua code and include these in your Lua scripts. \nThis tutorial\n explains how to write Lua modules. Module files in FungusLua need to be put into a special folder structure so that the Lua require() function is able to locate them.\n\n\nTo use a Lua module:\n\n\n\n\nCreate a Resources/Lua folder in your project. The capitalization here is important. The folder can be created inside an existing folder in your project.\n\n\nCreate a mymodule.txt file inside the Resources/Lua folder and add your Lua script to it. (Rename mymodule.txt to whatever you want).\n\n\nYou can now use the Lua require function to load the module for use in any Lua script, for example\n\n\n\n\nlocal mymodule = require(\nmymodule\n)\n\n-- Call a function in the module\nmymodule.myfunction()\n\n\n\n\nError messages\n\n\nWhen a script contains errors there are a few techniques you can use to track down the source. \n\n\nFungusLua compiles Lua code at scene startup so that it can be quickly executed when needed later on. This means you will usually see Lua syntax error messages in the console at startup (during compilation), and runtime errors when the script executes later on.\n\n\nAll Lua script errors generate an error message in the Unity log, displayed in red.\n\n\nFor example, if you try to run this invalid code in a LuaScript object:\n\n\nnot valid lua\n\n\n\n\nIt will generate an error message in the log like this\n\n\nLuaScript.LuaScript:(1,0-3): unexpected symbol near 'not'\n1: not valid lua\n\n\n\n\n\n\nThe first 'LuaScript.LuaScript' part gives you information about where the Lua script is running from.\n\n\nThe next part in brackets '(1,0-3)' tells you the line number and character range where the error is located.\n\n\nThe last part gives you a description of the type of error.\n\n\nThe next line on gives a listing of the Lua source code. Use the linenumber info above to locate the line causing the problem.\n\n\n\n\nOne of the most common errors is attempting to access a variable that doesn't exist. In this example error message, we've tried to access the field 'name' on a variable v that hasn't been defined yet.\n\n\nLuaScript.LuaScript:(1,7-9): attempt to index a nil value\n1: print(v.name)\n\n\n\n\nTo resolve this type of error, carefully check that the variable you want to access has been defined, is spelled correctly and is what you think it is. You can use the print() and inspect() functions to display information about the object in the console. For instance, you may have added a binding to a gameobject, but forgot to select the correct component in the binding.\n\n\nFor runtime errors, a useful technique is to add print() calls in your code just before where the error occurs, and run it again. This way you can print out information to the console to help track down the cause of the error.\n\n\nMoonSharp includes a remote debugger tool which you can use to step through Lua code and inspect variables. See the \nLuaEnvironment documentation\n for more information.\n\n\nSetting the LuaEnvironment\n\n\nBy default the LuaScript component will use the first LuaEnvironment it finds in the scene to execute, or create one if none exists. If you want to use a specific LuaEnvironment, set it in the Lua Environment property. This is a good way to keep unrelated sets of Lua scripts sandboxed from each other.\n\n\nRunAsCoroutine option\n\n\nThis option will run the Lua script as a Lua coroutine which is useful for writing asynchronous code via the coroutine.yield() function in Lua. If you don't need to execute your Lua script asynchronously, deselecting this option will avoid the overhead of running as a coroutine. Recommended for advanced users only!", 
            "title": "Lua Script"
        }, 
        {
            "location": "/fungus_lua/lua_script/index.html#luascript", 
            "text": "The LuaScript component provides an easy way to run Lua scripts in your scene. You can create a LuaScript object via (Tools   Fungus   Create   LuaScript).", 
            "title": "LuaScript"
        }, 
        {
            "location": "/fungus_lua/lua_script/index.html#executehandler-component", 
            "text": "When you create a LuaScript object, you'll see that it contains a component called 'ExecuteHandler'. This component allows you to specify options for when the Lua script should execute. By default it executes the Lua script when the scene starts, but you can change this to execute after a delay, on every update, on trigger events, etc.  If you want to execute a LuaScript from a custom C# script, set On Event to 'Nothing' and instead call the LuaScript.OnExecute() method directly. You can also call the OnExecute() method from a UI event, e.g. a UI Button 'On Click' event.", 
            "title": "ExecuteHandler component"
        }, 
        {
            "location": "/fungus_lua/lua_script/index.html#lua-script-and-files", 
            "text": "You can enter the Lua code you wish to execute directly into the 'Lua Script' text box. You can also put Lua code into a text file in your project and use the Lua File property to execute it.   You can also use both options at the same time. In this case, the Lua File contents are loaded first and the Lua Script text is appended to that. This is a handy feature for code reuse and configuration, e.g. create a Lua text file with Lua functions to control your game, and then call those functions from the Lua Script text box.", 
            "title": "Lua script and files"
        }, 
        {
            "location": "/fungus_lua/lua_script/index.html#lua-modules-and-require", 
            "text": "The Lua module system allows you to create reusable packages of Lua code and include these in your Lua scripts.  This tutorial  explains how to write Lua modules. Module files in FungusLua need to be put into a special folder structure so that the Lua require() function is able to locate them.  To use a Lua module:   Create a Resources/Lua folder in your project. The capitalization here is important. The folder can be created inside an existing folder in your project.  Create a mymodule.txt file inside the Resources/Lua folder and add your Lua script to it. (Rename mymodule.txt to whatever you want).  You can now use the Lua require function to load the module for use in any Lua script, for example   local mymodule = require( mymodule )\n\n-- Call a function in the module\nmymodule.myfunction()", 
            "title": "Lua modules and require()"
        }, 
        {
            "location": "/fungus_lua/lua_script/index.html#error-messages", 
            "text": "When a script contains errors there are a few techniques you can use to track down the source.   FungusLua compiles Lua code at scene startup so that it can be quickly executed when needed later on. This means you will usually see Lua syntax error messages in the console at startup (during compilation), and runtime errors when the script executes later on.  All Lua script errors generate an error message in the Unity log, displayed in red.  For example, if you try to run this invalid code in a LuaScript object:  not valid lua  It will generate an error message in the log like this  LuaScript.LuaScript:(1,0-3): unexpected symbol near 'not'\n1: not valid lua   The first 'LuaScript.LuaScript' part gives you information about where the Lua script is running from.  The next part in brackets '(1,0-3)' tells you the line number and character range where the error is located.  The last part gives you a description of the type of error.  The next line on gives a listing of the Lua source code. Use the linenumber info above to locate the line causing the problem.   One of the most common errors is attempting to access a variable that doesn't exist. In this example error message, we've tried to access the field 'name' on a variable v that hasn't been defined yet.  LuaScript.LuaScript:(1,7-9): attempt to index a nil value\n1: print(v.name)  To resolve this type of error, carefully check that the variable you want to access has been defined, is spelled correctly and is what you think it is. You can use the print() and inspect() functions to display information about the object in the console. For instance, you may have added a binding to a gameobject, but forgot to select the correct component in the binding.  For runtime errors, a useful technique is to add print() calls in your code just before where the error occurs, and run it again. This way you can print out information to the console to help track down the cause of the error.  MoonSharp includes a remote debugger tool which you can use to step through Lua code and inspect variables. See the  LuaEnvironment documentation  for more information.", 
            "title": "Error messages"
        }, 
        {
            "location": "/fungus_lua/lua_script/index.html#setting-the-luaenvironment", 
            "text": "By default the LuaScript component will use the first LuaEnvironment it finds in the scene to execute, or create one if none exists. If you want to use a specific LuaEnvironment, set it in the Lua Environment property. This is a good way to keep unrelated sets of Lua scripts sandboxed from each other.", 
            "title": "Setting the LuaEnvironment"
        }, 
        {
            "location": "/fungus_lua/lua_script/index.html#runascoroutine-option", 
            "text": "This option will run the Lua script as a Lua coroutine which is useful for writing asynchronous code via the coroutine.yield() function in Lua. If you don't need to execute your Lua script asynchronously, deselecting this option will avoid the overhead of running as a coroutine. Recommended for advanced users only!", 
            "title": "RunAsCoroutine option"
        }, 
        {
            "location": "/fungus_lua/lua_utils/index.html", 
            "text": "LuaUtils\n\n\nLuaUtils is a component that extends the Lua environment with some commonly used functionality. \n\n\nIt can be accessed from Lua scripts via the 'luautils' global variable. This component mostly does a lot of setup work in the background, but it also provides some handy functions for instantiating, finding and destroying gameobjects in the scene.\n\n\nExample\n\n\nHere's an example of the kind of thing you can do:\n\n\nlocal go = luautils.Find(\nMyObject\n) -- Find a game object by name\nluautils.Destroy(go) -- Destroy it\n\n\n\n\nGameObject Functions\n\n\nThis is the list of GameObject functions provided in luautils.\n\n\n-- Find a game object by name and returns it.\nGameObject Find(string name)\n\n-- Returns one active GameObject tagged tag. Returns null if no GameObject was found.\nGameObject FindWithTag(string tag)\n\n-- Returns a list of active GameObjects tagged tag. Returns empty array if no GameObject was found.\nGameObject[] FindGameObjectsWithTag(string tag)\n\n-- Create a copy of a GameObject.\n-- Can be used to instantiate prefabs.\nGameObject Instantiate(GameObject go)\n\n-- Destroys an instance of a GameObject.\nDestroy(GameObject go)\n\n-- Spawns an instance of a named prefab resource.\n-- The prefab must exist in a Resources folder in the project.\nGameObject Spawn(string resourceName)\n\n\n\n\nRegistering C# Types\n\n\nThe most important function of the LuaUtils component is registering C# types so that instances of those types can be accessed from Lua scripts. \n\n\nIn order to access the members of a C# type from Lua, the type first has to be registered with MoonSharp. Note that for objects added using the LuaBindings component, the relevant types are registered automatically.\n\n\nIn some cases however, you will need to register a type explicitly. The easiest way to do this is by adding the type's name to the FungusTypes.txt or UnityTypes.txt JSON files referenced by the LuaUtils component. You can also create your own JSON files to register additional types. Note that types that are not contained in the main application DLL will need to use the \nnamespace qualified type name\n in the JSON file.\n\n\nExample JSON Type File\n\n\nExample of a types JSON file:\n\n\n{\n    \nregisterTypes\n : [\n        \nFungus.Block\n\n    ],\n    \nextensionTypes\n : [\n        \nFungus.LuaExtensions\n\n    ]\n}\n\n\n\n\nRegistering Types Directly\n\n\nIf you need to register types directly from C#, or do a more complex type of registration, you can use the MoonSharp UserData class to do this. See the MoonSharp documentation for a list of supported registration methods. A good place to register C# types is in the Awake method of a custom component.\n\n\nOther Utilities\n\n\nLuaUtils creates bindings for several useful C# classes and components so that you can access them from Lua script.\n\n\n\n\n\n\n\n\nBinding name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntime\n\n\nThe \nUnity Time class\n. e.g. 'time.deltaTime' returns the delta time for this frame\n\n\n\n\n\n\nplayerprefs\n\n\nThe \nUnity PlayerPrefs\n class. Used for saving data to disk.\n\n\n\n\n\n\nprefs\n\n\nThe \nFungusPrefs class\n, our own wrapper around PlayerPrefs that adds a slots systems.\n\n\n\n\n\n\nfactory\n\n\nThe \nPODTypeFactory\n class for creating common plain-old-data types\n\n\n\n\n\n\nluaenvironment\n\n\nThe LuaEnvironment component used to execute Lua scripts\n\n\n\n\n\n\nluautils\n\n\nA reference to the LuaUtils component itself\n\n\n\n\n\n\ntest\n\n\nSupport for \nUnity Test Tools\n (if installed)\n\n\n\n\n\n\nstringtable\n\n\nThe FungusLua localisation \nstring table\n\n\n\n\n\n\n\n\nPODFactory\n\n\nDue to limitations in C# / Mono, MoonSharp has limited support for working with Plain-Old-Data (struct) types like \nVector3\n, \nColor\n, etc. \n\n\nThe best approach here is to treat POD properties as immutable objects, and never try to modify a POD variable that has been acquired from a C# object. Instead, you should construct a new POD object, populate it with the required values and then pass that object in calls to C# code. The LuaUtils PODFactory class helps do this for common Unity types.\n\n\n-- Returns a new Color object\nlocal c = luautils.factory.color(1,1,1,1)\n\n-- Returns a new Vector2 object\nlocal v2 = luautils.factory.vector2(1, 2)\n\n-- Returns a new Vector3 object\nlocal v3 = luautils.factory.vector3(1, 2, 3)\n\n-- Returns a new Vector4 object\nlocal v4 = luautils.factory.vector4(1, 2, 3, 4)\n\n-- Returns a new Quaternion object\nlocal q = luautils.factory.quaternion(float x, float y, float z) -- Rotation in euler angles\n\n-- Returns a new Rect object\nlocal r = luautils.factory.rect(float x, float y, float width, float height)", 
            "title": "Lua Utils"
        }, 
        {
            "location": "/fungus_lua/lua_utils/index.html#luautils", 
            "text": "LuaUtils is a component that extends the Lua environment with some commonly used functionality.   It can be accessed from Lua scripts via the 'luautils' global variable. This component mostly does a lot of setup work in the background, but it also provides some handy functions for instantiating, finding and destroying gameobjects in the scene.", 
            "title": "LuaUtils"
        }, 
        {
            "location": "/fungus_lua/lua_utils/index.html#example", 
            "text": "Here's an example of the kind of thing you can do:  local go = luautils.Find( MyObject ) -- Find a game object by name\nluautils.Destroy(go) -- Destroy it", 
            "title": "Example"
        }, 
        {
            "location": "/fungus_lua/lua_utils/index.html#gameobject-functions", 
            "text": "This is the list of GameObject functions provided in luautils.  -- Find a game object by name and returns it.\nGameObject Find(string name)\n\n-- Returns one active GameObject tagged tag. Returns null if no GameObject was found.\nGameObject FindWithTag(string tag)\n\n-- Returns a list of active GameObjects tagged tag. Returns empty array if no GameObject was found.\nGameObject[] FindGameObjectsWithTag(string tag)\n\n-- Create a copy of a GameObject.\n-- Can be used to instantiate prefabs.\nGameObject Instantiate(GameObject go)\n\n-- Destroys an instance of a GameObject.\nDestroy(GameObject go)\n\n-- Spawns an instance of a named prefab resource.\n-- The prefab must exist in a Resources folder in the project.\nGameObject Spawn(string resourceName)", 
            "title": "GameObject Functions"
        }, 
        {
            "location": "/fungus_lua/lua_utils/index.html#registering-c-types", 
            "text": "The most important function of the LuaUtils component is registering C# types so that instances of those types can be accessed from Lua scripts.   In order to access the members of a C# type from Lua, the type first has to be registered with MoonSharp. Note that for objects added using the LuaBindings component, the relevant types are registered automatically.  In some cases however, you will need to register a type explicitly. The easiest way to do this is by adding the type's name to the FungusTypes.txt or UnityTypes.txt JSON files referenced by the LuaUtils component. You can also create your own JSON files to register additional types. Note that types that are not contained in the main application DLL will need to use the  namespace qualified type name  in the JSON file.", 
            "title": "Registering C# Types"
        }, 
        {
            "location": "/fungus_lua/lua_utils/index.html#example-json-type-file", 
            "text": "Example of a types JSON file:  {\n     registerTypes  : [\n         Fungus.Block \n    ],\n     extensionTypes  : [\n         Fungus.LuaExtensions \n    ]\n}", 
            "title": "Example JSON Type File"
        }, 
        {
            "location": "/fungus_lua/lua_utils/index.html#registering-types-directly", 
            "text": "If you need to register types directly from C#, or do a more complex type of registration, you can use the MoonSharp UserData class to do this. See the MoonSharp documentation for a list of supported registration methods. A good place to register C# types is in the Awake method of a custom component.", 
            "title": "Registering Types Directly"
        }, 
        {
            "location": "/fungus_lua/lua_utils/index.html#other-utilities", 
            "text": "LuaUtils creates bindings for several useful C# classes and components so that you can access them from Lua script.     Binding name  Description      time  The  Unity Time class . e.g. 'time.deltaTime' returns the delta time for this frame    playerprefs  The  Unity PlayerPrefs  class. Used for saving data to disk.    prefs  The  FungusPrefs class , our own wrapper around PlayerPrefs that adds a slots systems.    factory  The  PODTypeFactory  class for creating common plain-old-data types    luaenvironment  The LuaEnvironment component used to execute Lua scripts    luautils  A reference to the LuaUtils component itself    test  Support for  Unity Test Tools  (if installed)    stringtable  The FungusLua localisation  string table", 
            "title": "Other Utilities"
        }, 
        {
            "location": "/fungus_lua/lua_utils/index.html#podfactory", 
            "text": "Due to limitations in C# / Mono, MoonSharp has limited support for working with Plain-Old-Data (struct) types like  Vector3 ,  Color , etc.   The best approach here is to treat POD properties as immutable objects, and never try to modify a POD variable that has been acquired from a C# object. Instead, you should construct a new POD object, populate it with the required values and then pass that object in calls to C# code. The LuaUtils PODFactory class helps do this for common Unity types.  -- Returns a new Color object\nlocal c = luautils.factory.color(1,1,1,1)\n\n-- Returns a new Vector2 object\nlocal v2 = luautils.factory.vector2(1, 2)\n\n-- Returns a new Vector3 object\nlocal v3 = luautils.factory.vector3(1, 2, 3)\n\n-- Returns a new Vector4 object\nlocal v4 = luautils.factory.vector4(1, 2, 3, 4)\n\n-- Returns a new Quaternion object\nlocal q = luautils.factory.quaternion(float x, float y, float z) -- Rotation in euler angles\n\n-- Returns a new Rect object\nlocal r = luautils.factory.rect(float x, float y, float width, float height)", 
            "title": "PODFactory"
        }, 
        {
            "location": "/fungus_lua/fungus_module/index.html", 
            "text": "Fungus Module\n\n\nThis Lua module provides handy functions for working with Lua, Unity and Fungus. \n\n\nIn this page we cover some of the more generic functionality in the module, other major features are described elsewhere in the documentation.\n\n\nInspecting Lua objects\n\n\nYou can use Lua's built in print() function to get a basic description of any object printed to the console. When you want to get a more detailed description of an object, use inspect().\n\n\n-- Prints a short description of object v\nprint(v)\n\n-- Prints a summary of object v in a human readable format.\ninspect(v)\n\n\n\n\nRunning Unity coroutines\n\n\nWhen you bind to a C# component using Lua Bindings, you can access any public method in the class. If a method returns IEnumerator then that method can be executed \nas a coroutine\n, which is a powerful way to run asynchronous code. \n\n\nThe runwait() function allows you to call a C# coroutine method from Lua which may take multiple frames to finish its work, and then carry on with the rest of the Lua code once that C# method has finished executing. This is how the say() function works for example.\n\n\nThis is the list of available functions for waiting and working with coroutines.\n\n\n-- Waits for a number of seconds, then continue execution of Lua script\nwait(duration)\n\n-- Waits until the Lua function provided returns true, or the timeout expires.\n-- Returns true if the function succeeded, or false if the timeout expired\nwaitfor(fn, timeoutduration)\n\n-- Run a C# coroutine and continue execution of Lua script\nrun(co)\n\n-- Run a C# coroutine, wait until it completes, then continue execution of Lua script\nrunwait(co)\n\n\n\n\nGlobals vs Table mode\n\n\nThe Fungus module can be used in three modes, controlled by the Fungus Module option in the LuaUtils component.  \n\n\n\n\nUse Global Variables: all module functions are mapped to global functions. This allows for convenient access, but it runs the risk that you might accidentally declare a variable with the same name as a Fungus module function.\n\n\nUse Fungus Variable: all module functions are accessed through a global table called 'fungus'. This gives a degree of namespace safety at the cost of more typing. \n\n\nNo Fungus Module: the Fungus module will not be registered. Used if you don't want to use the Fungus module.\n\n\n\n\nOptions 1 and 2 are functionaly equivalent, it's just a matter of personal preference which you want to use.\n\n\n-- sub is a function in the Fungus module, mapped to a global variable\n\n-- Use Global Variables\nsub('a string')\n\n-- Use Fungus Variable\nfungus.sub('a string')", 
            "title": "Fungus Module"
        }, 
        {
            "location": "/fungus_lua/fungus_module/index.html#fungus-module", 
            "text": "This Lua module provides handy functions for working with Lua, Unity and Fungus.   In this page we cover some of the more generic functionality in the module, other major features are described elsewhere in the documentation.", 
            "title": "Fungus Module"
        }, 
        {
            "location": "/fungus_lua/fungus_module/index.html#inspecting-lua-objects", 
            "text": "You can use Lua's built in print() function to get a basic description of any object printed to the console. When you want to get a more detailed description of an object, use inspect().  -- Prints a short description of object v\nprint(v)\n\n-- Prints a summary of object v in a human readable format.\ninspect(v)", 
            "title": "Inspecting Lua objects"
        }, 
        {
            "location": "/fungus_lua/fungus_module/index.html#running-unity-coroutines", 
            "text": "When you bind to a C# component using Lua Bindings, you can access any public method in the class. If a method returns IEnumerator then that method can be executed  as a coroutine , which is a powerful way to run asynchronous code.   The runwait() function allows you to call a C# coroutine method from Lua which may take multiple frames to finish its work, and then carry on with the rest of the Lua code once that C# method has finished executing. This is how the say() function works for example.  This is the list of available functions for waiting and working with coroutines.  -- Waits for a number of seconds, then continue execution of Lua script\nwait(duration)\n\n-- Waits until the Lua function provided returns true, or the timeout expires.\n-- Returns true if the function succeeded, or false if the timeout expired\nwaitfor(fn, timeoutduration)\n\n-- Run a C# coroutine and continue execution of Lua script\nrun(co)\n\n-- Run a C# coroutine, wait until it completes, then continue execution of Lua script\nrunwait(co)", 
            "title": "Running Unity coroutines"
        }, 
        {
            "location": "/fungus_lua/fungus_module/index.html#globals-vs-table-mode", 
            "text": "The Fungus module can be used in three modes, controlled by the Fungus Module option in the LuaUtils component.     Use Global Variables: all module functions are mapped to global functions. This allows for convenient access, but it runs the risk that you might accidentally declare a variable with the same name as a Fungus module function.  Use Fungus Variable: all module functions are accessed through a global table called 'fungus'. This gives a degree of namespace safety at the cost of more typing.   No Fungus Module: the Fungus module will not be registered. Used if you don't want to use the Fungus module.   Options 1 and 2 are functionaly equivalent, it's just a matter of personal preference which you want to use.  -- sub is a function in the Fungus module, mapped to a global variable\n\n-- Use Global Variables\nsub('a string')\n\n-- Use Fungus Variable\nfungus.sub('a string')", 
            "title": "Globals vs Table mode"
        }, 
        {
            "location": "/fungus_lua/controlling_fungus/index.html", 
            "text": "Controlling Fungus\n\n\nThe Fungus module provides several functions for working with the standard Fungus narrative features and flowcharts.\n\n\nYou can control Say and Menu dialogs in much the same way you use Say and Menu commands in a normal Fungus flowchart.\n\n\nWhen you use the menu() function, you supply another Lua function to call when that menu option is selected. Make sure to define the function higher up in the file before referencing it in a menu() call. If you don't explicitly set a SayDialog or MenuDialog object to use default ones are created automatically.\n\n\nNarrative example\n\n\nThis example Lua script demonstrates some of the Say and Menu dialog functions. To try it out, add a Lua object to the scene (Tools \n Fungus \n Create \n Lua) and copy this script into the Lua Script text box. You may also need to add an EventSystem object in the scene (GameObject \n UI \n Event System) so that the menu buttons will respond to user input.\n\n\nsay(\nHi there\n)\nsay \nThis syntax also works for say commands\n\n\n-- Lua functions are the equivalent of Fungus blocks\n-- Note that in Lua functions must be defined before they are called.\n\nfunction goleft()\n    say(\nYou chose left\n)\nend\n\nfunction goright()\n    say(\nYou chose right\n)\nend\n\nmenu(\nGo Left\n, goleft)\nmenu(\nGo right\n, goright)\n\n\n\n\nSay Dialog functions\n\n\nTo use a custom SayDialog:\n\n\n\n\nAdd as SayDialog to the scene (Tools \n Fungus \n Create \n SayDialog)\n\n\nSelect the Lua object in the hierarchy and find the LuaBindings component.\n\n\nAdd a binding to the SayDialog game object, and select the SayDialog component. N.B. Make sure to select the correct component!\n\n\nIn Lua script, you can now activate this SayDialog using the setsaydialog() function, by passing the key of the SayDialog binding.\n\n\n\n\nTo change the behaviour of the say() function, e.g. to not wait for input when done, do:\n\n\nsayoptions.waitforinput = false\n\n\n\n\nYou can bind Character objects in a similar fashion, and set the speaking character using the setcharacter() function.\n\n\nThis is the list of available functions for controlling SayDialogs.\n\n\n-- Options for configuring Say Dialog behaviour\nsayoptions.clearprevious = true | false\nsayoptions.waitforinput = true | false\nsayoptions.fadewhendone = true | false\nsayoptions.stopvoiceover = true | false\n\n-- Set the active saydialog to use with the say function\n-- saydialog: A binding to a SayDialog component\nsetsaydialog(saydialog)\n\n-- Gets the active say dialog, or creates one if none exists yet\ngetsaydialog()\n\n-- Set the active character on the Say Dialog\n-- character: A Fungus.Character component\n-- portrait: The name of a sprite in the character's portrait list\nsetcharacter(character, portrait)\n\n-- Write text to the active Say Dialog\n-- text: A string to write to the say dialog\n-- voice: A voiceover audioclip to play\nsay(text, voiceclip)\n\n\n\n\nPortrait functions\n\n\nStage portraits can be controlled by using the stage.\n\n\nFirst, add your characters and stage to the LuaBindings list.\n\n\n\n\nThen, in a lua script, use the stage commands show, showPortrait and hide to control the portraits on stage.\n\n\n-- Show a character at this stage position\nstage.show(character, \nleft\n)\n\n-- show a character with a specific portrait and move it\n-- from one stage position to another.\nstage.show(character, \nhappy\n, \noffscreen right\n, \nright\n)\n\n-- show a specific portrait\nstage.showPortrait(character, \namused\n)\n\n-- hide a character\nstage.hide(character)\n\n-- Hide a character fading out to a position\nstage.hide(character, \noffscreen left\n)\n\n\n\n\nYou can also specify any Portrait option available by using named arguments.\n\n\nstage.show{character=character, fromPosition=\nleft\n, toPosition=\nright\n}\n\nstage.show{character=character, portrait=\nangry\n}\n\nstage.hide{character=character}\n\n\n\n\nMenu Dialog functions\n\n\nYou setup custom MenuDialogs in the same manner as SayDialogs. This is the list of available MenuDialog functions.\n\n\n-- Set the active menudialog to use with the menu function\nsetmenudialog(menudialog)\n\n-- Gets the active menu dialog, or creates one if none exists yet\ngetmenudialog()\n\n-- Display a menu button\n-- text: text to display on the button\n-- callback: function to call when this option is selected\n-- interactive (optional): if false, displays the option as disabled\nmenu(text, callback, interactive)\n\n-- Display a timer during which the player has to choose an option.\n-- duration: The length of time to display the timer.\n-- callback: Function to call if the timer expires before an option is selected.\nmenutimer(duration, callback)\n\n-- Clear all currently displayed menu options\nclearmenu()\n\n\n\n\nFlowchart functions\n\n\nWe've added special functions for say() and menu() because these are so common in Fungus games. To execute any other commands in Fungus from Lua, you must do it in conjunction with a Flowchart \n Block, like this:\n\n\n\n\nAdd a Flowchart and a Block (e.g. \"MyBlock\") in the scene.\n\n\nAdd the Fungus commands you want to execute from Lua in the Block. (e.g Play Sound)\n\n\nAdd a Lua object to the scene (Tools \n Fungus \n Create \n Lua)\n\n\nIn the LuaBindings component, add a binding to the Flowchart gameobject, and select the Flowchart component.\n\n\nIn the LuaScript component, use the runblock() function to execute the Block, passing the bound flowchart and name of the block as parameters.\n\n\n\n\nrunblock(flowchart, \nMyBlock\n)\n\n\n\n\nYou can also access any Flowchart variable from Lua via the getvar() function.\n\n\n-- Assume the 'flowchart' variable is bound to a Flowchart component in LuaBindings\n-- MyVar is a string variable defined on the Flowchart\n\nlocal myvar = getvar(flowchart, \nMyVar\n)\n\nprint(myvar.value)\n\nmyvar.value = \nNew value for string\n\n\n\n\n\nThis is the list of available functions for controlling Flowcharts.\n\n\n-- Returns the specified Variable in a Flowchart.\n-- To access the value of the variable, use its .value property. e.g.\n--  v = getvar(flowchart, \nFloatVar\n)\n--  v.value = 10    -- Sets the value of the variable to 10\n--  f = v.value     -- f now contains 10\n-- flowchart: The Fungus Flowchart containing the Block to run.\n-- varname: The name of the Variable to get.\ngetvar(flowchart, varname)\n\n-- Runs the specified Block in a Flowchart\n-- flowchart: The Fungus Flowchart containing the Block to run.\n-- blockname: The name of the Block to run.\n-- commandindex: Index of the command to start execution at\n-- nowait: If false, will yield until the Block finishes execution. If true will continue immediately.\nrunblock(flowchart, blockname, commandindex, nowait)", 
            "title": "Controlling Fungus"
        }, 
        {
            "location": "/fungus_lua/controlling_fungus/index.html#controlling-fungus", 
            "text": "The Fungus module provides several functions for working with the standard Fungus narrative features and flowcharts.  You can control Say and Menu dialogs in much the same way you use Say and Menu commands in a normal Fungus flowchart.  When you use the menu() function, you supply another Lua function to call when that menu option is selected. Make sure to define the function higher up in the file before referencing it in a menu() call. If you don't explicitly set a SayDialog or MenuDialog object to use default ones are created automatically.", 
            "title": "Controlling Fungus"
        }, 
        {
            "location": "/fungus_lua/controlling_fungus/index.html#narrative-example", 
            "text": "This example Lua script demonstrates some of the Say and Menu dialog functions. To try it out, add a Lua object to the scene (Tools   Fungus   Create   Lua) and copy this script into the Lua Script text box. You may also need to add an EventSystem object in the scene (GameObject   UI   Event System) so that the menu buttons will respond to user input.  say( Hi there )\nsay  This syntax also works for say commands \n\n-- Lua functions are the equivalent of Fungus blocks\n-- Note that in Lua functions must be defined before they are called.\n\nfunction goleft()\n    say( You chose left )\nend\n\nfunction goright()\n    say( You chose right )\nend\n\nmenu( Go Left , goleft)\nmenu( Go right , goright)", 
            "title": "Narrative example"
        }, 
        {
            "location": "/fungus_lua/controlling_fungus/index.html#say-dialog-functions", 
            "text": "To use a custom SayDialog:   Add as SayDialog to the scene (Tools   Fungus   Create   SayDialog)  Select the Lua object in the hierarchy and find the LuaBindings component.  Add a binding to the SayDialog game object, and select the SayDialog component. N.B. Make sure to select the correct component!  In Lua script, you can now activate this SayDialog using the setsaydialog() function, by passing the key of the SayDialog binding.   To change the behaviour of the say() function, e.g. to not wait for input when done, do:  sayoptions.waitforinput = false  You can bind Character objects in a similar fashion, and set the speaking character using the setcharacter() function.  This is the list of available functions for controlling SayDialogs.  -- Options for configuring Say Dialog behaviour\nsayoptions.clearprevious = true | false\nsayoptions.waitforinput = true | false\nsayoptions.fadewhendone = true | false\nsayoptions.stopvoiceover = true | false\n\n-- Set the active saydialog to use with the say function\n-- saydialog: A binding to a SayDialog component\nsetsaydialog(saydialog)\n\n-- Gets the active say dialog, or creates one if none exists yet\ngetsaydialog()\n\n-- Set the active character on the Say Dialog\n-- character: A Fungus.Character component\n-- portrait: The name of a sprite in the character's portrait list\nsetcharacter(character, portrait)\n\n-- Write text to the active Say Dialog\n-- text: A string to write to the say dialog\n-- voice: A voiceover audioclip to play\nsay(text, voiceclip)", 
            "title": "Say Dialog functions"
        }, 
        {
            "location": "/fungus_lua/controlling_fungus/index.html#portrait-functions", 
            "text": "Stage portraits can be controlled by using the stage.  First, add your characters and stage to the LuaBindings list.   Then, in a lua script, use the stage commands show, showPortrait and hide to control the portraits on stage.  -- Show a character at this stage position\nstage.show(character,  left )\n\n-- show a character with a specific portrait and move it\n-- from one stage position to another.\nstage.show(character,  happy ,  offscreen right ,  right )\n\n-- show a specific portrait\nstage.showPortrait(character,  amused )\n\n-- hide a character\nstage.hide(character)\n\n-- Hide a character fading out to a position\nstage.hide(character,  offscreen left )  You can also specify any Portrait option available by using named arguments.  stage.show{character=character, fromPosition= left , toPosition= right }\n\nstage.show{character=character, portrait= angry }\n\nstage.hide{character=character}", 
            "title": "Portrait functions"
        }, 
        {
            "location": "/fungus_lua/controlling_fungus/index.html#menu-dialog-functions", 
            "text": "You setup custom MenuDialogs in the same manner as SayDialogs. This is the list of available MenuDialog functions.  -- Set the active menudialog to use with the menu function\nsetmenudialog(menudialog)\n\n-- Gets the active menu dialog, or creates one if none exists yet\ngetmenudialog()\n\n-- Display a menu button\n-- text: text to display on the button\n-- callback: function to call when this option is selected\n-- interactive (optional): if false, displays the option as disabled\nmenu(text, callback, interactive)\n\n-- Display a timer during which the player has to choose an option.\n-- duration: The length of time to display the timer.\n-- callback: Function to call if the timer expires before an option is selected.\nmenutimer(duration, callback)\n\n-- Clear all currently displayed menu options\nclearmenu()", 
            "title": "Menu Dialog functions"
        }, 
        {
            "location": "/fungus_lua/controlling_fungus/index.html#flowchart-functions", 
            "text": "We've added special functions for say() and menu() because these are so common in Fungus games. To execute any other commands in Fungus from Lua, you must do it in conjunction with a Flowchart   Block, like this:   Add a Flowchart and a Block (e.g. \"MyBlock\") in the scene.  Add the Fungus commands you want to execute from Lua in the Block. (e.g Play Sound)  Add a Lua object to the scene (Tools   Fungus   Create   Lua)  In the LuaBindings component, add a binding to the Flowchart gameobject, and select the Flowchart component.  In the LuaScript component, use the runblock() function to execute the Block, passing the bound flowchart and name of the block as parameters.   runblock(flowchart,  MyBlock )  You can also access any Flowchart variable from Lua via the getvar() function.  -- Assume the 'flowchart' variable is bound to a Flowchart component in LuaBindings\n-- MyVar is a string variable defined on the Flowchart\n\nlocal myvar = getvar(flowchart,  MyVar )\n\nprint(myvar.value)\n\nmyvar.value =  New value for string   This is the list of available functions for controlling Flowcharts.  -- Returns the specified Variable in a Flowchart.\n-- To access the value of the variable, use its .value property. e.g.\n--  v = getvar(flowchart,  FloatVar )\n--  v.value = 10    -- Sets the value of the variable to 10\n--  f = v.value     -- f now contains 10\n-- flowchart: The Fungus Flowchart containing the Block to run.\n-- varname: The name of the Variable to get.\ngetvar(flowchart, varname)\n\n-- Runs the specified Block in a Flowchart\n-- flowchart: The Fungus Flowchart containing the Block to run.\n-- blockname: The name of the Block to run.\n-- commandindex: Index of the command to start execution at\n-- nowait: If false, will yield until the Block finishes execution. If true will continue immediately.\nrunblock(flowchart, blockname, commandindex, nowait)", 
            "title": "Flowchart functions"
        }, 
        {
            "location": "/fungus_lua/execute_lua/index.html", 
            "text": "The ExecuteLua Command\n\n\nThis command allows you to embed a Lua script to be executed as part of a command sequence in a Block. The Lua script to be executed can be specified in the inspector or in a text file, in the same way as in the \nLua Script component\n.\n\n\nYou can provide an optional LuaEnvironment to use for the execution. If none is provided then a LuaEnvironment will be selected / created automatically. You can choose to store the return value from the Lua script in a Flowchart variable.\n\n\nEvaluating expressions\n\n\nThe Fungus If command can only compare 2 variables at a time. For more complex expressions involving multiple variables or \nmath functions\n, you can use Lua to evaluate the expression and store the result in a Flowchart variable.\n\n\n\n\nAdd a Flowchart object (Tools \n Fungus \n Create \n Flowchart). Add some variables to the Flowchart.\n\n\nAdd a LuaBindings object (Tools \n Fungus \n Create \n LuaBindings)\n\n\nAdd a binding to the Flowchart gameobject, and select the Flowchart component.\n\n\nIn the Flowchart, add an ExecuteLua command in a block to evaluate the complex expression. Store the return value in a Boolean Flowchart variable.\n\n\nAdd an If command which checks the value of the Boolean variable.\n\n\n\n\nIn the Execute Lua command, you can use the getvar() function to get any Flowchart variables to be used in the expression. \nNote: getvar() returns a reference to the Fungus variable object. To access the value of this variable use the .value property.\n\n\nExample\n\n\nHere's an example Lua script which evaluates a complex expression involving 3 integer variables defined on a bound Flowchart.\n\n\nlocal v1 = getvar(flowchart, \nVar1\n)\nlocal v2 = getvar(flowchart, \nVar2\n)\nlocal v3 = getvar(flowchart, \nVar3\n)\n\nreturn (v1.value == v2.value or v3.value == 5) \n\n\n\n\nDon't forget to use .value to access the value stored in the variable object, rather than the variable object itself!", 
            "title": "ExecuteLua command"
        }, 
        {
            "location": "/fungus_lua/execute_lua/index.html#the-executelua-command", 
            "text": "This command allows you to embed a Lua script to be executed as part of a command sequence in a Block. The Lua script to be executed can be specified in the inspector or in a text file, in the same way as in the  Lua Script component .  You can provide an optional LuaEnvironment to use for the execution. If none is provided then a LuaEnvironment will be selected / created automatically. You can choose to store the return value from the Lua script in a Flowchart variable.", 
            "title": "The ExecuteLua Command"
        }, 
        {
            "location": "/fungus_lua/execute_lua/index.html#evaluating-expressions", 
            "text": "The Fungus If command can only compare 2 variables at a time. For more complex expressions involving multiple variables or  math functions , you can use Lua to evaluate the expression and store the result in a Flowchart variable.   Add a Flowchart object (Tools   Fungus   Create   Flowchart). Add some variables to the Flowchart.  Add a LuaBindings object (Tools   Fungus   Create   LuaBindings)  Add a binding to the Flowchart gameobject, and select the Flowchart component.  In the Flowchart, add an ExecuteLua command in a block to evaluate the complex expression. Store the return value in a Boolean Flowchart variable.  Add an If command which checks the value of the Boolean variable.   In the Execute Lua command, you can use the getvar() function to get any Flowchart variables to be used in the expression. \nNote: getvar() returns a reference to the Fungus variable object. To access the value of this variable use the .value property.", 
            "title": "Evaluating expressions"
        }, 
        {
            "location": "/fungus_lua/execute_lua/index.html#example", 
            "text": "Here's an example Lua script which evaluates a complex expression involving 3 integer variables defined on a bound Flowchart.  local v1 = getvar(flowchart,  Var1 )\nlocal v2 = getvar(flowchart,  Var2 )\nlocal v3 = getvar(flowchart,  Var3 )\n\nreturn (v1.value == v2.value or v3.value == 5)   Don't forget to use .value to access the value stored in the variable object, rather than the variable object itself!", 
            "title": "Example"
        }, 
        {
            "location": "/fungus_lua/preferences/index.html", 
            "text": "PlayerPrefs\n\n\nThe \nUnity PlayerPrefs\n system stores and accesses player preferences between game sessions.\n\n\nHere's an example of using PlayerPrefs from Lua.\n\n\n-- Saving a value to preferences\nplayerprefs.SetInt(\nSaveName\n, 1)\nplayerprefs.Save()\n\n-- Using a value from preferences\nlocal v = playerprefs.GetInt(\nSaveName\n)\nprint(v) -- Will print out 1\n\n\n\n\nFungusPrefs\n\n\nThe FungusPrefs class is a wrapper around PlayerPrefs that adds support for save slots. \n\n\nBasically, if you want to store simple values use PlayerPrefs. If you want to store values using multiple player profiles, you should use FungusPrefs. The slot variable is an integer [0..] and key is a string.\n\n\n-- Deletes all saved values for all slots.\nprefs.DeleteAll()\n\n-- Removes key and its value from this save slot.\nprefs.DeleteKey(slot, key)\n\n-- Returns the float value associated with this key in this save slot, it it exists.\nprefs.GetFloat(slot, key, defaultValue)\n\n-- Returns the int value associated with this key in this save slot, it it exists.\nprefs.GetInt(slot, key, defaultValue)\n\n-- Returns the string value associated with this key in this save slot, it it exists.\nprefs.GetString(slot, key, defaultValue)\n\n-- Returns true if the key exists in this save slot.\nprefs.HasKey(slot, key)\n\n-- Writes all modified prefences to disk.\nprefs.Save()\n\n-- Sets the value of the preference identified by key for this save slot.\nprefs.SetFloat(slot, key, value)\n\n-- Sets the value of the preference identified by key for this save slot.\nprefs.SetInt(slot, key, value)\n\n-- Sets the value of the preference identified by key for this save slot.\nprefs.SetString(slot, key, value)\n\n-- Returns the combined key used to identify a key within a save slot.\nprefs.GetSlotKey(slot, key)", 
            "title": "Preferences"
        }, 
        {
            "location": "/fungus_lua/preferences/index.html#playerprefs", 
            "text": "The  Unity PlayerPrefs  system stores and accesses player preferences between game sessions.  Here's an example of using PlayerPrefs from Lua.  -- Saving a value to preferences\nplayerprefs.SetInt( SaveName , 1)\nplayerprefs.Save()\n\n-- Using a value from preferences\nlocal v = playerprefs.GetInt( SaveName )\nprint(v) -- Will print out 1", 
            "title": "PlayerPrefs"
        }, 
        {
            "location": "/fungus_lua/preferences/index.html#fungusprefs", 
            "text": "The FungusPrefs class is a wrapper around PlayerPrefs that adds support for save slots.   Basically, if you want to store simple values use PlayerPrefs. If you want to store values using multiple player profiles, you should use FungusPrefs. The slot variable is an integer [0..] and key is a string.  -- Deletes all saved values for all slots.\nprefs.DeleteAll()\n\n-- Removes key and its value from this save slot.\nprefs.DeleteKey(slot, key)\n\n-- Returns the float value associated with this key in this save slot, it it exists.\nprefs.GetFloat(slot, key, defaultValue)\n\n-- Returns the int value associated with this key in this save slot, it it exists.\nprefs.GetInt(slot, key, defaultValue)\n\n-- Returns the string value associated with this key in this save slot, it it exists.\nprefs.GetString(slot, key, defaultValue)\n\n-- Returns true if the key exists in this save slot.\nprefs.HasKey(slot, key)\n\n-- Writes all modified prefences to disk.\nprefs.Save()\n\n-- Sets the value of the preference identified by key for this save slot.\nprefs.SetFloat(slot, key, value)\n\n-- Sets the value of the preference identified by key for this save slot.\nprefs.SetInt(slot, key, value)\n\n-- Sets the value of the preference identified by key for this save slot.\nprefs.SetString(slot, key, value)\n\n-- Returns the combined key used to identify a key within a save slot.\nprefs.GetSlotKey(slot, key)", 
            "title": "FungusPrefs"
        }, 
        {
            "location": "/fungus_lua/lua_store/index.html", 
            "text": "LuaStore\n\n\nA common issue when working with multiple scenes in Unity is how to persist variable values from one scene to the next. By default, all scene objects and their properties are destroyed when you load another scene.\n\n\nThe Lua Store component provides an easy way around this when using Lua scripting. A shared global table called \u2018store\u2019 is bound in every Lua Environment when the scene starts. This global table persists between scene loads, which means you can set a store variable in one scene, load another scene, then access the same store variable and it will still retain the value you set earlier.\n\n\nExample\n\n\n\n\nAdd a LuaStore to the first scene in your game (Tools \nFungus \n Create \n LuaStore). \n\n\nSet variables in the store in Lua, e.g. \n\n\n\n\nstore.name = \nJohn\n\n\n\n\n\n\n\nLoad another scene, e.g. using the Load Scene command in Fungus\n\n\nGet the same variable from the store, e.g.\n\n\n\n\nprint(store.name) -- prints \nJohn", 
            "title": "Lua Store"
        }, 
        {
            "location": "/fungus_lua/lua_store/index.html#luastore", 
            "text": "A common issue when working with multiple scenes in Unity is how to persist variable values from one scene to the next. By default, all scene objects and their properties are destroyed when you load another scene.  The Lua Store component provides an easy way around this when using Lua scripting. A shared global table called \u2018store\u2019 is bound in every Lua Environment when the scene starts. This global table persists between scene loads, which means you can set a store variable in one scene, load another scene, then access the same store variable and it will still retain the value you set earlier.", 
            "title": "LuaStore"
        }, 
        {
            "location": "/fungus_lua/lua_store/index.html#example", 
            "text": "Add a LuaStore to the first scene in your game (Tools  Fungus   Create   LuaStore).   Set variables in the store in Lua, e.g.    store.name =  John    Load another scene, e.g. using the Load Scene command in Fungus  Get the same variable from the store, e.g.   print(store.name) -- prints  John", 
            "title": "Example"
        }, 
        {
            "location": "/fungus_lua/string_table/index.html", 
            "text": "String Table\n\n\nThe LuaUtils component provides support for simple text localisation.\n\n\n\n\nDefine your language strings in a JSON file and save it in the project assets folder.\n\n\nAdd a LuaEnvironment component to your scene - e.g. Tools \n Fungus \n Create \n LuaEnvironment \n\n\nIn the LuaUtils component, set the String Table property to reference your JSON file asset.\n\n\nUse the {$VarName} syntax to subsitute a localised string anywhere that string substitution is supported. e.g. in a Lua script:\n\n\n\n\nsay(\n{$hello_world}\n)\n\n\n\n\nYou can use the {$VarName} syntax anywhere that variable subsitution is supported. This includes:\n\n\n\n\nSay command\n\n\nMenu command\n\n\nSet Text command\n\n\nWrite command\n\n\nCharacter object - character name\n\n\nDebug Log command\n\n\nLoad Variable command - save key\n\n\nSave Variable command - save key\n\n\nDelete Save Key command\n\n\n\n\nYou can also extend the Fungus string substitution system with your own components. Implement the StringSubstituter.ISubstitutionHandler interface in a Monobehavior subclass and then return the modified string from SubstituteStrings().\n\n\nJSON Format\n\n\nThis is an example of the JSON format for the string table. To use this localised string, you would use the {$hello_world} tag.\n\n\n{\n    \nhello_world\n : {\n        \nen\n : \nHello world!\n,\n        \nfr\n : \nBonjour le monde!\n,\n        \nde\n : \nHallo Welt!\n\n    },\n    \ngoodbye_world\n : {\n        \nen\n : \nGoodbye world!\n,\n        \nfr\n : \nAu revoir monde!\n,\n        \nde\n : \nAuf Wiedersehen Welt!\n\n    }\n}\n\n\n\n\nLua Functions\n\n\nThese Lua functions are available for working with the string table.\n\n\n-- Set active language for string table\nsetlanguage(languagecode)\n\n-- Get a named string from the string table\ngetstring(key)\n\n-- Substitutes variables and localisation strings into a piece of text\n-- e.g. v = 10, \nSubbed value is [$v]\n =\n \nSubbed value is 10\n\nsub(text)", 
            "title": "String Table"
        }, 
        {
            "location": "/fungus_lua/string_table/index.html#string-table", 
            "text": "The LuaUtils component provides support for simple text localisation.   Define your language strings in a JSON file and save it in the project assets folder.  Add a LuaEnvironment component to your scene - e.g. Tools   Fungus   Create   LuaEnvironment   In the LuaUtils component, set the String Table property to reference your JSON file asset.  Use the {$VarName} syntax to subsitute a localised string anywhere that string substitution is supported. e.g. in a Lua script:   say( {$hello_world} )  You can use the {$VarName} syntax anywhere that variable subsitution is supported. This includes:   Say command  Menu command  Set Text command  Write command  Character object - character name  Debug Log command  Load Variable command - save key  Save Variable command - save key  Delete Save Key command   You can also extend the Fungus string substitution system with your own components. Implement the StringSubstituter.ISubstitutionHandler interface in a Monobehavior subclass and then return the modified string from SubstituteStrings().", 
            "title": "String Table"
        }, 
        {
            "location": "/fungus_lua/string_table/index.html#json-format", 
            "text": "This is an example of the JSON format for the string table. To use this localised string, you would use the {$hello_world} tag.  {\n     hello_world  : {\n         en  :  Hello world! ,\n         fr  :  Bonjour le monde! ,\n         de  :  Hallo Welt! \n    },\n     goodbye_world  : {\n         en  :  Goodbye world! ,\n         fr  :  Au revoir monde! ,\n         de  :  Auf Wiedersehen Welt! \n    }\n}", 
            "title": "JSON Format"
        }, 
        {
            "location": "/fungus_lua/string_table/index.html#lua-functions", 
            "text": "These Lua functions are available for working with the string table.  -- Set active language for string table\nsetlanguage(languagecode)\n\n-- Get a named string from the string table\ngetstring(key)\n\n-- Substitutes variables and localisation strings into a piece of text\n-- e.g. v = 10,  Subbed value is [$v]  =   Subbed value is 10 \nsub(text)", 
            "title": "Lua Functions"
        }, 
        {
            "location": "/fungus_lua/unity_test_tools/index.html", 
            "text": "Unity Test Tools\n\n\nIf you are using the \nUnity Test Tools\n, FungusLua is a powerful and fast way to create integration tests using Lua scripting.\n\n\nExample\n\n\n\n\nCreate a new test in the scene.\n\n\nAdd a Lua object (Tools \n Fungus \n Create \n Lua) as a child of the test object.\n\n\nIn the LuaScript component, use the check() function to assert whatever conditions you need for the test. At the end, call pass().\n\n\n\n\nExample test script:\n\n\n-- Check a condition, and output a reason if it fails\ncheck( myvar \n 40, \nMy var is too big\n)\n\n-- Just check a condition\ncheck( myvar \n 20 )\n\n-- Test will exit successfully\npass()\n\n\n\n\nIf any of the checks fail, then the test fails immediately.\n\n\nLua Functions\n\n\n-- Checks if a condition is true\n-- Lua has a built in assert function, so we called this check to avoid conflicting.\ncheck(c, reason)\n\n-- Pass an integration test\npass()\n\n-- Fail an integration test\n-- reason: Optional string explaining why the test failed.\nfail(reason)", 
            "title": "Unity Test Tools"
        }, 
        {
            "location": "/fungus_lua/unity_test_tools/index.html#unity-test-tools", 
            "text": "If you are using the  Unity Test Tools , FungusLua is a powerful and fast way to create integration tests using Lua scripting.", 
            "title": "Unity Test Tools"
        }, 
        {
            "location": "/fungus_lua/unity_test_tools/index.html#example", 
            "text": "Create a new test in the scene.  Add a Lua object (Tools   Fungus   Create   Lua) as a child of the test object.  In the LuaScript component, use the check() function to assert whatever conditions you need for the test. At the end, call pass().   Example test script:  -- Check a condition, and output a reason if it fails\ncheck( myvar   40,  My var is too big )\n\n-- Just check a condition\ncheck( myvar   20 )\n\n-- Test will exit successfully\npass()  If any of the checks fail, then the test fails immediately.", 
            "title": "Example"
        }, 
        {
            "location": "/fungus_lua/unity_test_tools/index.html#lua-functions", 
            "text": "-- Checks if a condition is true\n-- Lua has a built in assert function, so we called this check to avoid conflicting.\ncheck(c, reason)\n\n-- Pass an integration test\npass()\n\n-- Fail an integration test\n-- reason: Optional string explaining why the test failed.\nfail(reason)", 
            "title": "Lua Functions"
        }, 
        {
            "location": "/tutorial_videos/index.html", 
            "text": "These free tutorial videos cover most of the functionality available in Fungus.\n\n\nThe videos are also available as a \nYouTube playlist\n. Many thanks to \nPaul Mc Grath\n for contributing the videos, and \nEric Chen\n for Chinese subtitles.\n\n\nFungus Overview\n\n\n\n\nInstalling Fungus in your project\n\n\n\n\nBasics of using Fungus\n\n\n\n\nUsing Event Handlers\n\n\n\n\nControlling the camera\n\n\n\n\n2D graphics with Sprites\n\n\n\n\nPlaying music and sound effects\n\n\n\n\nControlling animations\n\n\n\n\nNarrative based gameplay\n\n\n\n\nCommand flow and loops\n\n\n\n\nScripting scene objects\n\n\n\n\nUsing variables to track state\n\n\n\n\nTweening game objects using iTween\n\n\n\n\nSupporting multiple languages\n\n\n\n\nEditing story text\n\n\n\n\nUsing Spine animations\n\n\n\n\nCustom commands and event handlers\n\n\n\n\nControlling Unity UI objects\n\n\n\n\nUnite Europe 2015 talk\n\n\n\n\nFungus Live Stream #1\n\n\n\n\nFungus Live Stream #2\n\n\n\n\nFungus Live Stream #3", 
            "title": "Tutorial Videos"
        }, 
        {
            "location": "/tutorial_videos/index.html#fungus-overview", 
            "text": "", 
            "title": "Fungus Overview"
        }, 
        {
            "location": "/tutorial_videos/index.html#installing-fungus-in-your-project", 
            "text": "", 
            "title": "Installing Fungus in your project"
        }, 
        {
            "location": "/tutorial_videos/index.html#basics-of-using-fungus", 
            "text": "", 
            "title": "Basics of using Fungus"
        }, 
        {
            "location": "/tutorial_videos/index.html#using-event-handlers", 
            "text": "", 
            "title": "Using Event Handlers"
        }, 
        {
            "location": "/tutorial_videos/index.html#controlling-the-camera", 
            "text": "", 
            "title": "Controlling the camera"
        }, 
        {
            "location": "/tutorial_videos/index.html#2d-graphics-with-sprites", 
            "text": "", 
            "title": "2D graphics with Sprites"
        }, 
        {
            "location": "/tutorial_videos/index.html#playing-music-and-sound-effects", 
            "text": "", 
            "title": "Playing music and sound effects"
        }, 
        {
            "location": "/tutorial_videos/index.html#controlling-animations", 
            "text": "", 
            "title": "Controlling animations"
        }, 
        {
            "location": "/tutorial_videos/index.html#narrative-based-gameplay", 
            "text": "", 
            "title": "Narrative based gameplay"
        }, 
        {
            "location": "/tutorial_videos/index.html#command-flow-and-loops", 
            "text": "", 
            "title": "Command flow and loops"
        }, 
        {
            "location": "/tutorial_videos/index.html#scripting-scene-objects", 
            "text": "", 
            "title": "Scripting scene objects"
        }, 
        {
            "location": "/tutorial_videos/index.html#using-variables-to-track-state", 
            "text": "", 
            "title": "Using variables to track state"
        }, 
        {
            "location": "/tutorial_videos/index.html#tweening-game-objects-using-itween", 
            "text": "", 
            "title": "Tweening game objects using iTween"
        }, 
        {
            "location": "/tutorial_videos/index.html#supporting-multiple-languages", 
            "text": "", 
            "title": "Supporting multiple languages"
        }, 
        {
            "location": "/tutorial_videos/index.html#editing-story-text", 
            "text": "", 
            "title": "Editing story text"
        }, 
        {
            "location": "/tutorial_videos/index.html#using-spine-animations", 
            "text": "", 
            "title": "Using Spine animations"
        }, 
        {
            "location": "/tutorial_videos/index.html#custom-commands-and-event-handlers", 
            "text": "", 
            "title": "Custom commands and event handlers"
        }, 
        {
            "location": "/tutorial_videos/index.html#controlling-unity-ui-objects", 
            "text": "", 
            "title": "Controlling Unity UI objects"
        }, 
        {
            "location": "/tutorial_videos/index.html#unite-europe-2015-talk", 
            "text": "", 
            "title": "Unite Europe 2015 talk"
        }, 
        {
            "location": "/tutorial_videos/index.html#fungus-live-stream-1", 
            "text": "", 
            "title": "Fungus Live Stream #1"
        }, 
        {
            "location": "/tutorial_videos/index.html#fungus-live-stream-2", 
            "text": "", 
            "title": "Fungus Live Stream #2"
        }, 
        {
            "location": "/tutorial_videos/index.html#fungus-live-stream-3", 
            "text": "", 
            "title": "Fungus Live Stream #3"
        }, 
        {
            "location": "/training_course/index.html", 
            "text": "Fungus Training Course\n\n\n\nWe've teamed up with Paul Mc Grath to create an extensive \ntraining course\n which teaches how to make storytelling games using Fungus and Unity. Sales of this course help us to continue developing Fungus, so it's a nice way to learn Fungus and to support the work we're doing on the project.\n\n\n\n\n\n\n\n\nCourse Description\n\n\nThis course is aimed at anyone who wants to make interactive story based games, but, who doesn't know how to code.\n\n\nFungus is a free Unity 3D plugin that allows non coders (like me) access to some of Unity's core features.\n\n\nIf you have never used game development software, or if you have struggled with code trying to make games, Fungus and this course are exactly what you need.\n\n\nWhat are the requirements?\n\n\n\n\nA Mac or PC that is capable of running Unity 3D.\n\n\nThe latest version of Unity 3D (we will talk you through download and install on the course).\n\n\nThe latest Version of Fungus (We will talk you through download and install on the course).\n\n\n\n\nWhat am I going to get from this course?\n\n\n\n\nOver 43 lectures and 8 hours of content!\n\n\nYou will have a Full working knowledge of Fungus and how it integrates with Unity.\n\n\nYou will be able to create narrative story games, point and click adventures and hidden object games.\n\n\nYou will be able to publish your games to Unity\u2019s webplayer and WebGL and have them on your own website, publish them to Android and IOS versions (if you have a Apple developer Licence) and sell them through - Google play or the apple store.\n\n\nMost importantly you will be able to do all of this without writing one line of code.\n\n\n\n\nWhat is the target audience?\n\n\n\n\nIf you don\u2019t know how to code and want to make Interactive Story Games. This course is for you.\n\n\nIf you\u2019re an artist, illustrator or writer and would like to delve into game development in an easy and approachable manner, this course if for you.\n\n\nIf you have struggled with code to create games in unity, this course is for you.\n\n\nIf you're able to code and know your way round unity and love the joy of a visual coding interface, this course is for you.", 
            "title": "Training Course"
        }, 
        {
            "location": "/training_course/index.html#fungus-training-course", 
            "text": "We've teamed up with Paul Mc Grath to create an extensive  training course  which teaches how to make storytelling games using Fungus and Unity. Sales of this course help us to continue developing Fungus, so it's a nice way to learn Fungus and to support the work we're doing on the project.", 
            "title": "Fungus Training Course"
        }, 
        {
            "location": "/training_course/index.html#course-description", 
            "text": "This course is aimed at anyone who wants to make interactive story based games, but, who doesn't know how to code.  Fungus is a free Unity 3D plugin that allows non coders (like me) access to some of Unity's core features.  If you have never used game development software, or if you have struggled with code trying to make games, Fungus and this course are exactly what you need.", 
            "title": "Course Description"
        }, 
        {
            "location": "/training_course/index.html#what-are-the-requirements", 
            "text": "A Mac or PC that is capable of running Unity 3D.  The latest version of Unity 3D (we will talk you through download and install on the course).  The latest Version of Fungus (We will talk you through download and install on the course).", 
            "title": "What are the requirements?"
        }, 
        {
            "location": "/training_course/index.html#what-am-i-going-to-get-from-this-course", 
            "text": "Over 43 lectures and 8 hours of content!  You will have a Full working knowledge of Fungus and how it integrates with Unity.  You will be able to create narrative story games, point and click adventures and hidden object games.  You will be able to publish your games to Unity\u2019s webplayer and WebGL and have them on your own website, publish them to Android and IOS versions (if you have a Apple developer Licence) and sell them through - Google play or the apple store.  Most importantly you will be able to do all of this without writing one line of code.", 
            "title": "What am I going to get from this course?"
        }, 
        {
            "location": "/training_course/index.html#what-is-the-target-audience", 
            "text": "If you don\u2019t know how to code and want to make Interactive Story Games. This course is for you.  If you\u2019re an artist, illustrator or writer and would like to delve into game development in an easy and approachable manner, this course if for you.  If you have struggled with code to create games in unity, this course is for you.  If you're able to code and know your way round unity and love the joy of a visual coding interface, this course is for you.", 
            "title": "What is the target audience?"
        }
    ]
}